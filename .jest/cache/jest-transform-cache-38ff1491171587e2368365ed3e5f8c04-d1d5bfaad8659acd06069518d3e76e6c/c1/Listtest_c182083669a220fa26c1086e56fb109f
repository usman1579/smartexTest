1043862d7201568671e8154ad34362bf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNativeTestingLibrary = require("react-native-testing-library");
var _List = require("./List");
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _reducer = _interopRequireDefault(require("./reducer"));
var _moment = _interopRequireDefault(require("moment"));
var _jsxRuntime = require("react/jsx-runtime");
var dataList = [{
  id: '1',
  title: 'Test Title',
  description: 'Test Description',
  date: new Date(),
  check: true
}, {
  id: '2',
  title: 'Test Title 2',
  description: 'Test Description 2',
  date: new Date(),
  check: false
}];
describe('List Component', function () {
  var store;
  var navigation;
  beforeEach(function () {
    store = (0, _redux.createStore)(_reducer.default);
    navigation = {
      navigate: jest.fn()
    };
    store.dispatch({
      type: 'DATA_LIST',
      dataList: dataList
    });
  });
  it('should render the component with data and call onPressItem', function () {
    var _render = (0, _reactNativeTestingLibrary.render)((0, _jsxRuntime.jsx)(_reactRedux.Provider, {
        store: store,
        children: (0, _jsxRuntime.jsx)(_List.List, {
          navigation: navigation
        })
      })),
      getAllByTestId = _render.getAllByTestId;
    var items = getAllByTestId('item');
    expect(items.length).toBe(2);
    fireEvent.press(items[0]);
    expect(navigation.navigate).toHaveBeenCalledWith('Detail', {
      item: dataList[0],
      screen: 'Edit Item'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkYXRhTGlzdCIsImlkIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImRhdGUiLCJEYXRlIiwiY2hlY2siLCJkZXNjcmliZSIsInN0b3JlIiwibmF2aWdhdGlvbiIsImJlZm9yZUVhY2giLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJuYXZpZ2F0ZSIsImplc3QiLCJmbiIsImRpc3BhdGNoIiwidHlwZSIsIml0IiwicmVuZGVyIiwiZ2V0QWxsQnlUZXN0SWQiLCJpdGVtcyIsImV4cGVjdCIsImxlbmd0aCIsInRvQmUiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiaXRlbSIsInNjcmVlbiJdLCJzb3VyY2VzIjpbIkxpc3QudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1uYXRpdmUtdGVzdGluZy1saWJyYXJ5JztcbmltcG9ydCB7IExpc3QgfSBmcm9tICcuL0xpc3QnO1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBjcmVhdGVTdG9yZSB9IGZyb20gJ3JlZHV4JztcbmltcG9ydCByZWR1Y2VyIGZyb20gJy4vcmVkdWNlcic7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmNvbnN0IGRhdGFMaXN0ID0gW1xuICB7XG4gICAgaWQ6ICcxJyxcbiAgICB0aXRsZTogJ1Rlc3QgVGl0bGUnLFxuICAgIGRlc2NyaXB0aW9uOiAnVGVzdCBEZXNjcmlwdGlvbicsXG4gICAgZGF0ZTogbmV3IERhdGUoKSxcbiAgICBjaGVjazogdHJ1ZVxuICB9LFxuICB7XG4gICAgaWQ6ICcyJyxcbiAgICB0aXRsZTogJ1Rlc3QgVGl0bGUgMicsXG4gICAgZGVzY3JpcHRpb246ICdUZXN0IERlc2NyaXB0aW9uIDInLFxuICAgIGRhdGU6IG5ldyBEYXRlKCksXG4gICAgY2hlY2s6IGZhbHNlXG4gIH1cbl1cblxuZGVzY3JpYmUoJ0xpc3QgQ29tcG9uZW50JywgKCkgPT4ge1xuICBsZXQgc3RvcmU7XG4gIGxldCBuYXZpZ2F0aW9uO1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJlZHVjZXIpO1xuICAgIG5hdmlnYXRpb24gPSB7IG5hdmlnYXRlOiBqZXN0LmZuKCkgfTtcbiAgICBzdG9yZS5kaXNwYXRjaCh7IHR5cGU6ICdEQVRBX0xJU1QnLCBkYXRhTGlzdCB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgdGhlIGNvbXBvbmVudCB3aXRoIGRhdGEgYW5kIGNhbGwgb25QcmVzc0l0ZW0nLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICAgIDxMaXN0IG5hdmlnYXRpb249e25hdmlnYXRpb259IC8+XG4gICAgICA8L1Byb3ZpZGVyPlxuICAgICk7XG4gICAgY29uc3QgaXRlbXMgPSBnZXRBbGxCeVRlc3RJZCgnaXRlbScpO1xuICAgIGV4cGVjdChpdGVtcy5sZW5ndGgpLnRvQmUoMik7XG4gICAgZmlyZUV2ZW50LnByZXNzKGl0ZW1zWzBdKTtcbiAgICBleHBlY3QobmF2aWdhdGlvbi5uYXZpZ2F0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0RldGFpbCcsIHtcbiAgICAgIGl0ZW06IGRhdGFMaXN0WzBdLFxuICAgICAgc2NyZWVuOiAnRWRpdCBJdGVtJ1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQTRCO0FBRTVCLElBQU1BLFFBQVEsR0FBRyxDQUNmO0VBQ0VDLEVBQUUsRUFBRSxHQUFHO0VBQ1BDLEtBQUssRUFBRSxZQUFZO0VBQ25CQyxXQUFXLEVBQUUsa0JBQWtCO0VBQy9CQyxJQUFJLEVBQUUsSUFBSUMsSUFBSSxFQUFFO0VBQ2hCQyxLQUFLLEVBQUU7QUFDVCxDQUFDLEVBQ0Q7RUFDRUwsRUFBRSxFQUFFLEdBQUc7RUFDUEMsS0FBSyxFQUFFLGNBQWM7RUFDckJDLFdBQVcsRUFBRSxvQkFBb0I7RUFDakNDLElBQUksRUFBRSxJQUFJQyxJQUFJLEVBQUU7RUFDaEJDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FDRjtBQUVEQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBTTtFQUMvQixJQUFJQyxLQUFLO0VBQ1QsSUFBSUMsVUFBVTtFQUNkQyxVQUFVLENBQUMsWUFBTTtJQUNmRixLQUFLLEdBQUcsSUFBQUcsa0JBQVcsRUFBQ0MsZ0JBQU8sQ0FBQztJQUM1QkgsVUFBVSxHQUFHO01BQUVJLFFBQVEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFO0lBQUcsQ0FBQztJQUNwQ1AsS0FBSyxDQUFDUSxRQUFRLENBQUM7TUFBRUMsSUFBSSxFQUFFLFdBQVc7TUFBRWpCLFFBQVEsRUFBUkE7SUFBUyxDQUFDLENBQUM7RUFDakQsQ0FBQyxDQUFDO0VBRUZrQixFQUFFLENBQUMsNERBQTRELEVBQUUsWUFBTTtJQUNyRSxjQUEyQixJQUFBQyxpQ0FBTSxFQUMvQixxQkFBQyxvQkFBUTtRQUFDLEtBQUssRUFBRVgsS0FBTTtRQUFBLFVBQ3JCLHFCQUFDLFVBQUk7VUFBQyxVQUFVLEVBQUVDO1FBQVc7TUFBRyxFQUN2QixDQUNaO01BSk9XLGNBQWMsV0FBZEEsY0FBYztJQUt0QixJQUFNQyxLQUFLLEdBQUdELGNBQWMsQ0FBQyxNQUFNLENBQUM7SUFDcENFLE1BQU0sQ0FBQ0QsS0FBSyxDQUFDRSxNQUFNLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM1QkMsU0FBUyxDQUFDQyxLQUFLLENBQUNMLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QkMsTUFBTSxDQUFDYixVQUFVLENBQUNJLFFBQVEsQ0FBQyxDQUFDYyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUU7TUFDekRDLElBQUksRUFBRTVCLFFBQVEsQ0FBQyxDQUFDLENBQUM7TUFDakI2QixNQUFNLEVBQUU7SUFDVixDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==