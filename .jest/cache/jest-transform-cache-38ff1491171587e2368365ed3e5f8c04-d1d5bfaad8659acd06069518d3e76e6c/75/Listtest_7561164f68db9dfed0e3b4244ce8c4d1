33a8c4b495afc72cdd02ae04797220f9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _List = require("../List");
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _reducer = _interopRequireDefault(require("../../../redux/reducer"));
var _moment = _interopRequireDefault(require("moment"));
var _jsxRuntime = require("react/jsx-runtime");
var dataList = [{
  id: '1',
  title: 'Test Title',
  description: 'Test Description',
  date: new Date(),
  check: true
}, {
  id: '2',
  title: 'Test Title 2',
  description: 'Test Description 2',
  date: new Date(),
  check: false
}];
describe('List Component', function () {
  var store;
  var navigation;
  beforeEach(function () {
    store = (0, _redux.createStore)(_reducer.default);
    navigation = {
      navigate: jest.fn()
    };
    store.dispatch({
      type: 'SET_DATA_LIST',
      dataList: dataList
    });
  });
  it('should render the component with data and call onPressItem', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactRedux.Provider, {
        store: store,
        children: (0, _jsxRuntime.jsx)(_List.List, {
          navigation: navigation
        })
      })),
      getAllByTestId = _render.getAllByTestId;
    var items = getAllByTestId('itemList');
    expect(items.length).toBe(2);
    expect(store.getState().dataList).toEqual(dataList);
    _reactNative.fireEvent.press(items[0]);
    expect(navigation.navigate).toHaveBeenCalledWith('Detail', {
      item: dataList[0],
      screen: 'Edit Item'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkYXRhTGlzdCIsImlkIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImRhdGUiLCJEYXRlIiwiY2hlY2siLCJkZXNjcmliZSIsInN0b3JlIiwibmF2aWdhdGlvbiIsImJlZm9yZUVhY2giLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJuYXZpZ2F0ZSIsImplc3QiLCJmbiIsImRpc3BhdGNoIiwidHlwZSIsIml0IiwicmVuZGVyIiwiZ2V0QWxsQnlUZXN0SWQiLCJpdGVtcyIsImV4cGVjdCIsImxlbmd0aCIsInRvQmUiLCJnZXRTdGF0ZSIsInRvRXF1YWwiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiaXRlbSIsInNjcmVlbiJdLCJzb3VyY2VzIjpbIkxpc3QudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3JlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IExpc3QgfSBmcm9tICcuLi9MaXN0JztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgY3JlYXRlU3RvcmUgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgcmVkdWNlciBmcm9tICcuLi8uLi8uLi9yZWR1eC9yZWR1Y2VyJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuY29uc3QgZGF0YUxpc3QgPSBbXG4gIHtcbiAgICBpZDogJzEnLFxuICAgIHRpdGxlOiAnVGVzdCBUaXRsZScsXG4gICAgZGVzY3JpcHRpb246ICdUZXN0IERlc2NyaXB0aW9uJyxcbiAgICBkYXRlOiBuZXcgRGF0ZSgpLFxuICAgIGNoZWNrOiB0cnVlXG4gIH0sXG4gIHtcbiAgICBpZDogJzInLFxuICAgIHRpdGxlOiAnVGVzdCBUaXRsZSAyJyxcbiAgICBkZXNjcmlwdGlvbjogJ1Rlc3QgRGVzY3JpcHRpb24gMicsXG4gICAgZGF0ZTogbmV3IERhdGUoKSxcbiAgICBjaGVjazogZmFsc2VcbiAgfVxuICBcbl1cblxuLy8gZGVzY3JpYmUoJ0xpc3QgQ29tcG9uZW50JywgKCkgPT4ge1xuLy8gICBsZXQgc3RvcmU7XG4vLyAgIGxldCBuYXZpZ2F0aW9uO1xuLy8gICBiZWZvcmVFYWNoKCgpID0+IHtcbi8vICAgICBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJlZHVjZXIpO1xuLy8gICAgIG5hdmlnYXRpb24gPSB7IG5hdmlnYXRlOiBqZXN0LmZuKCkgfTtcbi8vICAgICBzdG9yZS5kaXNwYXRjaCh7IHR5cGU6ICdEQVRBX0xJU1QnLCBkYXRhTGlzdCB9KTtcbi8vICAgfSk7XG5cbi8vICAgaXQoJ3Nob3VsZCByZW5kZXIgdGhlIGNvbXBvbmVudCB3aXRoIGRhdGEgYW5kIGNhbGwgb25QcmVzc0l0ZW0nLCAoKSA9PiB7XG4vLyAgICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCB9ID0gcmVuZGVyKFxuLy8gICAgICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4vLyAgICAgICAgIDxMaXN0IG5hdmlnYXRpb249e25hdmlnYXRpb259IC8+XG4vLyAgICAgICA8L1Byb3ZpZGVyPlxuLy8gICAgICk7XG4vLyAgICAgY29uc3QgaXRlbXMgPSBnZXRBbGxCeVRlc3RJZCgnaXRlbScpO1xuLy8gICAgIGV4cGVjdChpdGVtcy5sZW5ndGgpLnRvQmUoMik7XG4vLyAgICAgZmlyZUV2ZW50LnByZXNzKGl0ZW1zWzBdKTtcbi8vICAgICBleHBlY3QobmF2aWdhdGlvbi5uYXZpZ2F0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0RldGFpbCcsIHtcbi8vICAgICAgIGl0ZW06IGRhdGFMaXN0WzBdLFxuLy8gICAgICAgc2NyZWVuOiAnRWRpdCBJdGVtJ1xuLy8gICAgIH0pO1xuLy8gICB9KTtcbi8vIH0pO1xuXG5cbmRlc2NyaWJlKCdMaXN0IENvbXBvbmVudCcsICgpID0+IHtcbiAgICBsZXQgc3RvcmU7XG4gICAgbGV0IG5hdmlnYXRpb247XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBzdG9yZSA9IGNyZWF0ZVN0b3JlKHJlZHVjZXIpO1xuICAgICAgbmF2aWdhdGlvbiA9IHsgbmF2aWdhdGU6IGplc3QuZm4oKSB9O1xuICAgICAgc3RvcmUuZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0RBVEFfTElTVCcsIGRhdGFMaXN0IH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcmVuZGVyIHRoZSBjb21wb25lbnQgd2l0aCBkYXRhIGFuZCBjYWxsIG9uUHJlc3NJdGVtJywgKCkgPT4ge1xuICAgICAgY29uc3QgeyBnZXRBbGxCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgICAgICA8TGlzdCBuYXZpZ2F0aW9uPXtuYXZpZ2F0aW9ufSAvPlxuICAgICAgICA8L1Byb3ZpZGVyPlxuICAgICAgKTtcbiAgICAgIGNvbnN0IGl0ZW1zID0gZ2V0QWxsQnlUZXN0SWQoJ2l0ZW1MaXN0Jyk7XG4gICAgICBleHBlY3QoaXRlbXMubGVuZ3RoKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHN0b3JlLmdldFN0YXRlKCkuZGF0YUxpc3QpLnRvRXF1YWwoZGF0YUxpc3QpXG4gICAgICBmaXJlRXZlbnQucHJlc3MoaXRlbXNbMF0pO1xuICAgICAgZXhwZWN0KG5hdmlnYXRpb24ubmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdEZXRhaWwnLCB7XG4gICAgICAgIGl0ZW06IGRhdGFMaXN0WzBdLFxuICAgICAgICBzY3JlZW46J0VkaXQgSXRlbSdcbiAgICB9KTtcbn0pO1xufSk7Il0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQTRCO0FBRTVCLElBQU1BLFFBQVEsR0FBRyxDQUNmO0VBQ0VDLEVBQUUsRUFBRSxHQUFHO0VBQ1BDLEtBQUssRUFBRSxZQUFZO0VBQ25CQyxXQUFXLEVBQUUsa0JBQWtCO0VBQy9CQyxJQUFJLEVBQUUsSUFBSUMsSUFBSSxFQUFFO0VBQ2hCQyxLQUFLLEVBQUU7QUFDVCxDQUFDLEVBQ0Q7RUFDRUwsRUFBRSxFQUFFLEdBQUc7RUFDUEMsS0FBSyxFQUFFLGNBQWM7RUFDckJDLFdBQVcsRUFBRSxvQkFBb0I7RUFDakNDLElBQUksRUFBRSxJQUFJQyxJQUFJLEVBQUU7RUFDaEJDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FFRjtBQTRCREMsUUFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQU07RUFDN0IsSUFBSUMsS0FBSztFQUNULElBQUlDLFVBQVU7RUFDZEMsVUFBVSxDQUFDLFlBQU07SUFDZkYsS0FBSyxHQUFHLElBQUFHLGtCQUFXLEVBQUNDLGdCQUFPLENBQUM7SUFDNUJILFVBQVUsR0FBRztNQUFFSSxRQUFRLEVBQUVDLElBQUksQ0FBQ0MsRUFBRTtJQUFHLENBQUM7SUFDcENQLEtBQUssQ0FBQ1EsUUFBUSxDQUFDO01BQUVDLElBQUksRUFBRSxlQUFlO01BQUVqQixRQUFRLEVBQVJBO0lBQVMsQ0FBQyxDQUFDO0VBQ3JELENBQUMsQ0FBQztFQUNGa0IsRUFBRSxDQUFDLDREQUE0RCxFQUFFLFlBQU07SUFDckUsY0FBMkIsSUFBQUMsbUJBQU0sRUFDL0IscUJBQUMsb0JBQVE7UUFBQyxLQUFLLEVBQUVYLEtBQU07UUFBQSxVQUNyQixxQkFBQyxVQUFJO1VBQUMsVUFBVSxFQUFFQztRQUFXO01BQUcsRUFDdkIsQ0FDWjtNQUpPVyxjQUFjLFdBQWRBLGNBQWM7SUFLdEIsSUFBTUMsS0FBSyxHQUFHRCxjQUFjLENBQUMsVUFBVSxDQUFDO0lBQ3hDRSxNQUFNLENBQUNELEtBQUssQ0FBQ0UsTUFBTSxDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUJGLE1BQU0sQ0FBQ2QsS0FBSyxDQUFDaUIsUUFBUSxFQUFFLENBQUN6QixRQUFRLENBQUMsQ0FBQzBCLE9BQU8sQ0FBQzFCLFFBQVEsQ0FBQztJQUNuRDJCLHNCQUFTLENBQUNDLEtBQUssQ0FBQ1AsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pCQyxNQUFNLENBQUNiLFVBQVUsQ0FBQ0ksUUFBUSxDQUFDLENBQUNnQixvQkFBb0IsQ0FBQyxRQUFRLEVBQUU7TUFDekRDLElBQUksRUFBRTlCLFFBQVEsQ0FBQyxDQUFDLENBQUM7TUFDakIrQixNQUFNLEVBQUM7SUFDWCxDQUFDLENBQUM7RUFDTixDQUFDLENBQUM7QUFDRixDQUFDLENBQUMifQ==