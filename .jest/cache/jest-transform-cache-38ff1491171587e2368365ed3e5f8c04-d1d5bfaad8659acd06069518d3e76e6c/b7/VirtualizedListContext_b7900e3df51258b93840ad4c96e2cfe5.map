{"version":3,"names":["VirtualizedListContext","React","createContext","__DEV__","displayName","VirtualizedListContextResetter","children","VirtualizedListContextProvider","value","context","useMemo","cellKey","getScrollMetrics","horizontal","getOutermostParentListRef","getNestedChildState","registerAsNestedChild","unregisterAsNestedChild","debugInfo","listKey","parent","VirtualizedListCellContextProvider","currContext","useContext"],"sources":["VirtualizedListContext.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type VirtualizedList from './VirtualizedList.js';\nimport * as React from 'react';\nimport {useMemo, useContext} from 'react';\n\ntype Frame = $ReadOnly<{\n  offset: number,\n  length: number,\n  index: number,\n  inLayout: boolean,\n}>;\n\nexport type ChildListState = $ReadOnly<{\n  first: number,\n  last: number,\n  frames: {[key: number]: Frame},\n}>;\n\n// Data propagated through nested lists (regardless of orientation) that is\n// useful for producing diagnostics for usage errors involving nesting (e.g\n// missing/duplicate keys).\nexport type ListDebugInfo = $ReadOnly<{\n  cellKey: string,\n  listKey: string,\n  parent: ?ListDebugInfo,\n  // We include all ancestors regardless of orientation, so this is not always\n  // identical to the child's orientation.\n  horizontal: boolean,\n}>;\n\ntype Context = $ReadOnly<{\n  cellKey: ?string,\n  getScrollMetrics: () => {\n    contentLength: number,\n    dOffset: number,\n    dt: number,\n    offset: number,\n    timestamp: number,\n    velocity: number,\n    visibleLength: number,\n    zoomScale: number,\n  },\n  horizontal: ?boolean,\n  getOutermostParentListRef: () => VirtualizedList,\n  getNestedChildState: string => ?ChildListState,\n  registerAsNestedChild: ({\n    cellKey: string,\n    key: string,\n    ref: VirtualizedList,\n    parentDebugInfo: ListDebugInfo,\n  }) => ?ChildListState,\n  unregisterAsNestedChild: ({\n    key: string,\n    state: ChildListState,\n  }) => void,\n  debugInfo: ListDebugInfo,\n}>;\n\nexport const VirtualizedListContext: React.Context<?Context> =\n  React.createContext(null);\nif (__DEV__) {\n  VirtualizedListContext.displayName = 'VirtualizedListContext';\n}\n\n/**\n * Resets the context. Intended for use by portal-like components (e.g. Modal).\n */\nexport function VirtualizedListContextResetter({\n  children,\n}: {\n  children: React.Node,\n}): React.Node {\n  return (\n    <VirtualizedListContext.Provider value={null}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n\n/**\n * Sets the context with memoization. Intended to be used by `VirtualizedList`.\n */\nexport function VirtualizedListContextProvider({\n  children,\n  value,\n}: {\n  children: React.Node,\n  value: Context,\n}): React.Node {\n  // Avoid setting a newly created context object if the values are identical.\n  const context = useMemo(\n    () => ({\n      cellKey: null,\n      getScrollMetrics: value.getScrollMetrics,\n      horizontal: value.horizontal,\n      getOutermostParentListRef: value.getOutermostParentListRef,\n      getNestedChildState: value.getNestedChildState,\n      registerAsNestedChild: value.registerAsNestedChild,\n      unregisterAsNestedChild: value.unregisterAsNestedChild,\n      debugInfo: {\n        cellKey: value.debugInfo.cellKey,\n        horizontal: value.debugInfo.horizontal,\n        listKey: value.debugInfo.listKey,\n        parent: value.debugInfo.parent,\n      },\n    }),\n    [\n      value.getScrollMetrics,\n      value.horizontal,\n      value.getOutermostParentListRef,\n      value.getNestedChildState,\n      value.registerAsNestedChild,\n      value.unregisterAsNestedChild,\n      value.debugInfo.cellKey,\n      value.debugInfo.horizontal,\n      value.debugInfo.listKey,\n      value.debugInfo.parent,\n    ],\n  );\n  return (\n    <VirtualizedListContext.Provider value={context}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n\n/**\n * Sets the `cellKey`. Intended to be used by `VirtualizedList` for each cell.\n */\nexport function VirtualizedListCellContextProvider({\n  cellKey,\n  children,\n}: {\n  cellKey: string,\n  children: React.Node,\n}): React.Node {\n  // Avoid setting a newly created context object if the values are identical.\n  const currContext = useContext(VirtualizedListContext);\n  const context = useMemo(\n    () => (currContext == null ? null : {...currContext, cellKey}),\n    [currContext, cellKey],\n  );\n  return (\n    <VirtualizedListContext.Provider value={context}>\n      {children}\n    </VirtualizedListContext.Provider>\n  );\n}\n"],"mappings":";;;;;;;AAWA;AAA+B;AAAA;AAAA;AAwDxB,IAAMA,sBAA+C,GAC1DC,KAAK,CAACC,aAAa,CAAC,IAAI,CAAC;AAAC;AAC5B,IAAIC,OAAO,EAAE;EACXH,sBAAsB,CAACI,WAAW,GAAG,wBAAwB;AAC/D;AAKO,SAASC,8BAA8B,OAI/B;EAAA,IAHbC,QAAQ,QAARA,QAAQ;EAIR,OACE,qBAAC,sBAAsB,CAAC,QAAQ;IAAC,KAAK,EAAE,IAAK;IAAA,UAC1CA;EAAQ,EACuB;AAEtC;AAKO,SAASC,8BAA8B,QAM/B;EAAA,IALbD,QAAQ,SAARA,QAAQ;IACRE,KAAK,SAALA,KAAK;EAML,IAAMC,OAAO,GAAG,IAAAC,aAAO,EACrB;IAAA,OAAO;MACLC,OAAO,EAAE,IAAI;MACbC,gBAAgB,EAAEJ,KAAK,CAACI,gBAAgB;MACxCC,UAAU,EAAEL,KAAK,CAACK,UAAU;MAC5BC,yBAAyB,EAAEN,KAAK,CAACM,yBAAyB;MAC1DC,mBAAmB,EAAEP,KAAK,CAACO,mBAAmB;MAC9CC,qBAAqB,EAAER,KAAK,CAACQ,qBAAqB;MAClDC,uBAAuB,EAAET,KAAK,CAACS,uBAAuB;MACtDC,SAAS,EAAE;QACTP,OAAO,EAAEH,KAAK,CAACU,SAAS,CAACP,OAAO;QAChCE,UAAU,EAAEL,KAAK,CAACU,SAAS,CAACL,UAAU;QACtCM,OAAO,EAAEX,KAAK,CAACU,SAAS,CAACC,OAAO;QAChCC,MAAM,EAAEZ,KAAK,CAACU,SAAS,CAACE;MAC1B;IACF,CAAC;EAAA,CAAC,EACF,CACEZ,KAAK,CAACI,gBAAgB,EACtBJ,KAAK,CAACK,UAAU,EAChBL,KAAK,CAACM,yBAAyB,EAC/BN,KAAK,CAACO,mBAAmB,EACzBP,KAAK,CAACQ,qBAAqB,EAC3BR,KAAK,CAACS,uBAAuB,EAC7BT,KAAK,CAACU,SAAS,CAACP,OAAO,EACvBH,KAAK,CAACU,SAAS,CAACL,UAAU,EAC1BL,KAAK,CAACU,SAAS,CAACC,OAAO,EACvBX,KAAK,CAACU,SAAS,CAACE,MAAM,CACvB,CACF;EACD,OACE,qBAAC,sBAAsB,CAAC,QAAQ;IAAC,KAAK,EAAEX,OAAQ;IAAA,UAC7CH;EAAQ,EACuB;AAEtC;AAKO,SAASe,kCAAkC,QAMnC;EAAA,IALbV,OAAO,SAAPA,OAAO;IACPL,QAAQ,SAARA,QAAQ;EAMR,IAAMgB,WAAW,GAAG,IAAAC,gBAAU,EAACvB,sBAAsB,CAAC;EACtD,IAAMS,OAAO,GAAG,IAAAC,aAAO,EACrB;IAAA,OAAOY,WAAW,IAAI,IAAI,GAAG,IAAI,qBAAOA,WAAW;MAAEX,OAAO,EAAPA;IAAO,EAAC;EAAA,CAAC,EAC9D,CAACW,WAAW,EAAEX,OAAO,CAAC,CACvB;EACD,OACE,qBAAC,sBAAsB,CAAC,QAAQ;IAAC,KAAK,EAAEF,OAAQ;IAAA,UAC7CH;EAAQ,EACuB;AAEtC"}