fcd2b499b29668576d6675d1a2b8539b
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _requireNativeComponent = _interopRequireDefault(require("../../Libraries/ReactNative/requireNativeComponent"));
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
function codegenNativeComponent(componentName, options) {
  if (global.RN$Bridgeless === true) {
    var errorMessage = "Native Component '" + componentName + "' that calls codegenNativeComponent was not code generated at build time. Please check its definition.";
    console.error(errorMessage);
  }
  var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;
  if (options != null && options.paperComponentNameDeprecated != null) {
    if (_UIManager.default.hasViewManagerConfig(componentName)) {
      componentNameInUse = componentName;
    } else if (options.paperComponentNameDeprecated != null && _UIManager.default.hasViewManagerConfig(options.paperComponentNameDeprecated)) {
      componentNameInUse = options.paperComponentNameDeprecated;
    } else {
      var _options$paperCompone;
      throw new Error("Failed to find native component for either " + componentName + " or " + ((_options$paperCompone = options.paperComponentNameDeprecated) != null ? _options$paperCompone : '(unknown)'));
    }
  }
  return (0, _requireNativeComponent.default)(componentNameInUse);
}
var _default = codegenNativeComponent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb2RlZ2VuTmF0aXZlQ29tcG9uZW50IiwiY29tcG9uZW50TmFtZSIsIm9wdGlvbnMiLCJnbG9iYWwiLCJSTiRCcmlkZ2VsZXNzIiwiZXJyb3JNZXNzYWdlIiwiY29uc29sZSIsImVycm9yIiwiY29tcG9uZW50TmFtZUluVXNlIiwicGFwZXJDb21wb25lbnROYW1lIiwicGFwZXJDb21wb25lbnROYW1lRGVwcmVjYXRlZCIsIlVJTWFuYWdlciIsImhhc1ZpZXdNYW5hZ2VyQ29uZmlnIiwiRXJyb3IiLCJyZXF1aXJlTmF0aXZlQ29tcG9uZW50Il0sInNvdXJjZXMiOlsiY29kZWdlbk5hdGl2ZUNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuLy8gVE9ETzogbW92ZSB0aGlzIGZpbGUgdG8gc2hpbXMvUmVhY3ROYXRpdmUgKHJlcXVpcmVzIFJlYWN0IHVwZGF0ZSBhbmQgc3luYylcblxuaW1wb3J0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQgZnJvbSAnLi4vLi4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL3JlcXVpcmVOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uLy4uL0xpYnJhcmllcy9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcbmltcG9ydCBVSU1hbmFnZXIgZnJvbSAnLi4vUmVhY3ROYXRpdmUvVUlNYW5hZ2VyJztcblxuLy8gVE9ETzogaW1wb3J0IGZyb20gQ29kZWdlblNjaGVtYSBvbmNlIHdvcmtzcGFjZXMgYXJlIGVuYWJsZWRcbnR5cGUgT3B0aW9ucyA9ICRSZWFkT25seTx7fFxuICBpbnRlcmZhY2VPbmx5PzogYm9vbGVhbixcbiAgcGFwZXJDb21wb25lbnROYW1lPzogc3RyaW5nLFxuICBwYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkPzogc3RyaW5nLFxuICBleGNsdWRlZFBsYXRmb3Jtcz86ICRSZWFkT25seUFycmF5PCdpT1MnIHwgJ2FuZHJvaWQnPixcbnx9PjtcblxuZXhwb3J0IHR5cGUgTmF0aXZlQ29tcG9uZW50VHlwZTxUPiA9IEhvc3RDb21wb25lbnQ8VD47XG5cbi8vIElmIHRoaXMgZnVuY3Rpb24gcnVucyB0aGVuIHRoYXQgbWVhbnMgdGhlIHZpZXcgY29uZmlncyB3ZXJlIG5vdFxuLy8gZ2VuZXJhdGVkIGF0IGJ1aWxkIHRpbWUgdXNpbmcgYEdlbmVyYXRlVmlld0NvbmZpZ0pzLmpzYC4gVGh1c1xuLy8gd2UgbmVlZCB0byBgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudGAgdG8gZ2V0IHRoZSB2aWV3IGNvbmZpZ3MgZnJvbSB2aWV3IG1hbmFnZXJzLlxuLy8gYHJlcXVpcmVOYXRpdmVDb21wb25lbnRgIGlzIG5vdCBhdmFpbGFibGUgaW4gQnJpZGdlbGVzcyBtb2RlLlxuLy8gZS5nLiBUaGlzIGZ1bmN0aW9uIHJ1bnMgYXQgcnVudGltZSBpZiBgY29kZWdlbk5hdGl2ZUNvbXBvbmVudGAgd2FzIG5vdCBjYWxsZWRcbi8vIGZyb20gYSBmaWxlIHN1ZmZpeGVkIHdpdGggTmF0aXZlQ29tcG9uZW50LmpzLlxuZnVuY3Rpb24gY29kZWdlbk5hdGl2ZUNvbXBvbmVudDxQcm9wcz4oXG4gIGNvbXBvbmVudE5hbWU6IHN0cmluZyxcbiAgb3B0aW9ucz86IE9wdGlvbnMsXG4pOiBOYXRpdmVDb21wb25lbnRUeXBlPFByb3BzPiB7XG4gIGlmIChnbG9iYWwuUk4kQnJpZGdlbGVzcyA9PT0gdHJ1ZSkge1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9XG4gICAgICBcIk5hdGl2ZSBDb21wb25lbnQgJ1wiICtcbiAgICAgIGNvbXBvbmVudE5hbWUgK1xuICAgICAgXCInIHRoYXQgY2FsbHMgY29kZWdlbk5hdGl2ZUNvbXBvbmVudCB3YXMgbm90IGNvZGUgZ2VuZXJhdGVkIGF0IGJ1aWxkIHRpbWUuIFBsZWFzZSBjaGVjayBpdHMgZGVmaW5pdGlvbi5cIjtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yTWVzc2FnZSk7XG4gIH1cblxuICBsZXQgY29tcG9uZW50TmFtZUluVXNlID1cbiAgICBvcHRpb25zICYmIG9wdGlvbnMucGFwZXJDb21wb25lbnROYW1lICE9IG51bGxcbiAgICAgID8gb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVcbiAgICAgIDogY29tcG9uZW50TmFtZTtcblxuICBpZiAob3B0aW9ucyAhPSBudWxsICYmIG9wdGlvbnMucGFwZXJDb21wb25lbnROYW1lRGVwcmVjYXRlZCAhPSBudWxsKSB7XG4gICAgaWYgKFVJTWFuYWdlci5oYXNWaWV3TWFuYWdlckNvbmZpZyhjb21wb25lbnROYW1lKSkge1xuICAgICAgY29tcG9uZW50TmFtZUluVXNlID0gY29tcG9uZW50TmFtZTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkICE9IG51bGwgJiZcbiAgICAgIFVJTWFuYWdlci5oYXNWaWV3TWFuYWdlckNvbmZpZyhvcHRpb25zLnBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQpXG4gICAgKSB7XG4gICAgICBjb21wb25lbnROYW1lSW5Vc2UgPSBvcHRpb25zLnBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBmaW5kIG5hdGl2ZSBjb21wb25lbnQgZm9yIGVpdGhlciAke2NvbXBvbmVudE5hbWV9IG9yICR7XG4gICAgICAgICAgb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkID8/ICcodW5rbm93biknXG4gICAgICAgIH1gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKHJlcXVpcmVOYXRpdmVDb21wb25lbnQ8UHJvcHM+KFxuICAgIGNvbXBvbmVudE5hbWVJblVzZSxcbiAgKTogSG9zdENvbXBvbmVudDxQcm9wcz4pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb2RlZ2VuTmF0aXZlQ29tcG9uZW50O1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQVlBO0FBRUE7QUFrQkEsU0FBU0Esc0JBQXNCLENBQzdCQyxhQUFxQixFQUNyQkMsT0FBaUIsRUFDVztFQUM1QixJQUFJQyxNQUFNLENBQUNDLGFBQWEsS0FBSyxJQUFJLEVBQUU7SUFDakMsSUFBTUMsWUFBWSxHQUNoQixvQkFBb0IsR0FDcEJKLGFBQWEsR0FDYix3R0FBd0c7SUFDMUdLLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDRixZQUFZLENBQUM7RUFDN0I7RUFFQSxJQUFJRyxrQkFBa0IsR0FDcEJOLE9BQU8sSUFBSUEsT0FBTyxDQUFDTyxrQkFBa0IsSUFBSSxJQUFJLEdBQ3pDUCxPQUFPLENBQUNPLGtCQUFrQixHQUMxQlIsYUFBYTtFQUVuQixJQUFJQyxPQUFPLElBQUksSUFBSSxJQUFJQSxPQUFPLENBQUNRLDRCQUE0QixJQUFJLElBQUksRUFBRTtJQUNuRSxJQUFJQyxrQkFBUyxDQUFDQyxvQkFBb0IsQ0FBQ1gsYUFBYSxDQUFDLEVBQUU7TUFDakRPLGtCQUFrQixHQUFHUCxhQUFhO0lBQ3BDLENBQUMsTUFBTSxJQUNMQyxPQUFPLENBQUNRLDRCQUE0QixJQUFJLElBQUksSUFDNUNDLGtCQUFTLENBQUNDLG9CQUFvQixDQUFDVixPQUFPLENBQUNRLDRCQUE0QixDQUFDLEVBQ3BFO01BQ0FGLGtCQUFrQixHQUFHTixPQUFPLENBQUNRLDRCQUE0QjtJQUMzRCxDQUFDLE1BQU07TUFBQTtNQUNMLE1BQU0sSUFBSUcsS0FBSyxpREFDaUNaLGFBQWEsc0NBQ3pEQyxPQUFPLENBQUNRLDRCQUE0QixvQ0FBSSxXQUFXLEVBRXREO0lBQ0g7RUFDRjtFQUVBLE9BQVEsSUFBQUksK0JBQXNCLEVBQzVCTixrQkFBa0IsQ0FDbkI7QUFDSDtBQUFDLGVBRWNSLHNCQUFzQjtBQUFBIn0=