{"version":3,"names":["NativeEventEmitter","nativeModule","Platform","OS","invariant","hasAddListener","addListener","hasRemoveListeners","removeListeners","_nativeModule","console","warn","eventType","listener","context","subscription","RCTDeviceEventEmitter","remove","args","emit","listenerCount","removeAllListeners"],"sources":["NativeEventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {\n  EventSubscription,\n  IEventEmitter,\n} from '../vendor/emitter/EventEmitter';\nimport Platform from '../Utilities/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'invariant';\n\ninterface NativeModule {\n  addListener(eventType: string): void;\n  removeListeners(count: number): void;\n}\n\nexport type {EventSubscription};\n\n/**\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\n * will be notified (via `addListener` and `removeListeners`) when the listener\n * count changes to manage \"native memory\".\n *\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\n * This means event names must be globally unique, and it means that call sites\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\n */\nexport default class NativeEventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap>\n{\n  _nativeModule: ?NativeModule;\n\n  constructor(nativeModule: ?NativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(\n        nativeModule != null,\n        '`new NativeEventEmitter()` requires a non-null argument.',\n      );\n    }\n\n    const hasAddListener =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      !!nativeModule && typeof nativeModule.addListener === 'function';\n    const hasRemoveListeners =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      !!nativeModule && typeof nativeModule.removeListeners === 'function';\n\n    if (nativeModule && hasAddListener && hasRemoveListeners) {\n      this._nativeModule = nativeModule;\n    } else if (nativeModule != null) {\n      if (!hasAddListener) {\n        console.warn(\n          '`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.',\n        );\n      }\n      if (!hasRemoveListeners) {\n        console.warn(\n          '`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.',\n        );\n      }\n    }\n  }\n\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context?: mixed,\n  ): EventSubscription {\n    this._nativeModule?.addListener(eventType);\n    let subscription: ?EventSubscription = RCTDeviceEventEmitter.addListener(\n      eventType,\n      listener,\n      context,\n    );\n\n    return {\n      remove: () => {\n        if (subscription != null) {\n          this._nativeModule?.removeListeners(1);\n          // $FlowFixMe[incompatible-use]\n          subscription.remove();\n          subscription = null;\n        }\n      },\n    };\n  }\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void {\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\n    // included for completeness.\n    RCTDeviceEventEmitter.emit(eventType, ...args);\n  }\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    invariant(\n      eventType != null,\n      '`NativeEventEmitter.removeAllListener()` requires a non-null argument.',\n    );\n    this._nativeModule?.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  }\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  }\n}\n"],"mappings":"AAUA,YAAY;;AAAC;AAAA;EAAA;AAAA;AAAA;AAAA;AAAA;AAMb;AACA;AACA;AAAkC,IAmBbA,kBAAkB;EAKrC,4BAAYC,YAA2B,EAAE;IAAA;IACvC,IAAIC,iBAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;MACzB,IAAAC,kBAAS,EACPH,YAAY,IAAI,IAAI,EACpB,0DAA0D,CAC3D;IACH;IAEA,IAAMI,cAAc,GAElB,CAAC,CAACJ,YAAY,IAAI,OAAOA,YAAY,CAACK,WAAW,KAAK,UAAU;IAClE,IAAMC,kBAAkB,GAEtB,CAAC,CAACN,YAAY,IAAI,OAAOA,YAAY,CAACO,eAAe,KAAK,UAAU;IAEtE,IAAIP,YAAY,IAAII,cAAc,IAAIE,kBAAkB,EAAE;MACxD,IAAI,CAACE,aAAa,GAAGR,YAAY;IACnC,CAAC,MAAM,IAAIA,YAAY,IAAI,IAAI,EAAE;MAC/B,IAAI,CAACI,cAAc,EAAE;QACnBK,OAAO,CAACC,IAAI,CACV,2GAA2G,CAC5G;MACH;MACA,IAAI,CAACJ,kBAAkB,EAAE;QACvBG,OAAO,CAACC,IAAI,CACV,+GAA+G,CAChH;MACH;IACF;EACF;EAAC;IAAA;IAAA,OAED,qBACEC,SAAiB,EACjBC,QAAmE,EACnEC,OAAe,EACI;MAAA;QAAA;MACnB,2BAAI,CAACL,aAAa,qBAAlB,oBAAoBH,WAAW,CAACM,SAAS,CAAC;MAC1C,IAAIG,YAAgC,GAAGC,8BAAqB,CAACV,WAAW,CACtEM,SAAS,EACTC,QAAQ,EACRC,OAAO,CACR;MAED,OAAO;QACLG,MAAM,EAAE,kBAAM;UACZ,IAAIF,YAAY,IAAI,IAAI,EAAE;YAAA;YACxB,6BAAI,CAACN,aAAa,qBAAlB,qBAAoBD,eAAe,CAAC,CAAC,CAAC;YAEtCO,YAAY,CAACE,MAAM,EAAE;YACrBF,YAAY,GAAG,IAAI;UACrB;QACF;MACF,CAAC;IACH;EAAC;IAAA;IAAA,OAED,cACEH,SAAiB,EAEX;MAAA,kCADHM,IAAI;QAAJA,IAAI;MAAA;MAIPF,8BAAqB,CAACG,IAAI,OAA1BH,8BAAqB,GAAMJ,SAAS,SAAKM,IAAI,EAAC;IAChD;EAAC;IAAA;IAAA,OAED,4BACEN,SAAmB,EACb;MAAA;MACN,IAAAR,kBAAS,EACPQ,SAAS,IAAI,IAAI,EACjB,wEAAwE,CACzE;MACD,4BAAI,CAACH,aAAa,qBAAlB,qBAAoBD,eAAe,CAAC,IAAI,CAACY,aAAa,CAACR,SAAS,CAAC,CAAC;MAClEI,8BAAqB,CAACK,kBAAkB,CAACT,SAAS,CAAC;IACrD;EAAC;IAAA;IAAA,OAED,uBAA8CA,SAAiB,EAAU;MACvE,OAAOI,8BAAqB,CAACI,aAAa,CAACR,SAAS,CAAC;IACvD;EAAC;EAAA;AAAA;AAAA"}