d2cb51bbd7ab3e533d7a6a8c9c6f6dbd
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var _RCTDeviceEventEmitter = _interopRequireDefault(require("./RCTDeviceEventEmitter"));
var _invariant = _interopRequireDefault(require("invariant"));
var NativeEventEmitter = function () {
  function NativeEventEmitter(nativeModule) {
    (0, _classCallCheck2.default)(this, NativeEventEmitter);
    if (_Platform.default.OS === 'ios') {
      (0, _invariant.default)(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');
    }
    var hasAddListener = !!nativeModule && typeof nativeModule.addListener === 'function';
    var hasRemoveListeners = !!nativeModule && typeof nativeModule.removeListeners === 'function';
    if (nativeModule && hasAddListener && hasRemoveListeners) {
      this._nativeModule = nativeModule;
    } else if (nativeModule != null) {
      if (!hasAddListener) {
        console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.');
      }
      if (!hasRemoveListeners) {
        console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.');
      }
    }
  }
  (0, _createClass2.default)(NativeEventEmitter, [{
    key: "addListener",
    value: function addListener(eventType, listener, context) {
      var _this$_nativeModule,
        _this = this;
      (_this$_nativeModule = this._nativeModule) == null ? void 0 : _this$_nativeModule.addListener(eventType);
      var subscription = _RCTDeviceEventEmitter.default.addListener(eventType, listener, context);
      return {
        remove: function remove() {
          if (subscription != null) {
            var _this$_nativeModule2;
            (_this$_nativeModule2 = _this._nativeModule) == null ? void 0 : _this$_nativeModule2.removeListeners(1);
            subscription.remove();
            subscription = null;
          }
        }
      };
    }
  }, {
    key: "emit",
    value: function emit(eventType) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      _RCTDeviceEventEmitter.default.emit.apply(_RCTDeviceEventEmitter.default, [eventType].concat(args));
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners(eventType) {
      var _this$_nativeModule3;
      (0, _invariant.default)(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');
      (_this$_nativeModule3 = this._nativeModule) == null ? void 0 : _this$_nativeModule3.removeListeners(this.listenerCount(eventType));
      _RCTDeviceEventEmitter.default.removeAllListeners(eventType);
    }
  }, {
    key: "listenerCount",
    value: function listenerCount(eventType) {
      return _RCTDeviceEventEmitter.default.listenerCount(eventType);
    }
  }]);
  return NativeEventEmitter;
}();
exports.default = NativeEventEmitter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOYXRpdmVFdmVudEVtaXR0ZXIiLCJuYXRpdmVNb2R1bGUiLCJQbGF0Zm9ybSIsIk9TIiwiaW52YXJpYW50IiwiaGFzQWRkTGlzdGVuZXIiLCJhZGRMaXN0ZW5lciIsImhhc1JlbW92ZUxpc3RlbmVycyIsInJlbW92ZUxpc3RlbmVycyIsIl9uYXRpdmVNb2R1bGUiLCJjb25zb2xlIiwid2FybiIsImV2ZW50VHlwZSIsImxpc3RlbmVyIiwiY29udGV4dCIsInN1YnNjcmlwdGlvbiIsIlJDVERldmljZUV2ZW50RW1pdHRlciIsInJlbW92ZSIsImFyZ3MiLCJlbWl0IiwibGlzdGVuZXJDb3VudCIsInJlbW92ZUFsbExpc3RlbmVycyJdLCJzb3VyY2VzIjpbIk5hdGl2ZUV2ZW50RW1pdHRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7XG4gIEV2ZW50U3Vic2NyaXB0aW9uLFxuICBJRXZlbnRFbWl0dGVyLFxufSBmcm9tICcuLi92ZW5kb3IvZW1pdHRlci9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5pbXBvcnQgUkNURGV2aWNlRXZlbnRFbWl0dGVyIGZyb20gJy4vUkNURGV2aWNlRXZlbnRFbWl0dGVyJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxuaW50ZXJmYWNlIE5hdGl2ZU1vZHVsZSB7XG4gIGFkZExpc3RlbmVyKGV2ZW50VHlwZTogc3RyaW5nKTogdm9pZDtcbiAgcmVtb3ZlTGlzdGVuZXJzKGNvdW50OiBudW1iZXIpOiB2b2lkO1xufVxuXG5leHBvcnQgdHlwZSB7RXZlbnRTdWJzY3JpcHRpb259O1xuXG4vKipcbiAqIGBOYXRpdmVFdmVudEVtaXR0ZXJgIGlzIGludGVuZGVkIGZvciB1c2UgYnkgTmF0aXZlIE1vZHVsZXMgdG8gZW1pdCBldmVudHMgdG9cbiAqIEphdmFTY3JpcHQgbGlzdGVuZXJzLiBJZiBhIGBOYXRpdmVNb2R1bGVgIGlzIHN1cHBsaWVkIHRvIHRoZSBjb25zdHJ1Y3RvciwgaXRcbiAqIHdpbGwgYmUgbm90aWZpZWQgKHZpYSBgYWRkTGlzdGVuZXJgIGFuZCBgcmVtb3ZlTGlzdGVuZXJzYCkgd2hlbiB0aGUgbGlzdGVuZXJcbiAqIGNvdW50IGNoYW5nZXMgdG8gbWFuYWdlIFwibmF0aXZlIG1lbW9yeVwiLlxuICpcbiAqIEN1cnJlbnRseSwgYWxsIG5hdGl2ZSBldmVudHMgYXJlIGZpcmVkIHZpYSBhIGdsb2JhbCBgUkNURGV2aWNlRXZlbnRFbWl0dGVyYC5cbiAqIFRoaXMgbWVhbnMgZXZlbnQgbmFtZXMgbXVzdCBiZSBnbG9iYWxseSB1bmlxdWUsIGFuZCBpdCBtZWFucyB0aGF0IGNhbGwgc2l0ZXNcbiAqIGNhbiB0aGVvcmV0aWNhbGx5IGxpc3RlbiB0byBgUkNURGV2aWNlRXZlbnRFbWl0dGVyYCAoYWx0aG91Z2ggZGlzY291cmFnZWQpLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOYXRpdmVFdmVudEVtaXR0ZXI8VEV2ZW50VG9BcmdzTWFwOiB7Li4ufT5cbiAgaW1wbGVtZW50cyBJRXZlbnRFbWl0dGVyPFRFdmVudFRvQXJnc01hcD5cbntcbiAgX25hdGl2ZU1vZHVsZTogP05hdGl2ZU1vZHVsZTtcblxuICBjb25zdHJ1Y3RvcihuYXRpdmVNb2R1bGU6ID9OYXRpdmVNb2R1bGUpIHtcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIG5hdGl2ZU1vZHVsZSAhPSBudWxsLFxuICAgICAgICAnYG5ldyBOYXRpdmVFdmVudEVtaXR0ZXIoKWAgcmVxdWlyZXMgYSBub24tbnVsbCBhcmd1bWVudC4nLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBoYXNBZGRMaXN0ZW5lciA9XG4gICAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3IgdGhpcyBwYXJhbWV0ZXJzXG4gICAgICAhIW5hdGl2ZU1vZHVsZSAmJiB0eXBlb2YgbmF0aXZlTW9kdWxlLmFkZExpc3RlbmVyID09PSAnZnVuY3Rpb24nO1xuICAgIGNvbnN0IGhhc1JlbW92ZUxpc3RlbmVycyA9XG4gICAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3IgdGhpcyBwYXJhbWV0ZXJzXG4gICAgICAhIW5hdGl2ZU1vZHVsZSAmJiB0eXBlb2YgbmF0aXZlTW9kdWxlLnJlbW92ZUxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJztcblxuICAgIGlmIChuYXRpdmVNb2R1bGUgJiYgaGFzQWRkTGlzdGVuZXIgJiYgaGFzUmVtb3ZlTGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9uYXRpdmVNb2R1bGUgPSBuYXRpdmVNb2R1bGU7XG4gICAgfSBlbHNlIGlmIChuYXRpdmVNb2R1bGUgIT0gbnVsbCkge1xuICAgICAgaWYgKCFoYXNBZGRMaXN0ZW5lcikge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ2BuZXcgTmF0aXZlRXZlbnRFbWl0dGVyKClgIHdhcyBjYWxsZWQgd2l0aCBhIG5vbi1udWxsIGFyZ3VtZW50IHdpdGhvdXQgdGhlIHJlcXVpcmVkIGBhZGRMaXN0ZW5lcmAgbWV0aG9kLicsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoIWhhc1JlbW92ZUxpc3RlbmVycykge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ2BuZXcgTmF0aXZlRXZlbnRFbWl0dGVyKClgIHdhcyBjYWxsZWQgd2l0aCBhIG5vbi1udWxsIGFyZ3VtZW50IHdpdGhvdXQgdGhlIHJlcXVpcmVkIGByZW1vdmVMaXN0ZW5lcnNgIG1ldGhvZC4nLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGFkZExpc3RlbmVyPFRFdmVudDogJEtleXM8VEV2ZW50VG9BcmdzTWFwPj4oXG4gICAgZXZlbnRUeXBlOiBURXZlbnQsXG4gICAgbGlzdGVuZXI6ICguLi5hcmdzOiAkRWxlbWVudFR5cGU8VEV2ZW50VG9BcmdzTWFwLCBURXZlbnQ+KSA9PiBtaXhlZCxcbiAgICBjb250ZXh0PzogbWl4ZWQsXG4gICk6IEV2ZW50U3Vic2NyaXB0aW9uIHtcbiAgICB0aGlzLl9uYXRpdmVNb2R1bGU/LmFkZExpc3RlbmVyKGV2ZW50VHlwZSk7XG4gICAgbGV0IHN1YnNjcmlwdGlvbjogP0V2ZW50U3Vic2NyaXB0aW9uID0gUkNURGV2aWNlRXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKFxuICAgICAgZXZlbnRUeXBlLFxuICAgICAgbGlzdGVuZXIsXG4gICAgICBjb250ZXh0LFxuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVtb3ZlOiAoKSA9PiB7XG4gICAgICAgIGlmIChzdWJzY3JpcHRpb24gIT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuX25hdGl2ZU1vZHVsZT8ucmVtb3ZlTGlzdGVuZXJzKDEpO1xuICAgICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgICAgICBzdWJzY3JpcHRpb24ucmVtb3ZlKCk7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgZW1pdDxURXZlbnQ6ICRLZXlzPFRFdmVudFRvQXJnc01hcD4+KFxuICAgIGV2ZW50VHlwZTogVEV2ZW50LFxuICAgIC4uLmFyZ3M6ICRFbGVtZW50VHlwZTxURXZlbnRUb0FyZ3NNYXAsIFRFdmVudD5cbiAgKTogdm9pZCB7XG4gICAgLy8gR2VuZXJhbGx5LCBgUkNURGV2aWNlRXZlbnRFbWl0dGVyYCBpcyBkaXJlY3RseSBpbnZva2VkLiBCdXQgdGhpcyBpc1xuICAgIC8vIGluY2x1ZGVkIGZvciBjb21wbGV0ZW5lc3MuXG4gICAgUkNURGV2aWNlRXZlbnRFbWl0dGVyLmVtaXQoZXZlbnRUeXBlLCAuLi5hcmdzKTtcbiAgfVxuXG4gIHJlbW92ZUFsbExpc3RlbmVyczxURXZlbnQ6ICRLZXlzPFRFdmVudFRvQXJnc01hcD4+KFxuICAgIGV2ZW50VHlwZT86ID9URXZlbnQsXG4gICk6IHZvaWQge1xuICAgIGludmFyaWFudChcbiAgICAgIGV2ZW50VHlwZSAhPSBudWxsLFxuICAgICAgJ2BOYXRpdmVFdmVudEVtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXIoKWAgcmVxdWlyZXMgYSBub24tbnVsbCBhcmd1bWVudC4nLFxuICAgICk7XG4gICAgdGhpcy5fbmF0aXZlTW9kdWxlPy5yZW1vdmVMaXN0ZW5lcnModGhpcy5saXN0ZW5lckNvdW50KGV2ZW50VHlwZSkpO1xuICAgIFJDVERldmljZUV2ZW50RW1pdHRlci5yZW1vdmVBbGxMaXN0ZW5lcnMoZXZlbnRUeXBlKTtcbiAgfVxuXG4gIGxpc3RlbmVyQ291bnQ8VEV2ZW50OiAkS2V5czxURXZlbnRUb0FyZ3NNYXA+PihldmVudFR5cGU6IFRFdmVudCk6IG51bWJlciB7XG4gICAgcmV0dXJuIFJDVERldmljZUV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50KGV2ZW50VHlwZSk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQztBQUFBO0VBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1iO0FBQ0E7QUFDQTtBQUFrQyxJQW1CYkEsa0JBQWtCO0VBS3JDLDRCQUFZQyxZQUEyQixFQUFFO0lBQUE7SUFDdkMsSUFBSUMsaUJBQVEsQ0FBQ0MsRUFBRSxLQUFLLEtBQUssRUFBRTtNQUN6QixJQUFBQyxrQkFBUyxFQUNQSCxZQUFZLElBQUksSUFBSSxFQUNwQiwwREFBMEQsQ0FDM0Q7SUFDSDtJQUVBLElBQU1JLGNBQWMsR0FFbEIsQ0FBQyxDQUFDSixZQUFZLElBQUksT0FBT0EsWUFBWSxDQUFDSyxXQUFXLEtBQUssVUFBVTtJQUNsRSxJQUFNQyxrQkFBa0IsR0FFdEIsQ0FBQyxDQUFDTixZQUFZLElBQUksT0FBT0EsWUFBWSxDQUFDTyxlQUFlLEtBQUssVUFBVTtJQUV0RSxJQUFJUCxZQUFZLElBQUlJLGNBQWMsSUFBSUUsa0JBQWtCLEVBQUU7TUFDeEQsSUFBSSxDQUFDRSxhQUFhLEdBQUdSLFlBQVk7SUFDbkMsQ0FBQyxNQUFNLElBQUlBLFlBQVksSUFBSSxJQUFJLEVBQUU7TUFDL0IsSUFBSSxDQUFDSSxjQUFjLEVBQUU7UUFDbkJLLE9BQU8sQ0FBQ0MsSUFBSSxDQUNWLDJHQUEyRyxDQUM1RztNQUNIO01BQ0EsSUFBSSxDQUFDSixrQkFBa0IsRUFBRTtRQUN2QkcsT0FBTyxDQUFDQyxJQUFJLENBQ1YsK0dBQStHLENBQ2hIO01BQ0g7SUFDRjtFQUNGO0VBQUM7SUFBQTtJQUFBLE9BRUQscUJBQ0VDLFNBQWlCLEVBQ2pCQyxRQUFtRSxFQUNuRUMsT0FBZSxFQUNJO01BQUE7UUFBQTtNQUNuQiwyQkFBSSxDQUFDTCxhQUFhLHFCQUFsQixvQkFBb0JILFdBQVcsQ0FBQ00sU0FBUyxDQUFDO01BQzFDLElBQUlHLFlBQWdDLEdBQUdDLDhCQUFxQixDQUFDVixXQUFXLENBQ3RFTSxTQUFTLEVBQ1RDLFFBQVEsRUFDUkMsT0FBTyxDQUNSO01BRUQsT0FBTztRQUNMRyxNQUFNLEVBQUUsa0JBQU07VUFDWixJQUFJRixZQUFZLElBQUksSUFBSSxFQUFFO1lBQUE7WUFDeEIsNkJBQUksQ0FBQ04sYUFBYSxxQkFBbEIscUJBQW9CRCxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBRXRDTyxZQUFZLENBQUNFLE1BQU0sRUFBRTtZQUNyQkYsWUFBWSxHQUFHLElBQUk7VUFDckI7UUFDRjtNQUNGLENBQUM7SUFDSDtFQUFDO0lBQUE7SUFBQSxPQUVELGNBQ0VILFNBQWlCLEVBRVg7TUFBQSxrQ0FESE0sSUFBSTtRQUFKQSxJQUFJO01BQUE7TUFJUEYsOEJBQXFCLENBQUNHLElBQUksT0FBMUJILDhCQUFxQixHQUFNSixTQUFTLFNBQUtNLElBQUksRUFBQztJQUNoRDtFQUFDO0lBQUE7SUFBQSxPQUVELDRCQUNFTixTQUFtQixFQUNiO01BQUE7TUFDTixJQUFBUixrQkFBUyxFQUNQUSxTQUFTLElBQUksSUFBSSxFQUNqQix3RUFBd0UsQ0FDekU7TUFDRCw0QkFBSSxDQUFDSCxhQUFhLHFCQUFsQixxQkFBb0JELGVBQWUsQ0FBQyxJQUFJLENBQUNZLGFBQWEsQ0FBQ1IsU0FBUyxDQUFDLENBQUM7TUFDbEVJLDhCQUFxQixDQUFDSyxrQkFBa0IsQ0FBQ1QsU0FBUyxDQUFDO0lBQ3JEO0VBQUM7SUFBQTtJQUFBLE9BRUQsdUJBQThDQSxTQUFpQixFQUFVO01BQ3ZFLE9BQU9JLDhCQUFxQixDQUFDSSxhQUFhLENBQUNSLFNBQVMsQ0FBQztJQUN2RDtFQUFDO0VBQUE7QUFBQTtBQUFBIn0=