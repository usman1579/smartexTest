5784a722fba4ca22c8aebf2df7e919b2
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.widthPercentageToDP = exports.removeOrientationListener = exports.listenOrientationChange = exports.heightPercentageToDP = void 0;
var _reactNative = require("react-native");
var screenWidth = _reactNative.Dimensions.get('window').width;
var screenHeight = _reactNative.Dimensions.get('window').height;
var widthPercentageToDP = function widthPercentageToDP(widthPercent) {
  var elemWidth = typeof widthPercent === "number" ? widthPercent : parseFloat(widthPercent);
  return _reactNative.PixelRatio.roundToNearestPixel(screenWidth * elemWidth / 100);
};
exports.widthPercentageToDP = widthPercentageToDP;
var heightPercentageToDP = function heightPercentageToDP(heightPercent) {
  var elemHeight = typeof heightPercent === "number" ? heightPercent : parseFloat(heightPercent);
  return _reactNative.PixelRatio.roundToNearestPixel(screenHeight * elemHeight / 100);
};
exports.heightPercentageToDP = heightPercentageToDP;
var listenOrientationChange = function listenOrientationChange(that) {
  _reactNative.Dimensions.addEventListener('change', function (newDimensions) {
    screenWidth = newDimensions.window.width;
    screenHeight = newDimensions.window.height;
    that.setState({
      orientation: screenWidth < screenHeight ? 'portrait' : 'landscape'
    });
  });
};
exports.listenOrientationChange = listenOrientationChange;
var removeOrientationListener = function removeOrientationListener() {
  _reactNative.Dimensions.removeEventListener('change', function () {});
};
exports.removeOrientationListener = removeOrientationListener;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzY3JlZW5XaWR0aCIsIkRpbWVuc2lvbnMiLCJnZXQiLCJ3aWR0aCIsInNjcmVlbkhlaWdodCIsImhlaWdodCIsIndpZHRoUGVyY2VudGFnZVRvRFAiLCJ3aWR0aFBlcmNlbnQiLCJlbGVtV2lkdGgiLCJwYXJzZUZsb2F0IiwiUGl4ZWxSYXRpbyIsInJvdW5kVG9OZWFyZXN0UGl4ZWwiLCJoZWlnaHRQZXJjZW50YWdlVG9EUCIsImhlaWdodFBlcmNlbnQiLCJlbGVtSGVpZ2h0IiwibGlzdGVuT3JpZW50YXRpb25DaGFuZ2UiLCJ0aGF0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm5ld0RpbWVuc2lvbnMiLCJ3aW5kb3ciLCJzZXRTdGF0ZSIsIm9yaWVudGF0aW9uIiwicmVtb3ZlT3JpZW50YXRpb25MaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBwYWNrYWdlc1xuaW1wb3J0IHsgRGltZW5zaW9ucywgUGl4ZWxSYXRpbyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbi8vIFJldHJpZXZlIGluaXRpYWwgc2NyZWVuJ3Mgd2lkdGhcbmxldCBzY3JlZW5XaWR0aCA9IERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKS53aWR0aDtcblxuLy8gUmV0cmlldmUgaW5pdGlhbCBzY3JlZW4ncyBoZWlnaHRcbmxldCBzY3JlZW5IZWlnaHQgPSBEaW1lbnNpb25zLmdldCgnd2luZG93JykuaGVpZ2h0O1xuXG4vKipcbiAqIENvbnZlcnRzIHByb3ZpZGVkIHdpZHRoIHBlcmNlbnRhZ2UgdG8gaW5kZXBlbmRlbnQgcGl4ZWwgKGRwKS5cbiAqIEBwYXJhbSAge3N0cmluZ30gd2lkdGhQZXJjZW50IFRoZSBwZXJjZW50YWdlIG9mIHNjcmVlbidzIHdpZHRoIHRoYXQgVUkgZWxlbWVudCBzaG91bGQgY292ZXJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsb25nIHdpdGggdGhlIHBlcmNlbnRhZ2Ugc3ltYm9sICglKS5cbiAqIEByZXR1cm4ge251bWJlcn0gICAgICAgICAgICAgIFRoZSBjYWxjdWxhdGVkIGRwIGRlcGVuZGluZyBvbiBjdXJyZW50IGRldmljZSdzIHNjcmVlbiB3aWR0aC5cbiAqL1xuY29uc3Qgd2lkdGhQZXJjZW50YWdlVG9EUCA9IHdpZHRoUGVyY2VudCA9PiB7XG4gIC8vIFBhcnNlIHN0cmluZyBwZXJjZW50YWdlIGlucHV0IGFuZCBjb252ZXJ0IGl0IHRvIG51bWJlci5cbiAgY29uc3QgZWxlbVdpZHRoID0gdHlwZW9mIHdpZHRoUGVyY2VudCA9PT0gXCJudW1iZXJcIiA/IHdpZHRoUGVyY2VudCA6IHBhcnNlRmxvYXQod2lkdGhQZXJjZW50KTtcblxuICAvLyBVc2UgUGl4ZWxSYXRpby5yb3VuZFRvTmVhcmVzdFBpeGVsIG1ldGhvZCBpbiBvcmRlciB0byByb3VuZCB0aGUgbGF5b3V0XG4gIC8vIHNpemUgKGRwKSB0byB0aGUgbmVhcmVzdCBvbmUgdGhhdCBjb3JyZXNwb25zIHRvIGFuIGludGVnZXIgbnVtYmVyIG9mIHBpeGVscy5cbiAgcmV0dXJuIFBpeGVsUmF0aW8ucm91bmRUb05lYXJlc3RQaXhlbChzY3JlZW5XaWR0aCAqIGVsZW1XaWR0aCAvIDEwMCk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHByb3ZpZGVkIGhlaWdodCBwZXJjZW50YWdlIHRvIGluZGVwZW5kZW50IHBpeGVsIChkcCkuXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGhlaWdodFBlcmNlbnQgVGhlIHBlcmNlbnRhZ2Ugb2Ygc2NyZWVuJ3MgaGVpZ2h0IHRoYXQgVUkgZWxlbWVudCBzaG91bGQgY292ZXJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbG9uZyB3aXRoIHRoZSBwZXJjZW50YWdlIHN5bWJvbCAoJSkuXG4gKiBAcmV0dXJuIHtudW1iZXJ9ICAgICAgICAgICAgICAgVGhlIGNhbGN1bGF0ZWQgZHAgZGVwZW5kaW5nIG9uIGN1cnJlbnQgZGV2aWNlJ3Mgc2NyZWVuIGhlaWdodC5cbiAqL1xuY29uc3QgaGVpZ2h0UGVyY2VudGFnZVRvRFAgPSBoZWlnaHRQZXJjZW50ID0+IHtcbiAgLy8gUGFyc2Ugc3RyaW5nIHBlcmNlbnRhZ2UgaW5wdXQgYW5kIGNvbnZlcnQgaXQgdG8gbnVtYmVyLlxuICBjb25zdCBlbGVtSGVpZ2h0ID0gdHlwZW9mIGhlaWdodFBlcmNlbnQgPT09IFwibnVtYmVyXCIgPyBoZWlnaHRQZXJjZW50IDogcGFyc2VGbG9hdChoZWlnaHRQZXJjZW50KTtcblxuICAvLyBVc2UgUGl4ZWxSYXRpby5yb3VuZFRvTmVhcmVzdFBpeGVsIG1ldGhvZCBpbiBvcmRlciB0byByb3VuZCB0aGUgbGF5b3V0XG4gIC8vIHNpemUgKGRwKSB0byB0aGUgbmVhcmVzdCBvbmUgdGhhdCBjb3JyZXNwb25zIHRvIGFuIGludGVnZXIgbnVtYmVyIG9mIHBpeGVscy5cbiAgcmV0dXJuIFBpeGVsUmF0aW8ucm91bmRUb05lYXJlc3RQaXhlbChzY3JlZW5IZWlnaHQgKiBlbGVtSGVpZ2h0IC8gMTAwKTtcbn07XG5cbi8qKlxuICogRXZlbnQgbGlzdGVuZXIgZnVuY3Rpb24gdGhhdCBkZXRlY3RzIG9yaWVudGF0aW9uIGNoYW5nZSAoZXZlcnkgdGltZSBpdCBvY2N1cnMpIGFuZCB0cmlnZ2VycyBcbiAqIHNjcmVlbiByZXJlbmRlcmluZy4gSXQgZG9lcyB0aGF0LCBieSBjaGFuZ2luZyB0aGUgc3RhdGUgb2YgdGhlIHNjcmVlbiB3aGVyZSB0aGUgZnVuY3Rpb24gaXNcbiAqIGNhbGxlZC4gU3RhdGUgY2hhbmdpbmcgb2NjdXJzIGZvciBhIG5ldyBzdGF0ZSB2YXJpYWJsZSB3aXRoIHRoZSBuYW1lICdvcmllbnRhdGlvbicgdGhhdCB3aWxsXG4gKiBhbHdheXMgaG9sZCB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgb3JpZW50YXRpb24gYWZ0ZXIgdGhlIDFzdCBvcmllbnRhdGlvbiBjaGFuZ2UuXG4gKiBJbnZva2UgaXQgaW5zaWRlIHRoZSBzY3JlZW4ncyBjb25zdHJ1Y3RvciBvciBpbiBjb21wb25lbnREaWRNb3VudCBsaWZlY3ljbGUgbWV0aG9kLlxuICogQHBhcmFtIHtvYmplY3R9IHRoYXQgU2NyZWVuJ3MgY2xhc3MgY29tcG9uZW50IHRoaXMgdmFyaWFibGUuIFRoZSBmdW5jdGlvbiBuZWVkcyBpdCB0b1xuICogICAgICAgICAgICAgICAgICAgICAgaW52b2tlIHNldFN0YXRlIG1ldGhvZCBhbmQgdHJpZ2dlciBzY3JlZW4gcmVyZW5kZXIgKHRoaXMuc2V0U3RhdGUoKSkuXG4gKi9cbmNvbnN0IGxpc3Rlbk9yaWVudGF0aW9uQ2hhbmdlID0gdGhhdCA9PiB7XG4gIERpbWVuc2lvbnMuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgbmV3RGltZW5zaW9ucyA9PiB7XG4gICAgLy8gUmV0cmlldmUgYW5kIHNhdmUgbmV3IGRpbWVuc2lvbnNcbiAgICBzY3JlZW5XaWR0aCA9IG5ld0RpbWVuc2lvbnMud2luZG93LndpZHRoO1xuICAgIHNjcmVlbkhlaWdodCA9IG5ld0RpbWVuc2lvbnMud2luZG93LmhlaWdodDtcblxuICAgIC8vIFRyaWdnZXIgc2NyZWVuJ3MgcmVyZW5kZXIgd2l0aCBhIHN0YXRlIHVwZGF0ZSBvZiB0aGUgb3JpZW50YXRpb24gdmFyaWFibGVcbiAgICB0aGF0LnNldFN0YXRlKHtcbiAgICAgIG9yaWVudGF0aW9uOiBzY3JlZW5XaWR0aCA8IHNjcmVlbkhlaWdodCA/ICdwb3J0cmFpdCcgOiAnbGFuZHNjYXBlJ1xuICAgIH0pO1xuICB9KTtcbn07XG5cbi8qKlxuICogV3JhcHBlciBmdW5jdGlvbiB0aGF0IHJlbW92ZXMgb3JpZW50YXRpb24gY2hhbmdlIGxpc3RlbmVyIGFuZCBzaG91bGQgYmUgaW52b2tlZCBpblxuICogY29tcG9uZW50V2lsbFVubW91bnQgbGlmZWN5Y2xlIG1ldGhvZCBvZiBldmVyeSBjbGFzcyBjb21wb25lbnQgKFVJIHNjcmVlbikgdGhhdFxuICogbGlzdGVuT3JpZW50YXRpb25DaGFuZ2UgZnVuY3Rpb24gaGFzIGJlZW4gaW52b2tlZC4gVGhpcyBzaG91bGQgYmUgZG9uZSBpbiBvcmRlciB0b1xuICogYXZvaWQgYWRkaW5nIG5ldyBsaXN0ZW5lcnMgZXZlcnkgdGltZSB0aGUgc2FtZSBjb21wb25lbnQgaXMgcmUtbW91bnRlZC5cbiAqL1xuY29uc3QgcmVtb3ZlT3JpZW50YXRpb25MaXN0ZW5lciA9ICgpID0+IHtcbiAgRGltZW5zaW9ucy5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7fSk7XG59O1xuXG5leHBvcnQge1xuICB3aWR0aFBlcmNlbnRhZ2VUb0RQLFxuICBoZWlnaHRQZXJjZW50YWdlVG9EUCxcbiAgbGlzdGVuT3JpZW50YXRpb25DaGFuZ2UsXG4gIHJlbW92ZU9yaWVudGF0aW9uTGlzdGVuZXJcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFDQTtBQUdBLElBQUlBLFdBQVcsR0FBR0MsdUJBQVUsQ0FBQ0MsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDQyxLQUFLO0FBR2hELElBQUlDLFlBQVksR0FBR0gsdUJBQVUsQ0FBQ0MsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDRyxNQUFNO0FBUWxELElBQU1DLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBbUIsQ0FBR0MsWUFBWSxFQUFJO0VBRTFDLElBQU1DLFNBQVMsR0FBRyxPQUFPRCxZQUFZLEtBQUssUUFBUSxHQUFHQSxZQUFZLEdBQUdFLFVBQVUsQ0FBQ0YsWUFBWSxDQUFDO0VBSTVGLE9BQU9HLHVCQUFVLENBQUNDLG1CQUFtQixDQUFDWCxXQUFXLEdBQUdRLFNBQVMsR0FBRyxHQUFHLENBQUM7QUFDdEUsQ0FBQztBQUFDO0FBUUYsSUFBTUksb0JBQW9CLEdBQUcsU0FBdkJBLG9CQUFvQixDQUFHQyxhQUFhLEVBQUk7RUFFNUMsSUFBTUMsVUFBVSxHQUFHLE9BQU9ELGFBQWEsS0FBSyxRQUFRLEdBQUdBLGFBQWEsR0FBR0osVUFBVSxDQUFDSSxhQUFhLENBQUM7RUFJaEcsT0FBT0gsdUJBQVUsQ0FBQ0MsbUJBQW1CLENBQUNQLFlBQVksR0FBR1UsVUFBVSxHQUFHLEdBQUcsQ0FBQztBQUN4RSxDQUFDO0FBQUM7QUFXRixJQUFNQyx1QkFBdUIsR0FBRyxTQUExQkEsdUJBQXVCLENBQUdDLElBQUksRUFBSTtFQUN0Q2YsdUJBQVUsQ0FBQ2dCLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxVQUFBQyxhQUFhLEVBQUk7SUFFckRsQixXQUFXLEdBQUdrQixhQUFhLENBQUNDLE1BQU0sQ0FBQ2hCLEtBQUs7SUFDeENDLFlBQVksR0FBR2MsYUFBYSxDQUFDQyxNQUFNLENBQUNkLE1BQU07SUFHMUNXLElBQUksQ0FBQ0ksUUFBUSxDQUFDO01BQ1pDLFdBQVcsRUFBRXJCLFdBQVcsR0FBR0ksWUFBWSxHQUFHLFVBQVUsR0FBRztJQUN6RCxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7QUFDSixDQUFDO0FBQUM7QUFRRixJQUFNa0IseUJBQXlCLEdBQUcsU0FBNUJBLHlCQUF5QixHQUFTO0VBQ3RDckIsdUJBQVUsQ0FBQ3NCLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxZQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFBQyJ9