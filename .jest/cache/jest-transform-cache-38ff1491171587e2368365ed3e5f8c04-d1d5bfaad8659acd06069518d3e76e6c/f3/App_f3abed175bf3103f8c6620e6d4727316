cbcbf1459fd2016aa80b545e6142c8c4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _nativeStack = require("@react-navigation/native-stack");
var _Main = _interopRequireDefault(require("./src/Main"));
var _Detail = _interopRequireDefault(require("./src/Detail"));
var _Ionicons = _interopRequireDefault(require("react-native-vector-icons/dist/Ionicons"));
var _reactNativeResponsiveScreen = require("react-native-responsive-screen");
var _drawer = require("@react-navigation/drawer");
var _reactRedux = require("react-redux");
var _store = _interopRequireDefault(require("./src/redux/store"));
var _jsxRuntime = require("react/jsx-runtime");
var Stack = (0, _nativeStack.createNativeStackNavigator)();
var Drawer = (0, _drawer.createDrawerNavigator)();
var ImageURL = 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png';
function DrawerScreen() {
  return (0, _jsxRuntime.jsx)(Drawer.Navigator, {
    useLegacyImplementation: true,
    drawerContent: function drawerContent(props) {
      return (0, _jsxRuntime.jsx)(CustomDrawerContent, Object.assign({}, props));
    },
    children: (0, _jsxRuntime.jsx)(Drawer.Screen, {
      name: "MainStack",
      component: MainStack,
      options: {
        headerShown: false
      }
    })
  });
}
function MainStack() {
  return (0, _jsxRuntime.jsxs)(Stack.Navigator, {
    children: [(0, _jsxRuntime.jsx)(Stack.Screen, {
      name: "Main",
      component: _Main.default,
      options: {
        headerBackTitleVisible: false,
        headerShown: false
      }
    }), (0, _jsxRuntime.jsx)(Stack.Screen, {
      name: "Detail",
      component: _Detail.default,
      options: {
        headerBackTitleVisible: false,
        headerShown: false
      }
    })]
  });
}
function CustomDrawerContent(props) {
  return (0, _jsxRuntime.jsxs)(_drawer.DrawerContentScrollView, Object.assign({}, props, {
    children: [(0, _jsxRuntime.jsxs)(_reactNative.SafeAreaView, {
      style: styles.customDrawer,
      children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.drawerContainer,
        children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
          source: {
            uri: ImageURL
          },
          style: styles.Image,
          resizeMode: "contain"
        })
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: styles.emailCOntainer,
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          children: " usmanrafique1579@gmail.com "
        }), (0, _jsxRuntime.jsx)(_Ionicons.default, {
          name: "caret-down-outline",
          size: 20,
          color: 'grey'
        })]
      })]
    }), (0, _jsxRuntime.jsx)(_drawer.DrawerItemList, Object.assign({}, props))]
  }));
}
var App = function App() {
  return (0, _jsxRuntime.jsx)(_reactRedux.Provider, {
    store: _store.default,
    children: (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
      headerMode: "none",
      children: (0, _jsxRuntime.jsx)(DrawerScreen, {})
    })
  });
};
var _default = App;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  drawerContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    height: 50,
    width: 50,
    borderRadius: 25,
    position: 'absolute',
    top: 20,
    left: 20,
    borderWidth: 1,
    borderColor: 'black'
  },
  customDrawer: {
    height: (0, _reactNativeResponsiveScreen.heightPercentageToDP)('25%'),
    width: '100%',
    backgroundColor: 'lightgrey'
  },
  Image: {
    height: 50,
    width: 50,
    borderRadius: 25
  },
  emailCOntainer: {
    position: 'absolute',
    bottom: 10,
    flexDirection: 'row',
    marginHorizontal: 10,
    justifyContent: 'space-between',
    alignItems: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,