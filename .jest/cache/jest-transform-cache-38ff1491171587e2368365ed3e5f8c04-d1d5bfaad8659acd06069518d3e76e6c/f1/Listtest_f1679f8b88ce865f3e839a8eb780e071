58435afb77f5b93a580e8800bbab78e7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _List = require("../List");
var _reactRedux = require("react-redux");
var _redux = require("redux");
var _reducer = _interopRequireDefault(require("../../../redux/reducer"));
var _moment = _interopRequireDefault(require("moment"));
var _jsxRuntime = require("react/jsx-runtime");
var dataList = [{
  id: '1',
  title: 'Test Title',
  description: 'Test Description',
  date: new Date(),
  check: true
}, {
  id: '2',
  title: 'Test Title 2',
  description: 'Test Description 2',
  date: new Date(),
  check: false
}];
describe('List Component', function () {
  var store;
  var navigation;
  beforeEach(function () {
    store = (0, _redux.createStore)(_reducer.default);
    navigation = {
      navigate: jest.fn()
    };
    store.dispatch({
      type: 'SET_DATA_LIST',
      dataList: dataList
    });
  });
  it('should render the component with data and call onPressItem', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_reactRedux.Provider, {
        store: store,
        children: (0, _jsxRuntime.jsx)(_List.List, {
          navigation: navigation
        })
      })),
      getAllByTestId = _render.getAllByTestId;
    var items = getAllByTestId('item');
    expect(items.length).toBe(2);
    expect(store.getState().dataList).toEqual(dataList);
    _reactNative.fireEvent.press(items[0]);
    expect(navigation.navigate).toHaveBeenCalledWith('Detail', {
      item: dataList[0],
      screen: 'Edit Item'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkYXRhTGlzdCIsImlkIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImRhdGUiLCJEYXRlIiwiY2hlY2siLCJkZXNjcmliZSIsInN0b3JlIiwibmF2aWdhdGlvbiIsImJlZm9yZUVhY2giLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJuYXZpZ2F0ZSIsImplc3QiLCJmbiIsImRpc3BhdGNoIiwidHlwZSIsIml0IiwicmVuZGVyIiwiZ2V0QWxsQnlUZXN0SWQiLCJpdGVtcyIsImV4cGVjdCIsImxlbmd0aCIsInRvQmUiLCJnZXRTdGF0ZSIsInRvRXF1YWwiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiaXRlbSIsInNjcmVlbiJdLCJzb3VyY2VzIjpbIkxpc3QudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3JlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IExpc3QgfSBmcm9tICcuLi9MaXN0JztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgY3JlYXRlU3RvcmUgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgcmVkdWNlciBmcm9tICcuLi8uLi8uLi9yZWR1eC9yZWR1Y2VyJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuY29uc3QgZGF0YUxpc3QgPSBbXG4gIHtcbiAgICBpZDogJzEnLFxuICAgIHRpdGxlOiAnVGVzdCBUaXRsZScsXG4gICAgZGVzY3JpcHRpb246ICdUZXN0IERlc2NyaXB0aW9uJyxcbiAgICBkYXRlOiBuZXcgRGF0ZSgpLFxuICAgIGNoZWNrOiB0cnVlXG4gIH0sXG4gIHtcbiAgICBpZDogJzInLFxuICAgIHRpdGxlOiAnVGVzdCBUaXRsZSAyJyxcbiAgICBkZXNjcmlwdGlvbjogJ1Rlc3QgRGVzY3JpcHRpb24gMicsXG4gICAgZGF0ZTogbmV3IERhdGUoKSxcbiAgICBjaGVjazogZmFsc2VcbiAgfVxuXVxuXG4vLyBkZXNjcmliZSgnTGlzdCBDb21wb25lbnQnLCAoKSA9PiB7XG4vLyAgIGxldCBzdG9yZTtcbi8vICAgbGV0IG5hdmlnYXRpb247XG4vLyAgIGJlZm9yZUVhY2goKCkgPT4ge1xuLy8gICAgIHN0b3JlID0gY3JlYXRlU3RvcmUocmVkdWNlcik7XG4vLyAgICAgbmF2aWdhdGlvbiA9IHsgbmF2aWdhdGU6IGplc3QuZm4oKSB9O1xuLy8gICAgIHN0b3JlLmRpc3BhdGNoKHsgdHlwZTogJ0RBVEFfTElTVCcsIGRhdGFMaXN0IH0pO1xuLy8gICB9KTtcblxuLy8gICBpdCgnc2hvdWxkIHJlbmRlciB0aGUgY29tcG9uZW50IHdpdGggZGF0YSBhbmQgY2FsbCBvblByZXNzSXRlbScsICgpID0+IHtcbi8vICAgICBjb25zdCB7IGdldEFsbEJ5VGVzdElkIH0gPSByZW5kZXIoXG4vLyAgICAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbi8vICAgICAgICAgPExpc3QgbmF2aWdhdGlvbj17bmF2aWdhdGlvbn0gLz5cbi8vICAgICAgIDwvUHJvdmlkZXI+XG4vLyAgICAgKTtcbi8vICAgICBjb25zdCBpdGVtcyA9IGdldEFsbEJ5VGVzdElkKCdpdGVtJyk7XG4vLyAgICAgZXhwZWN0KGl0ZW1zLmxlbmd0aCkudG9CZSgyKTtcbi8vICAgICBmaXJlRXZlbnQucHJlc3MoaXRlbXNbMF0pO1xuLy8gICAgIGV4cGVjdChuYXZpZ2F0aW9uLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRGV0YWlsJywge1xuLy8gICAgICAgaXRlbTogZGF0YUxpc3RbMF0sXG4vLyAgICAgICBzY3JlZW46ICdFZGl0IEl0ZW0nXG4vLyAgICAgfSk7XG4vLyAgIH0pO1xuLy8gfSk7XG5cblxuZGVzY3JpYmUoJ0xpc3QgQ29tcG9uZW50JywgKCkgPT4ge1xuICAgIGxldCBzdG9yZTtcbiAgICBsZXQgbmF2aWdhdGlvbjtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHN0b3JlID0gY3JlYXRlU3RvcmUocmVkdWNlcik7XG4gICAgICBuYXZpZ2F0aW9uID0geyBuYXZpZ2F0ZTogamVzdC5mbigpIH07XG4gICAgICBzdG9yZS5kaXNwYXRjaCh7IHR5cGU6ICdTRVRfREFUQV9MSVNUJywgZGF0YUxpc3QgfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZW5kZXIgdGhlIGNvbXBvbmVudCB3aXRoIGRhdGEgYW5kIGNhbGwgb25QcmVzc0l0ZW0nLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IGdldEFsbEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgICAgIDxMaXN0IG5hdmlnYXRpb249e25hdmlnYXRpb259IC8+XG4gICAgICAgIDwvUHJvdmlkZXI+XG4gICAgICApO1xuICAgICAgY29uc3QgaXRlbXMgPSBnZXRBbGxCeVRlc3RJZCgnaXRlbScpO1xuICAgICAgZXhwZWN0KGl0ZW1zLmxlbmd0aCkudG9CZSgyKTtcbiAgICAgIGV4cGVjdChzdG9yZS5nZXRTdGF0ZSgpLmRhdGFMaXN0KS50b0VxdWFsKGRhdGFMaXN0KVxuICAgICAgZmlyZUV2ZW50LnByZXNzKGl0ZW1zWzBdKTtcbiAgICAgIGV4cGVjdChuYXZpZ2F0aW9uLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRGV0YWlsJywge1xuICAgICAgICBpdGVtOiBkYXRhTGlzdFswXSxcbiAgICAgICAgc2NyZWVuOidFZGl0IEl0ZW0nXG4gICAgfSk7XG59KTtcbn0pOyJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUE0QjtBQUU1QixJQUFNQSxRQUFRLEdBQUcsQ0FDZjtFQUNFQyxFQUFFLEVBQUUsR0FBRztFQUNQQyxLQUFLLEVBQUUsWUFBWTtFQUNuQkMsV0FBVyxFQUFFLGtCQUFrQjtFQUMvQkMsSUFBSSxFQUFFLElBQUlDLElBQUksRUFBRTtFQUNoQkMsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxFQUNEO0VBQ0VMLEVBQUUsRUFBRSxHQUFHO0VBQ1BDLEtBQUssRUFBRSxjQUFjO0VBQ3JCQyxXQUFXLEVBQUUsb0JBQW9CO0VBQ2pDQyxJQUFJLEVBQUUsSUFBSUMsSUFBSSxFQUFFO0VBQ2hCQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQ0Y7QUE0QkRDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFNO0VBQzdCLElBQUlDLEtBQUs7RUFDVCxJQUFJQyxVQUFVO0VBQ2RDLFVBQVUsQ0FBQyxZQUFNO0lBQ2ZGLEtBQUssR0FBRyxJQUFBRyxrQkFBVyxFQUFDQyxnQkFBTyxDQUFDO0lBQzVCSCxVQUFVLEdBQUc7TUFBRUksUUFBUSxFQUFFQyxJQUFJLENBQUNDLEVBQUU7SUFBRyxDQUFDO0lBQ3BDUCxLQUFLLENBQUNRLFFBQVEsQ0FBQztNQUFFQyxJQUFJLEVBQUUsZUFBZTtNQUFFakIsUUFBUSxFQUFSQTtJQUFTLENBQUMsQ0FBQztFQUNyRCxDQUFDLENBQUM7RUFDRmtCLEVBQUUsQ0FBQyw0REFBNEQsRUFBRSxZQUFNO0lBQ3JFLGNBQTJCLElBQUFDLG1CQUFNLEVBQy9CLHFCQUFDLG9CQUFRO1FBQUMsS0FBSyxFQUFFWCxLQUFNO1FBQUEsVUFDckIscUJBQUMsVUFBSTtVQUFDLFVBQVUsRUFBRUM7UUFBVztNQUFHLEVBQ3ZCLENBQ1o7TUFKT1csY0FBYyxXQUFkQSxjQUFjO0lBS3RCLElBQU1DLEtBQUssR0FBR0QsY0FBYyxDQUFDLE1BQU0sQ0FBQztJQUNwQ0UsTUFBTSxDQUFDRCxLQUFLLENBQUNFLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVCRixNQUFNLENBQUNkLEtBQUssQ0FBQ2lCLFFBQVEsRUFBRSxDQUFDekIsUUFBUSxDQUFDLENBQUMwQixPQUFPLENBQUMxQixRQUFRLENBQUM7SUFDbkQyQixzQkFBUyxDQUFDQyxLQUFLLENBQUNQLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QkMsTUFBTSxDQUFDYixVQUFVLENBQUNJLFFBQVEsQ0FBQyxDQUFDZ0Isb0JBQW9CLENBQUMsUUFBUSxFQUFFO01BQ3pEQyxJQUFJLEVBQUU5QixRQUFRLENBQUMsQ0FBQyxDQUFDO01BQ2pCK0IsTUFBTSxFQUFDO0lBQ1gsQ0FBQyxDQUFDO0VBQ04sQ0FBQyxDQUFDO0FBQ0YsQ0FBQyxDQUFDIn0=