{"version":3,"names":["Pressable","props","forwardedRef","accessible","android_disableSound","android_ripple","cancelable","children","delayHoverIn","delayHoverOut","delayLongPress","disabled","focusable","hitSlop","onHoverIn","onHoverOut","onLongPress","onPress","onPressIn","onPressOut","pressRetentionOffset","style","testOnly_pressed","unstable_pressDelay","restProps","viewRef","useRef","useImperativeHandle","current","android_rippleConfig","useAndroidRippleForView","usePressState","pressed","setPressed","accessibilityState","restPropsWithDefaults","viewProps","config","useMemo","pressRectOffset","delayPressIn","event","onPressMove","eventHandlers","usePressability","__DEV__","forcePressed","useState","MemoedPressable","React","memo","forwardRef","displayName"],"sources":["Pressable.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as React from 'react';\nimport {useMemo, useState, useRef, useImperativeHandle} from 'react';\nimport useAndroidRippleForView, {\n  type RippleConfig,\n} from './useAndroidRippleForView';\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityValue,\n} from '../View/ViewAccessibility';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport usePressability from '../../Pressability/usePressability';\nimport {type RectOrSize} from '../../StyleSheet/Rect';\nimport type {\n  LayoutEvent,\n  MouseEvent,\n  PressEvent,\n} from '../../Types/CoreEventTypes';\nimport View from '../View/View';\n\ntype ViewStyleProp = $ElementType<React.ElementConfig<typeof View>, 'style'>;\n\nexport type StateCallbackType = $ReadOnly<{|\n  pressed: boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  /**\n   * Accessibility.\n   */\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  accessibilityElementsHidden?: ?boolean,\n  accessibilityHint?: ?Stringish,\n  accessibilityLanguage?: ?Stringish,\n  accessibilityIgnoresInvertColors?: ?boolean,\n  accessibilityLabel?: ?Stringish,\n  accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),\n  accessibilityRole?: ?AccessibilityRole,\n  accessibilityState?: ?AccessibilityState,\n  accessibilityValue?: ?AccessibilityValue,\n  accessibilityViewIsModal?: ?boolean,\n  accessible?: ?boolean,\n  focusable?: ?boolean,\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n\n  /**\n   * Whether a press gesture can be interrupted by a parent gesture such as a\n   * scroll event. Defaults to true.\n   */\n  cancelable?: ?boolean,\n\n  /**\n   * Either children or a render prop that receives a boolean reflecting whether\n   * the component is currently pressed.\n   */\n  children: React.Node | ((state: StateCallbackType) => React.Node),\n\n  /**\n   * Duration to wait after hover in before calling `onHoverIn`.\n   */\n  delayHoverIn?: ?number,\n\n  /**\n   * Duration to wait after hover out before calling `onHoverOut`.\n   */\n  delayHoverOut?: ?number,\n\n  /**\n   * Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.\n   */\n  delayLongPress?: ?number,\n\n  /**\n   * Whether the press behavior is disabled.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Additional distance outside of this view in which a press is detected.\n   */\n  hitSlop?: ?RectOrSize,\n\n  /**\n   * Additional distance outside of this view in which a touch is considered a\n   * press before `onPressOut` is triggered.\n   */\n  pressRetentionOffset?: ?RectOrSize,\n\n  /**\n   * Called when this view's layout changes.\n   */\n  onLayout?: ?(event: LayoutEvent) => mixed,\n\n  /**\n   * Called when the hover is activated to provide visual feedback.\n   */\n  onHoverIn?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when the hover is deactivated to undo visual feedback.\n   */\n  onHoverOut?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when a long-tap gesture is detected.\n   */\n  onLongPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a single tap gesture is detected.\n   */\n  onPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is engaged before `onPress`.\n   */\n  onPressIn?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is released before `onPress`.\n   */\n  onPressOut?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Either view styles or a function that receives a boolean reflecting whether\n   * the component is currently pressed and returns view styles.\n   */\n  style?: ViewStyleProp | ((state: StateCallbackType) => ViewStyleProp),\n\n  /**\n   * Identifier used to find this view in tests.\n   */\n  testID?: ?string,\n\n  /**\n   * If true, doesn't play system sound on touch.\n   */\n  android_disableSound?: ?boolean,\n\n  /**\n   * Enables the Android ripple effect and configures its color.\n   */\n  android_ripple?: ?RippleConfig,\n\n  /**\n   * Used only for documentation or testing (e.g. snapshot testing).\n   */\n  testOnly_pressed?: ?boolean,\n\n  /**\n   * Duration to wait after press down before calling `onPressIn`.\n   */\n  unstable_pressDelay?: ?number,\n|}>;\n\n/**\n * Component used to build display components that should respond to whether the\n * component is currently pressed or not.\n */\n/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\n * LTI update could not be added via codemod */\nfunction Pressable(props: Props, forwardedRef): React.Node {\n  const {\n    accessible,\n    android_disableSound,\n    android_ripple,\n    cancelable,\n    children,\n    delayHoverIn,\n    delayHoverOut,\n    delayLongPress,\n    disabled,\n    focusable,\n    hitSlop,\n    onHoverIn,\n    onHoverOut,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    pressRetentionOffset,\n    style,\n    testOnly_pressed,\n    unstable_pressDelay,\n    ...restProps\n  } = props;\n\n  const viewRef = useRef<React.ElementRef<typeof View> | null>(null);\n  useImperativeHandle(forwardedRef, () => viewRef.current);\n\n  const android_rippleConfig = useAndroidRippleForView(android_ripple, viewRef);\n\n  const [pressed, setPressed] = usePressState(testOnly_pressed === true);\n\n  const accessibilityState =\n    disabled != null\n      ? {...props.accessibilityState, disabled}\n      : props.accessibilityState;\n\n  const restPropsWithDefaults: React.ElementConfig<typeof View> = {\n    ...restProps,\n    ...android_rippleConfig?.viewProps,\n    accessible: accessible !== false,\n    accessibilityState,\n    focusable: focusable !== false,\n    hitSlop,\n  };\n\n  const config = useMemo(\n    () => ({\n      cancelable,\n      disabled,\n      hitSlop,\n      pressRectOffset: pressRetentionOffset,\n      android_disableSound,\n      delayHoverIn,\n      delayHoverOut,\n      delayLongPress,\n      delayPressIn: unstable_pressDelay,\n      onHoverIn,\n      onHoverOut,\n      onLongPress,\n      onPress,\n      onPressIn(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressIn(event);\n        }\n        setPressed(true);\n        if (onPressIn != null) {\n          onPressIn(event);\n        }\n      },\n      onPressMove: android_rippleConfig?.onPressMove,\n      onPressOut(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressOut(event);\n        }\n        setPressed(false);\n        if (onPressOut != null) {\n          onPressOut(event);\n        }\n      },\n    }),\n    [\n      android_disableSound,\n      android_rippleConfig,\n      cancelable,\n      delayHoverIn,\n      delayHoverOut,\n      delayLongPress,\n      disabled,\n      hitSlop,\n      onHoverIn,\n      onHoverOut,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      pressRetentionOffset,\n      setPressed,\n      unstable_pressDelay,\n    ],\n  );\n  const eventHandlers = usePressability(config);\n\n  return (\n    <View\n      {...restPropsWithDefaults}\n      {...eventHandlers}\n      ref={viewRef}\n      style={typeof style === 'function' ? style({pressed}) : style}\n      collapsable={false}>\n      {typeof children === 'function' ? children({pressed}) : children}\n      {__DEV__ ? <PressabilityDebugView color=\"red\" hitSlop={hitSlop} /> : null}\n    </View>\n  );\n}\n\nfunction usePressState(forcePressed: boolean): [boolean, (boolean) => void] {\n  const [pressed, setPressed] = useState(false);\n  return [pressed || forcePressed, setPressed];\n}\n\nconst MemoedPressable = React.memo(React.forwardRef(Pressable));\nMemoedPressable.displayName = 'Pressable';\n\nexport default (MemoedPressable: React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof View>,\n>);\n"],"mappings":"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"}