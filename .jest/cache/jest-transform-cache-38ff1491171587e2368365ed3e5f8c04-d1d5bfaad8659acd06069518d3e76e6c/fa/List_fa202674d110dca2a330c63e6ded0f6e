75e6cccd486cbc7dc2353bfd4da76456
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.List = void 0;
var _reactNative = require("react-native");
var _react = _interopRequireDefault(require("react"));
var _moment = _interopRequireDefault(require("moment"));
var _reactRedux = require("react-redux");
var _checkbox = _interopRequireDefault(require("@react-native-community/checkbox"));
var _jsxRuntime = require("react/jsx-runtime");
var List = function List(props) {
  var dataList = (0, _reactRedux.useSelector)(function (state) {
    return state.dataList;
  });
  var _onPressItem = function onPressItem(item) {
    props.navigation.navigate('Detail', {
      item: item,
      screen: 'Edit Item'
    });
  };
  var renderItem = function renderItem(_ref) {
    var item = _ref.item,
      index = _ref.index;
    return (0, _jsxRuntime.jsx)(Item, {
      CheckBox: item == null ? void 0 : item.check,
      title: item == null ? void 0 : item.title,
      description: item == null ? void 0 : item.description,
      date: (0, _moment.default)(item == null ? void 0 : item.date).format('LLLL'),
      onPressItem: function onPressItem() {
        return _onPressItem(item);
      }
    });
  };
  return (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
    data: dataList,
    renderItem: renderItem,
    keyExtractor: function keyExtractor(item) {
      return item.id;
    }
  });
};
exports.List = List;
var Item = function Item(props) {
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.itemContainer,
    testID: "item",
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.checkBox,
      children: (0, _jsxRuntime.jsx)(_checkbox.default, {
        disabled: false,
        value: props.CheckBox,
        onValueChange: props.onValueChange
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      onPress: function onPress() {
        return props.onPressItem(props.item);
      },
      style: {
        flex: 5,
        justifyContent: 'center'
      },
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.textTitle,
        children: props.title
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.text1,
        children: props.description
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.text1,
        children: props.date
      })]
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  text1: {
    fontSize: 12,
    fontWeight: '500',
    color: 'grey'
  },
  textTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: 'black'
  },
  itemContainer: {
    height: 80,
    width: '100%',
    flexDirection: 'row',
    marginBottom: 5
  },
  checkBox: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMaXN0IiwicHJvcHMiLCJkYXRhTGlzdCIsInVzZVNlbGVjdG9yIiwic3RhdGUiLCJvblByZXNzSXRlbSIsIml0ZW0iLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJzY3JlZW4iLCJyZW5kZXJJdGVtIiwiaW5kZXgiLCJjaGVjayIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJtb21lbnQiLCJkYXRlIiwiZm9ybWF0IiwiaWQiLCJJdGVtIiwic3R5bGVzIiwiaXRlbUNvbnRhaW5lciIsImNoZWNrQm94IiwiQ2hlY2tCb3giLCJvblZhbHVlQ2hhbmdlIiwiZmxleCIsImp1c3RpZnlDb250ZW50IiwidGV4dFRpdGxlIiwidGV4dDEiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiY29sb3IiLCJoZWlnaHQiLCJ3aWR0aCIsImZsZXhEaXJlY3Rpb24iLCJtYXJnaW5Cb3R0b20iLCJhbGlnbkl0ZW1zIl0sInNvdXJjZXMiOlsiTGlzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0eWxlU2hlZXQsIFRleHQsIFZpZXcsIFRvdWNoYWJsZU9wYWNpdHkgLCBGbGF0TGlzdH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vLyBpbXBvcnQge0l0ZW19IGZyb20gJy4uL2l0ZW0vSXRlbSc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQge3VzZVNlbGVjdG9yfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgQ2hlY2tCb3ggZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvY2hlY2tib3gnO1xuXG5leHBvcnQgY29uc3QgTGlzdCA9IHByb3BzID0+IHtcbiAgY29uc3QgZGF0YUxpc3QgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5kYXRhTGlzdCk7XG5cbiAgY29uc3Qgb25QcmVzc0l0ZW0gPSBpdGVtID0+IHtcbiAgICBwcm9wcy5uYXZpZ2F0aW9uLm5hdmlnYXRlKCdEZXRhaWwnLCB7aXRlbTogaXRlbSwgc2NyZWVuOiAnRWRpdCBJdGVtJ30pO1xuICB9O1xuXG4gIGNvbnN0IHJlbmRlckl0ZW0gPSAoe2l0ZW0sIGluZGV4fSkgPT4gKFxuICAgIDxJdGVtXG4gICAgICBDaGVja0JveD17aXRlbT8uY2hlY2t9XG4gICAgICB0aXRsZT17aXRlbT8udGl0bGV9XG4gICAgICBkZXNjcmlwdGlvbj17aXRlbT8uZGVzY3JpcHRpb259XG4gICAgICBkYXRlPXttb21lbnQoaXRlbT8uZGF0ZSkuZm9ybWF0KCdMTExMJyl9XG4gICAgICBvblByZXNzSXRlbT17KCkgPT4gb25QcmVzc0l0ZW0oaXRlbSl9XG4gICAgLz5cbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxGbGF0TGlzdFxuICAgICAgZGF0YT17ZGF0YUxpc3R9XG4gICAgICByZW5kZXJJdGVtPXtyZW5kZXJJdGVtfVxuICAgICAga2V5RXh0cmFjdG9yPXtpdGVtID0+IGl0ZW0uaWR9XG4gICAgLz5cbiAgKTtcbn07XG5cbmNvbnN0IEl0ZW0gPSBwcm9wcyA9PiAoXG4gIDxWaWV3IHN0eWxlPXtzdHlsZXMuaXRlbUNvbnRhaW5lcn0gdGVzdElEPSdpdGVtJz5cbiAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNoZWNrQm94fT5cbiAgICAgIDxDaGVja0JveFxuICAgICAgICBkaXNhYmxlZD17ZmFsc2V9XG4gICAgICAgIHZhbHVlPXtwcm9wcy5DaGVja0JveH1cbiAgICAgICAgb25WYWx1ZUNoYW5nZT17cHJvcHMub25WYWx1ZUNoYW5nZX1cbiAgICAgIC8+XG4gICAgPC9WaWV3PlxuXG4gICAgPFRvdWNoYWJsZU9wYWNpdHlcbiAgICAgIC8vIG9uUHJlc3M9e3Byb3BzLm9uUHJlc3NJdGVtfVxuICAgICAgb25QcmVzcz17KCkgPT4gcHJvcHMub25QcmVzc0l0ZW0ocHJvcHMuaXRlbSl9XG4gICAgICBzdHlsZT17e2ZsZXg6IDUsIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ319PlxuICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy50ZXh0VGl0bGV9Pntwcm9wcy50aXRsZX08L1RleHQ+XG4gICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLnRleHQxfT57cHJvcHMuZGVzY3JpcHRpb259PC9UZXh0PlxuICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy50ZXh0MX0+e3Byb3BzLmRhdGV9PC9UZXh0PlxuICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgPC9WaWV3PlxuKTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICB0ZXh0MToge1xuICAgIGZvbnRTaXplOiAxMixcbiAgICBmb250V2VpZ2h0OiAnNTAwJyxcbiAgICBjb2xvcjogJ2dyZXknLFxuICB9LFxuICB0ZXh0VGl0bGU6IHtcbiAgICBmb250U2l6ZTogMTYsXG4gICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgIGNvbG9yOiAnYmxhY2snLFxuICB9LFxuICBpdGVtQ29udGFpbmVyOiB7XG4gICAgaGVpZ2h0OiA4MCxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIG1hcmdpbkJvdHRvbTogNSxcbiAgfSxcbiAgY2hlY2tCb3g6IHtcbiAgICBmbGV4OiAxLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgfSxcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBd0Q7QUFFakQsSUFBTUEsSUFBSSxHQUFHLFNBQVBBLElBQUksQ0FBR0MsS0FBSyxFQUFJO0VBQzNCLElBQU1DLFFBQVEsR0FBRyxJQUFBQyx1QkFBVyxFQUFDLFVBQUFDLEtBQUs7SUFBQSxPQUFJQSxLQUFLLENBQUNGLFFBQVE7RUFBQSxFQUFDO0VBRXJELElBQU1HLFlBQVcsR0FBRyxTQUFkQSxXQUFXLENBQUdDLElBQUksRUFBSTtJQUMxQkwsS0FBSyxDQUFDTSxVQUFVLENBQUNDLFFBQVEsQ0FBQyxRQUFR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