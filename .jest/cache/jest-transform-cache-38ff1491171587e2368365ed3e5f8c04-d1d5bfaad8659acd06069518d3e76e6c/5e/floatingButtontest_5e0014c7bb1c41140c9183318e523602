c3b54c934ab65e4a479ffe1ebc361e1d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNative2 = require("@testing-library/react-native");
var _FloatingButton = _interopRequireDefault(require("../FloatingButton"));
var _enzyme = require("enzyme");
var _jsxRuntime = require("react/jsx-runtime");
describe('Floating Button', function () {
  it('renders correctly on Detail Screen', function () {
    var _render = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {})),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    expect(getByTestId('add')).toBeTruthy();
  });
  it('calls onPress prop when menu icon is pressed', function () {
    var onPress = jest.fn();
    var _render2 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, Object.assign({}, props, {
        onPress: onPress
      }))),
      getByTestId = _render2.getByTestId;
    _reactNative2.fireEvent.press(getByTestId('add'));
    expect(onPress).toHaveBeenCalled();
    expect(props.navigation.navigate).toHaveBeenCalledWith('Detail', {
      item: data,
      screen: 'Add Item'
    });
  });
  it('calls navigation.navigate when pressed', function () {
    var data = {
      id: 1,
      name: 'Test',
      description: 'here is description',
      date: new Date()
    };
    var navigation = {
      navigate: jest.fn()
    };
    var _render3 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {
        navigation: navigation,
        onPress: function onPress() {
          return props.navigation.navigate('Detail', {
            item: data,
            screen: 'Add Item'
          });
        }
      })),
      getByTestId = _render3.getByTestId;
    var button = getByTestId('floating-button');
    button.props.onPress();
    expect(navigation.navigate).toHaveBeenCalledWith('Detail', {
      item: data,
      screen: 'Add Item'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwicmVuZGVyIiwiZ2V0QnlUZXh0IiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5Iiwib25QcmVzcyIsImplc3QiLCJmbiIsInByb3BzIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwibmF2aWdhdGlvbiIsIm5hdmlnYXRlIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJpdGVtIiwiZGF0YSIsInNjcmVlbiIsImlkIiwibmFtZSIsImRlc2NyaXB0aW9uIiwiZGF0ZSIsIkRhdGUiLCJidXR0b24iXSwic291cmNlcyI6WyJmbG9hdGluZ0J1dHRvbi50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBGbG9hdGluZ0J1dHRvbiBmcm9tICcuLi9GbG9hdGluZ0J1dHRvbic7XG5pbXBvcnQgeyBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcblxuZGVzY3JpYmUoJ0Zsb2F0aW5nIEJ1dHRvbicsICgpID0+IHtcblxuICAgIGl0KCdyZW5kZXJzIGNvcnJlY3RseSBvbiBEZXRhaWwgU2NyZWVuJywgKCkgPT4ge1xuICAgICAgY29uc3Qge2dldEJ5VGV4dCwgZ2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxGbG9hdGluZ0J1dHRvbiAgLz4pO1xuICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdhZGQnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2NhbGxzIG9uUHJlc3MgcHJvcCB3aGVuIG1lbnUgaWNvbiBpcyBwcmVzc2VkJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBvblByZXNzID0gamVzdC5mbigpO1xuICAgICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxGbG9hdGluZ0J1dHRvbiAgey4uLnByb3BzIH1vblByZXNzPXtvblByZXNzfSAvPik7XG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnYWRkJykpO1xuICAgICAgICBleHBlY3Qob25QcmVzcykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgICBleHBlY3QocHJvcHMubmF2aWdhdGlvbi5uYXZpZ2F0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0RldGFpbCcsIHtpdGVtOiBkYXRhICwgc2NyZWVuIDonQWRkIEl0ZW0nfSk7XG4gICAgICB9KTtcbiAgXG4gICAgIFxuICAgICAgICBpdCgnY2FsbHMgbmF2aWdhdGlvbi5uYXZpZ2F0ZSB3aGVuIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IHsgaWQ6IDEsIG5hbWU6ICdUZXN0JyAsIGRlc2NyaXB0aW9uOidoZXJlIGlzIGRlc2NyaXB0aW9uJyAsZGF0ZTogbmV3IERhdGUoKSB9O1xuICAgICAgICAgIGNvbnN0IG5hdmlnYXRpb24gPSB7IG5hdmlnYXRlOiBqZXN0LmZuKCkgfTtcbiAgICAgICAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICAgICAgICA8RmxvYXRpbmdCdXR0b25cbiAgICAgICAgICAgICAgbmF2aWdhdGlvbj17bmF2aWdhdGlvbn1cbiAgICAgICAgICAgICAgb25QcmVzcz17KCkgPT5cbiAgICAgICAgICAgICAgICBwcm9wcy5uYXZpZ2F0aW9uLm5hdmlnYXRlKCdEZXRhaWwnLCB7IGl0ZW06IGRhdGEsIHNjcmVlbjogJ0FkZCBJdGVtJyB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgYnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2Zsb2F0aW5nLWJ1dHRvbicpO1xuICAgICAgICAgIGJ1dHRvbi5wcm9wcy5vblByZXNzKCk7XG4gICAgICAgICAgZXhwZWN0KG5hdmlnYXRpb24ubmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdEZXRhaWwnLCB7XG4gICAgICAgICAgICBpdGVtOiBkYXRhLFxuICAgICAgICAgICAgc2NyZWVuOiAnQWRkIEl0ZW0nLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICBcbn0pO1xuXG5cbi8vIGRlc2NyaWJlKCdGbG9hdGluZ0J1dHRvbicsICgpID0+IHtcbi8vICAgICBsZXQgd3JhcHBlciwgcHJvcHM7XG4gIFxuLy8gICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuLy8gICAgICAgLy8gU2V0IHVwIG1vY2sgbmF2aWdhdGlvbi5uYXZpZ2F0ZSBmdW5jdGlvblxuLy8gICAgICAgcHJvcHMgPSB7XG4vLyAgICAgICAgIG5hdmlnYXRpb246IHtcbi8vICAgICAgICAgICBuYXZpZ2F0ZTogamVzdC5mbigpXG4vLyAgICAgICAgIH1cbi8vICAgICAgIH07XG4gIFxuLy8gICAgICAgLy8gUmVuZGVyIHRoZSBjb21wb25lbnRcbi8vICAgICAgIHdyYXBwZXIgPSBzaGFsbG93KDxGbG9hdGluZ0J1dHRvbiB7Li4ucHJvcHN9IC8+KTtcbi8vICAgICB9KTtcbiAgXG4vLyAgICAgaXQoJ3Nob3VsZCBjYWxsIG5hdmlnYXRpb24ubmF2aWdhdGUgd2l0aCBjb3JyZWN0IGFyZ3VtZW50cyB3aGVuIHByZXNzZWQnLCAoKSA9PiB7XG4vLyAgICAgICAvLyBTaW11bGF0ZSBidXR0b24gcHJlc3Ncbi8vICAgICAgIHdyYXBwZXIuc2ltdWxhdGUoJ3ByZXNzJyk7XG4gIFxuLy8gICAgICAgLy8gQXNzZXJ0IHRoYXQgbmF2aWdhdGlvbi5uYXZpZ2F0ZSB3YXMgY2FsbGVkIHdpdGggdGhlIGNvcnJlY3QgYXJndW1lbnRzXG4vLyAgICAgICBleHBlY3QocHJvcHMubmF2aWdhdGlvbi5uYXZpZ2F0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0RldGFpbCcsIHtpdGVtOiBkYXRhICwgc2NyZWVuIDonQWRkIEl0ZW0nfSk7XG4vLyAgICAgfSk7XG4vLyAgIH0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFpQztBQUVqQ0EsUUFBUSxDQUFDLGlCQUFpQixFQUFFLFlBQU07RUFFOUJDLEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRSxZQUFNO0lBQzdDLGNBQWlDLElBQUFDLG9CQUFNLEVBQUMscUJBQUMsdUJBQWMsS0FBSSxDQUFDO01BQXJEQyxTQUFTLFdBQVRBLFNBQVM7TUFBRUMsV0FBVyxXQUFYQSxXQUFXO0lBQzdCQyxNQUFNLENBQUNELFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDRSxVQUFVLEVBQUU7RUFDekMsQ0FBQyxDQUFDO0VBRUZMLEVBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxZQUFNO0lBQ3JELElBQU1NLE9BQU8sR0FBR0MsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDekIsZUFBc0IsSUFBQVAsb0JBQU0sRUFBQyxxQkFBQyx1QkFBYyxvQkFBTVEsS0FBSztRQUFFLE9BQU8sRUFBRUg7TUFBUSxHQUFHLENBQUM7TUFBdkVILFdBQVcsWUFBWEEsV0FBVztJQUNsQk8sdUJBQVMsQ0FBQ0MsS0FBSyxDQUFDUixXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkNDLE1BQU0sQ0FBQ0UsT0FBTyxDQUFDLENBQUNNLGdCQUFnQixFQUFFO0lBQ2xDUixNQUFNLENBQUNLLEtBQUssQ0FBQ0ksVUFBVSxDQUFDQyxRQUFRLENBQUMsQ0FBQ0Msb0JBQW9CLENBQUMsUUFBUSxFQUFFO01BQUNDLElBQUksRUFBRUMsSUFBSTtNQUFHQyxNQUFNLEVBQUU7SUFBVSxDQUFDLENBQUM7RUFDckcsQ0FBQyxDQUFDO0VBR0FsQixFQUFFLENBQUMsd0NBQXdDLEVBQUUsWUFBTTtJQUNqRCxJQUFNaUIsSUFBSSxHQUFHO01BQUVFLEVBQUUsRUFBRSxDQUFDO01BQUVDLElBQUksRUFBRSxNQUFNO01BQUdDLFdBQVcsRUFBQyxxQkFBcUI7TUFBRUMsSUFBSSxFQUFFLElBQUlDLElBQUk7SUFBRyxDQUFDO0lBQzFGLElBQU1WLFVBQVUsR0FBRztNQUFFQyxRQUFRLEVBQUVQLElBQUksQ0FBQ0MsRUFBRTtJQUFHLENBQUM7SUFDMUMsZUFBd0IsSUFBQVAsb0JBQU0sRUFDNUIscUJBQUMsdUJBQWM7UUFDYixVQUFVLEVBQUVZLFVBQVc7UUFDdkIsT0FBTyxFQUFFO1VBQUEsT0FDUEosS0FBSyxDQUFDSSxVQUFVLENBQUNDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7WUFBRUUsSUFBSSxFQUFFQyxJQUFJO1lBQUVDLE1BQU0sRUFBRTtVQUFXLENBQUMsQ0FBQztRQUFBO01BQ3hFLEVBQ0QsQ0FDSDtNQVBPZixXQUFXLFlBQVhBLFdBQVc7SUFRbkIsSUFBTXFCLE1BQU0sR0FBR3JCLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQztJQUM3Q3FCLE1BQU0sQ0FBQ2YsS0FBSyxDQUFDSCxPQUFPLEVBQUU7SUFDdEJGLE1BQU0sQ0FBQ1MsVUFBVSxDQUFDQyxRQUFRLENBQUMsQ0FBQ0Msb0JBQW9CLENBQUMsUUFBUSxFQUFFO01BQ3pEQyxJQUFJLEVBQUVDLElBQUk7TUFDVkMsTUFBTSxFQUFFO0lBQ1YsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBR1YsQ0FBQyxDQUFDIn0=