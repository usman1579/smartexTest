{"version":3,"names":["EventEmitter","_registry","eventType","listener","context","registrations","allocate","registration","remove","delete","add","args","apply","size","registry","Set"],"sources":["EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport interface EventSubscription {\n  remove(): void;\n}\n\nexport interface IEventEmitter<TEventToArgsMap: {...}> {\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context?: mixed,\n  ): EventSubscription;\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void;\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(eventType?: ?TEvent): void;\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number;\n}\n\ninterface Registration<TArgs> {\n  +context: mixed;\n  +listener: (...args: TArgs) => mixed;\n  +remove: () => void;\n}\n\ntype Registry<TEventToArgsMap: {...}> = $ObjMap<\n  TEventToArgsMap,\n  <TArgs>(TArgs) => Set<Registration<TArgs>>,\n>;\n\n/**\n * EventEmitter manages listeners and publishes events to them.\n *\n * EventEmitter accepts a single type parameter that defines the valid events\n * and associated listener argument(s).\n *\n * @example\n *\n *   const emitter = new EventEmitter<{\n *     success: [number, string],\n *     error: [Error],\n *   }>();\n *\n *   emitter.on('success', (statusCode, responseText) => {...});\n *   emitter.emit('success', 200, '...');\n *\n *   emitter.on('error', error => {...});\n *   emitter.emit('error', new Error('Resource not found'));\n *\n */\nexport default class EventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap>\n{\n  _registry: Registry<TEventToArgsMap> = {};\n\n  /**\n   * Registers a listener that is called when the supplied event is emitted.\n   * Returns a subscription that has a `remove` method to undo registration.\n   */\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context: mixed,\n  ): EventSubscription {\n    const registrations = allocate(this._registry, eventType);\n    const registration: Registration<$ElementType<TEventToArgsMap, TEvent>> = {\n      context,\n      listener,\n      remove(): void {\n        registrations.delete(registration);\n      },\n    };\n    registrations.add(registration);\n    return registration;\n  }\n\n  /**\n   * Emits the supplied event. Additional arguments supplied to `emit` will be\n   * passed through to each of the registered listeners.\n   *\n   * If a listener modifies the listeners registered for the same event, those\n   * changes will not be reflected in the current invocation of `emit`.\n   */\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void {\n    const registrations: ?Set<\n      Registration<$ElementType<TEventToArgsMap, TEvent>>,\n    > = this._registry[eventType];\n    if (registrations != null) {\n      for (const registration of [...registrations]) {\n        registration.listener.apply(registration.context, args);\n      }\n    }\n  }\n\n  /**\n   * Removes all registered listeners.\n   */\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    if (eventType == null) {\n      this._registry = {};\n    } else {\n      delete this._registry[eventType];\n    }\n  }\n\n  /**\n   * Returns the number of registered listeners for the supplied event.\n   */\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    const registrations: ?Set<Registration<mixed>> = this._registry[eventType];\n    return registrations == null ? 0 : registrations.size;\n  }\n}\n\nfunction allocate<\n  TEventToArgsMap: {...},\n  TEvent: $Keys<TEventToArgsMap>,\n  TEventArgs: $ElementType<TEventToArgsMap, TEvent>,\n>(\n  registry: Registry<TEventToArgsMap>,\n  eventType: TEvent,\n): Set<Registration<TEventArgs>> {\n  let registrations: ?Set<Registration<TEventArgs>> = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}\n"],"mappings":";;;;;;;;IA8DqBA,YAAY;EAAA;IAAA;IAAA,KAG/BC,SAAS,GAA8B,CAAC,CAAC;EAAA;EAAA;IAAA;IAAA,OAMzC,qBACEC,SAAiB,EACjBC,QAAmE,EACnEC,OAAc,EACK;MACnB,IAAMC,aAAa,GAAGC,QAAQ,CAAC,IAAI,CAACL,SAAS,EAAEC,SAAS,CAAC;MACzD,IAAMK,YAAiE,GAAG;QACxEH,OAAO,EAAPA,OAAO;QACPD,QAAQ,EAARA,QAAQ;QACRK,MAAM,oBAAS;UACbH,aAAa,CAACI,MAAM,CAACF,YAAY,CAAC;QACpC;MACF,CAAC;MACDF,aAAa,CAACK,GAAG,CAACH,YAAY,CAAC;MAC/B,OAAOA,YAAY;IACrB;EAAC;IAAA;IAAA,OASD,cACEL,SAAiB,EAEX;MACN,IAAMG,aAEL,GAAG,IAAI,CAACJ,SAAS,CAACC,SAAS,CAAC;MAC7B,IAAIG,aAAa,IAAI,IAAI,EAAE;QAAA,kCALxBM,IAAI;UAAJA,IAAI;QAAA;QAML,KAAK,IAAMJ,YAAY,qCAAQF,aAAa,GAAG;UAC7CE,YAAY,CAACJ,QAAQ,CAACS,KAAK,CAACL,YAAY,CAACH,OAAO,EAAEO,IAAI,CAAC;QACzD;MACF;IACF;EAAC;IAAA;IAAA,OAKD,4BACET,SAAmB,EACb;MACN,IAAIA,SAAS,IAAI,IAAI,EAAE;QACrB,IAAI,CAACD,SAAS,GAAG,CAAC,CAAC;MACrB,CAAC,MAAM;QACL,OAAO,IAAI,CAACA,SAAS,CAACC,SAAS,CAAC;MAClC;IACF;EAAC;IAAA;IAAA,OAKD,uBAA8CA,SAAiB,EAAU;MACvE,IAAMG,aAAwC,GAAG,IAAI,CAACJ,SAAS,CAACC,SAAS,CAAC;MAC1E,OAAOG,aAAa,IAAI,IAAI,GAAG,CAAC,GAAGA,aAAa,CAACQ,IAAI;IACvD;EAAC;EAAA;AAAA;AAAA;AAGH,SAASP,QAAQ,CAKfQ,QAAmC,EACnCZ,SAAiB,EACc;EAC/B,IAAIG,aAA6C,GAAGS,QAAQ,CAACZ,SAAS,CAAC;EACvE,IAAIG,aAAa,IAAI,IAAI,EAAE;IACzBA,aAAa,GAAG,IAAIU,GAAG,EAAE;IACzBD,QAAQ,CAACZ,SAAS,CAAC,GAAGG,aAAa;EACrC;EACA,OAAOA,aAAa;AACtB"}