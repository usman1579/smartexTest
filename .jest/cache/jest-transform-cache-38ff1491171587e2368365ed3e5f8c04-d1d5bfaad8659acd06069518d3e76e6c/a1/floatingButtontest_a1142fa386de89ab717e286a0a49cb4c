62f773d6afd6abf3c9b104f9e5a4de1d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNative2 = require("@testing-library/react-native");
var _FloatingButton = _interopRequireDefault(require("../FloatingButton"));
var _enzyme = require("enzyme");
var _jsxRuntime = require("react/jsx-runtime");
describe('Floating Button', function () {
  it('renders correctly on Main Screen', function () {
    var _render = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {})),
      getByTestId = _render.getByTestId;
    expect(getByTestId('add')).toBeTruthy();
  });
  it('calls navigation.navigate when pressed', function () {
    var data = {
      id: 1,
      name: 'Test',
      description: 'here is description',
      date: new Date()
    };
    var navigation = {
      navigate: jest.fn()
    };
    var _render2 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {
        navigation: navigation,
        onPress: function onPress() {
          return navigation.navigate('Detail', {
            item: data,
            screen: 'Add Item'
          });
        }
      })),
      getByTestId = _render2.getByTestId;
    var button = getByTestId('floating-button');
    _reactNative2.fireEvent.press(button);
    expect(navigation.navigate).toHaveBeenCalledWith('Detail', {
      item: data,
      screen: 'Add Item'
    });
  });
  it('renders correctly on Detail Screen', function () {
    var _render3 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {
        type: 'done'
      })),
      getByTestId = _render3.getByTestId;
    expect(getByTestId('checkmark-outline')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwicmVuZGVyIiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiZGF0YSIsImlkIiwibmFtZSIsImRlc2NyaXB0aW9uIiwiZGF0ZSIsIkRhdGUiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJqZXN0IiwiZm4iLCJpdGVtIiwic2NyZWVuIiwiYnV0dG9uIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCJdLCJzb3VyY2VzIjpbImZsb2F0aW5nQnV0dG9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEZsb2F0aW5nQnV0dG9uIGZyb20gJy4uL0Zsb2F0aW5nQnV0dG9uJztcbmltcG9ydCB7c2hhbGxvd30gZnJvbSAnZW56eW1lJztcblxuZGVzY3JpYmUoJ0Zsb2F0aW5nIEJ1dHRvbicsICgpID0+IHtcbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5IG9uIE1haW4gU2NyZWVuJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEZsb2F0aW5nQnV0dG9uIC8+KTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2FkZCcpKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdjYWxscyBuYXZpZ2F0aW9uLm5hdmlnYXRlIHdoZW4gcHJlc3NlZCcsICgpID0+IHtcbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgaWQ6IDEsXG4gICAgICBuYW1lOiAnVGVzdCcsXG4gICAgICBkZXNjcmlwdGlvbjogJ2hlcmUgaXMgZGVzY3JpcHRpb24nLFxuICAgICAgZGF0ZTogbmV3IERhdGUoKSxcbiAgICB9O1xuICAgIGNvbnN0IG5hdmlnYXRpb24gPSB7bmF2aWdhdGU6IGplc3QuZm4oKX07XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcihcbiAgICAgIDxGbG9hdGluZ0J1dHRvblxuICAgICAgICBuYXZpZ2F0aW9uPXtuYXZpZ2F0aW9ufVxuICAgICAgICBvblByZXNzPXsoKSA9PlxuICAgICAgICAgIG5hdmlnYXRpb24ubmF2aWdhdGUoJ0RldGFpbCcsIHtpdGVtOiBkYXRhLCBzY3JlZW46ICdBZGQgSXRlbSd9KVxuICAgICAgICB9XG4gICAgICAvPixcbiAgICApO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGdldEJ5VGVzdElkKCdmbG9hdGluZy1idXR0b24nKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoYnV0dG9uKTtcbiAgICBleHBlY3QobmF2aWdhdGlvbi5uYXZpZ2F0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0RldGFpbCcsIHtcbiAgICAgIGl0ZW06IGRhdGEsXG4gICAgICBzY3JlZW46ICdBZGQgSXRlbScsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSBvbiBEZXRhaWwgU2NyZWVuJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEZsb2F0aW5nQnV0dG9uIHR5cGU9eydkb25lJ30gLz4pO1xuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnY2hlY2ttYXJrLW91dGxpbmUnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuXG5cbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUErQjtBQUUvQkEsUUFBUSxDQUFDLGlCQUFpQixFQUFFLFlBQU07RUFDaENDLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxZQUFNO0lBQzNDLGNBQXNCLElBQUFDLG9CQUFNLEVBQUMscUJBQUMsdUJBQWMsS0FBRyxDQUFDO01BQXpDQyxXQUFXLFdBQVhBLFdBQVc7SUFDbEJDLE1BQU0sQ0FBQ0QsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUNFLFVBQVUsRUFBRTtFQUN6QyxDQUFDLENBQUM7RUFFRkosRUFBRSxDQUFDLHdDQUF3QyxFQUFFLFlBQU07SUFDakQsSUFBTUssSUFBSSxHQUFHO01BQ1hDLEVBQUUsRUFBRSxDQUFDO01BQ0xDLElBQUksRUFBRSxNQUFNO01BQ1pDLFdBQVcsRUFBRSxxQkFBcUI7TUFDbENDLElBQUksRUFBRSxJQUFJQyxJQUFJO0lBQ2hCLENBQUM7SUFDRCxJQUFNQyxVQUFVLEdBQUc7TUFBQ0MsUUFBUSxFQUFFQyxJQUFJLENBQUNDLEVBQUU7SUFBRSxDQUFDO0lBQ3hDLGVBQXNCLElBQUFiLG9CQUFNLEVBQzFCLHFCQUFDLHVCQUFjO1FBQ2IsVUFBVSxFQUFFVSxVQUFXO1FBQ3ZCLE9BQU8sRUFBRTtVQUFBLE9BQ1BBLFVBQVUsQ0FBQ0MsUUFBUSxDQUFDLFFBQVEsRUFBRTtZQUFDRyxJQUFJLEVBQUVWLElBQUk7WUFBRVcsTUFBTSxFQUFFO1VBQVUsQ0FBQyxDQUFDO1FBQUE7TUFDaEUsRUFDRCxDQUNIO01BUE1kLFdBQVcsWUFBWEEsV0FBVztJQVFsQixJQUFNZSxNQUFNLEdBQUdmLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQztJQUM3Q2dCLHVCQUFTLENBQUNDLEtBQUssQ0FBQ0YsTUFBTSxDQUFDO0lBQ3ZCZCxNQUFNLENBQUNRLFVBQVUsQ0FBQ0MsUUFBUSxDQUFDLENBQUNRLG9CQUFvQixDQUFDLFFBQVEsRUFBRTtNQUN6REwsSUFBSSxFQUFFVixJQUFJO01BQ1ZXLE1BQU0sRUFBRTtJQUNWLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUVGaEIsRUFBRSxDQUFDLG9DQUFvQyxFQUFFLFlBQU07SUFDN0MsZUFBc0IsSUFBQUMsb0JBQU0sRUFBQyxxQkFBQyx1QkFBYztRQUFDLElBQUksRUFBRTtNQUFPLEVBQUcsQ0FBQztNQUF2REMsV0FBVyxZQUFYQSxXQUFXO0lBQ2xCQyxNQUFNLENBQUNELFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUNFLFVBQVUsRUFBRTtFQUN2RCxDQUFDLENBQUM7QUFJSixDQUFDLENBQUMifQ==