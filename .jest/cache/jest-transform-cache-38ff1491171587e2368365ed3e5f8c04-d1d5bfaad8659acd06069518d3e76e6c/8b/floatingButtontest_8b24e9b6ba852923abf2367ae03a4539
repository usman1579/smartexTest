8a22ada6f8e393d6f0264763433c2367
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNative2 = require("@testing-library/react-native");
var _FloatingButton = _interopRequireDefault(require("../FloatingButton"));
var _enzyme = require("enzyme");
var _jsxRuntime = require("react/jsx-runtime");
describe('Floating Button', function () {
  it('renders correctly on Detail Screen', function () {
    var _render = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {})),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    expect(getByTestId('add')).toBeTruthy();
  });
  it('calls navigation.navigate when pressed', function () {
    var data = {
      id: 1,
      name: 'Test',
      description: 'here is description',
      date: new Date()
    };
    var navigation = {
      navigate: jest.fn()
    };
    var onPress = jest.fn();
    var _render2 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {
        navigation: navigation,
        onPress: function onPress() {
          return props.navigation.navigate('Detail', {
            item: data,
            screen: 'Add Item'
          });
        }
      })),
      getByTestId = _render2.getByTestId;
    var button = getByTestId('floating-button');
    _reactNative2.fireEvent.press(button);
    expect(navigation.navigate).toHaveBeenCalledWith('Detail', {
      item: data,
      screen: 'Add Item'
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwicmVuZGVyIiwiZ2V0QnlUZXh0IiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwiZGF0YSIsImlkIiwibmFtZSIsImRlc2NyaXB0aW9uIiwiZGF0ZSIsIkRhdGUiLCJuYXZpZ2F0aW9uIiwibmF2aWdhdGUiLCJqZXN0IiwiZm4iLCJvblByZXNzIiwicHJvcHMiLCJpdGVtIiwic2NyZWVuIiwiYnV0dG9uIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCJdLCJzb3VyY2VzIjpbImZsb2F0aW5nQnV0dG9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEZsb2F0aW5nQnV0dG9uIGZyb20gJy4uL0Zsb2F0aW5nQnV0dG9uJztcbmltcG9ydCB7IHNoYWxsb3cgfSBmcm9tICdlbnp5bWUnO1xuXG5kZXNjcmliZSgnRmxvYXRpbmcgQnV0dG9uJywgKCkgPT4ge1xuXG4gICAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5IG9uIERldGFpbCBTY3JlZW4nLCAoKSA9PiB7XG4gICAgICBjb25zdCB7Z2V0QnlUZXh0LCBnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEZsb2F0aW5nQnV0dG9uICAvPik7XG4gICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2FkZCcpKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG5cbiAgICAvLyBpdCgnY2FsbHMgb25QcmVzcyBwcm9wIHdoZW4gbWVudSBpY29uIGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgLy8gICAgIGNvbnN0IG9uUHJlc3MgPSBqZXN0LmZuKCk7XG4gICAgLy8gICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPEZsb2F0aW5nQnV0dG9uIG9uUHJlc3M9e29uUHJlc3N9IC8+KTtcbiAgICAvLyAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdhZGQnKSk7XG4gICAgLy8gICAgIGV4cGVjdChvblByZXNzKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgLy8gICAgIGV4cGVjdChwcm9wcy5uYXZpZ2F0aW9uLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRGV0YWlsJywge2l0ZW06IGRhdGEgLCBzY3JlZW4gOidBZGQgSXRlbSd9KTtcbiAgICAvLyAgIH0pO1xuICBcbiAgICAgXG4gICAgICAgIGl0KCdjYWxscyBuYXZpZ2F0aW9uLm5hdmlnYXRlIHdoZW4gcHJlc3NlZCcsICgpID0+IHtcbiAgICAgICAgICBjb25zdCBkYXRhID0geyBpZDogMSwgbmFtZTogJ1Rlc3QnICwgZGVzY3JpcHRpb246J2hlcmUgaXMgZGVzY3JpcHRpb24nICxkYXRlOiBuZXcgRGF0ZSgpIH07XG4gICAgICAgICAgY29uc3QgbmF2aWdhdGlvbiA9IHsgbmF2aWdhdGU6IGplc3QuZm4oKSB9O1xuICAgICAgICAgIGNvbnN0IG9uUHJlc3MgPSBqZXN0LmZuKCk7XG4gICAgICAgICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgICAgICAgPEZsb2F0aW5nQnV0dG9uXG4gICAgICAgICAgICAgIG5hdmlnYXRpb249e25hdmlnYXRpb259XG4gICAgICAgICAgICAgIG9uUHJlc3M9eygpID0+XG4gICAgICAgICAgICAgICAgcHJvcHMubmF2aWdhdGlvbi5uYXZpZ2F0ZSgnRGV0YWlsJywgeyBpdGVtOiBkYXRhLCBzY3JlZW46ICdBZGQgSXRlbScgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IGdldEJ5VGVzdElkKCdmbG9hdGluZy1idXR0b24nKTtcbiAgICAgICAgICBmaXJlRXZlbnQucHJlc3MoYnV0dG9uKVxuICAgICAgICAgIGV4cGVjdChuYXZpZ2F0aW9uLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRGV0YWlsJywge1xuICAgICAgICAgICAgaXRlbTogZGF0YSxcbiAgICAgICAgICAgIHNjcmVlbjogJ0FkZCBJdGVtJyxcbiAgICAgICAgICB9KTtcbiAgIFxuICAgICAgICAgIFxuICAgICAgICAgIC8vIGV4cGVjdChuYXZpZ2F0aW9uLm5hdmlnYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRGV0YWlsJywge1xuICAgICAgICAgIC8vICAgaXRlbTogZGF0YSxcbiAgICAgICAgICAvLyAgIHNjcmVlbjogJ0FkZCBJdGVtJyxcbiAgICAgICAgICAvLyB9KTtcblxuICAgICAgICB9KTtcblxufSk7XG5cbiJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBaUM7QUFFakNBLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxZQUFNO0VBRTlCQyxFQUFFLENBQUMsb0NBQW9DLEVBQUUsWUFBTTtJQUM3QyxjQUFpQyxJQUFBQyxvQkFBTSxFQUFDLHFCQUFDLHVCQUFjLEtBQUksQ0FBQztNQUFyREMsU0FBUyxXQUFUQSxTQUFTO01BQUVDLFdBQVcsV0FBWEEsV0FBVztJQUM3QkMsTUFBTSxDQUFDRCxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxFQUFFO0VBQ3pDLENBQUMsQ0FBQztFQVdFTCxFQUFFLENBQUMsd0NBQXdDLEVBQUUsWUFBTTtJQUNqRCxJQUFNTSxJQUFJLEdBQUc7TUFBRUMsRUFBRSxFQUFFLENBQUM7TUFBRUMsSUFBSSxFQUFFLE1BQU07TUFBR0MsV0FBVyxFQUFDLHFCQUFxQjtNQUFFQyxJQUFJLEVBQUUsSUFBSUMsSUFBSTtJQUFHLENBQUM7SUFDMUYsSUFBTUMsVUFBVSxHQUFHO01BQUVDLFFBQVEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFO0lBQUcsQ0FBQztJQUMxQyxJQUFNQyxPQUFPLEdBQUdGLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQ3pCLGVBQXdCLElBQUFkLG9CQUFNLEVBQzVCLHFCQUFDLHVCQUFjO1FBQ2IsVUFBVSxFQUFFVyxVQUFXO1FBQ3ZCLE9BQU8sRUFBRTtVQUFBLE9BQ1BLLEtBQUssQ0FBQ0wsVUFBVSxDQUFDQyxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQUVLLElBQUksRUFBRVosSUFBSTtZQUFFYSxNQUFNLEVBQUU7VUFBVyxDQUFDLENBQUM7UUFBQTtNQUN4RSxFQUNELENBQ0g7TUFQT2hCLFdBQVcsWUFBWEEsV0FBVztJQVFuQixJQUFNaUIsTUFBTSxHQUFHakIsV0FBVyxDQUFDLGlCQUFpQixDQUFDO0lBQzdDa0IsdUJBQVMsQ0FBQ0MsS0FBSyxDQUFDRixNQUFNLENBQUM7SUFDdkJoQixNQUFNLENBQUNRLFVBQVUsQ0FBQ0MsUUFBUSxDQUFDLENBQUNVLG9CQUFvQixDQUFDLFFBQVEsRUFBRTtNQUN6REwsSUFBSSxFQUFFWixJQUFJO01BQ1ZhLE1BQU0sRUFBRTtJQUNWLENBQUMsQ0FBQztFQVFKLENBQUMsQ0FBQztBQUVWLENBQUMsQ0FBQyJ9