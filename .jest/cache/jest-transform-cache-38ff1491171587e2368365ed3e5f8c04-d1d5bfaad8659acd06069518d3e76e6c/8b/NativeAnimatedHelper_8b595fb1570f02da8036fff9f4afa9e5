177bd04fa22d1f3ab117d8d16b5a202c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _NativeAnimatedModule = _interopRequireDefault(require("./NativeAnimatedModule"));
var _NativeAnimatedTurboModule = _interopRequireDefault(require("./NativeAnimatedTurboModule"));
var _NativeEventEmitter = _interopRequireDefault(require("../EventEmitter/NativeEventEmitter"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var _ReactNativeFeatureFlags = _interopRequireDefault(require("../ReactNative/ReactNativeFeatureFlags"));
var _invariant = _interopRequireDefault(require("invariant"));
var _RCTDeviceEventEmitter = _interopRequireDefault(require("../EventEmitter/RCTDeviceEventEmitter"));
var NativeAnimatedModule = _Platform.default.OS === 'ios' && global.RN$Bridgeless === true ? _NativeAnimatedTurboModule.default : _NativeAnimatedModule.default;
var __nativeAnimatedNodeTagCount = 1;
var __nativeAnimationIdCount = 1;
var nativeEventEmitter;
var waitingForQueuedOperations = new Set();
var queueOperations = false;
var queue = [];
var singleOpQueue = [];
var useSingleOpBatching = _Platform.default.OS === 'android' && !!(NativeAnimatedModule != null && NativeAnimatedModule.queueAndExecuteBatchedOperations) && _ReactNativeFeatureFlags.default.animatedShouldUseSingleOp();
var flushQueueTimeout = null;
var eventListenerGetValueCallbacks = {};
var eventListenerAnimationFinishedCallbacks = {};
var globalEventEmitterGetValueListener = null;
var globalEventEmitterAnimationFinishedListener = null;
var nativeOps = useSingleOpBatching ? function () {
  var apis = ['createAnimatedNode', 'updateAnimatedNodeConfig', 'getValue', 'startListeningToAnimatedNodeValue', 'stopListeningToAnimatedNodeValue', 'connectAnimatedNodes', 'disconnectAnimatedNodes', 'startAnimatingNode', 'stopAnimation', 'setAnimatedNodeValue', 'setAnimatedNodeOffset', 'flattenAnimatedNodeOffset', 'extractAnimatedNodeOffset', 'connectAnimatedNodeToView', 'disconnectAnimatedNodeFromView', 'restoreDefaultValues', 'dropAnimatedNode', 'addAnimatedEventToView', 'removeAnimatedEventFromView', 'addListener', 'removeListener'];
  return apis.reduce(function (acc, functionName, i) {
    acc[functionName] = i + 1;
    return acc;
  }, {});
}() : NativeAnimatedModule;
var API = {
  getValue: function getValue(tag, saveValueCallback) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    if (useSingleOpBatching) {
      if (saveValueCallback) {
        eventListenerGetValueCallbacks[tag] = saveValueCallback;
      }
      API.queueOperation(nativeOps.getValue, tag);
    } else {
      API.queueOperation(nativeOps.getValue, tag, saveValueCallback);
    }
  },
  setWaitingForIdentifier: function setWaitingForIdentifier(id) {
    waitingForQueuedOperations.add(id);
    queueOperations = true;
    if (_ReactNativeFeatureFlags.default.animatedShouldDebounceQueueFlush() && flushQueueTimeout) {
      clearTimeout(flushQueueTimeout);
    }
  },
  unsetWaitingForIdentifier: function unsetWaitingForIdentifier(id) {
    waitingForQueuedOperations.delete(id);
    if (waitingForQueuedOperations.size === 0) {
      queueOperations = false;
      API.disableQueue();
    }
  },
  disableQueue: function disableQueue() {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    if (_ReactNativeFeatureFlags.default.animatedShouldDebounceQueueFlush()) {
      var prevTimeout = flushQueueTimeout;
      clearImmediate(prevTimeout);
      flushQueueTimeout = setImmediate(API.flushQueue);
    } else {
      API.flushQueue();
    }
  },
  flushQueue: function flushQueue() {
    (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
    flushQueueTimeout = null;
    if (useSingleOpBatching && singleOpQueue.length === 0) {
      return;
    }
    if (!useSingleOpBatching && queue.length === 0) {
      return;
    }
    if (useSingleOpBatching) {
      if (!globalEventEmitterGetValueListener || !globalEventEmitterAnimationFinishedListener) {
        setupGlobalEventEmitterListeners();
      }
      NativeAnimatedModule.queueAndExecuteBatchedOperations == null ? void 0 : NativeAnimatedModule.queueAndExecuteBatchedOperations(singleOpQueue);
      singleOpQueue.length = 0;
    } else {
      _Platform.default.OS === 'android' && (NativeAnimatedModule.startOperationBatch == null ? void 0 : NativeAnimatedModule.startOperationBatch());
      for (var q = 0, l = queue.length; q < l; q++) {
        queue[q]();
      }
      queue.length = 0;
      _Platform.default.OS === 'android' && (NativeAnimatedModule.finishOperationBatch == null ? void 0 : NativeAnimatedModule.finishOperationBatch());
    }
  },
  queueOperation: function queueOperation(fn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (useSingleOpBatching) {
      singleOpQueue.push.apply(singleOpQueue, [fn].concat(args));
      return;
    }
    if (queueOperations || queue.length !== 0) {
      queue.push(function () {
        return fn.apply(void 0, args);
      });
    } else {
      fn.apply(void 0, args);
    }
  },
  createAnimatedNode: function createAnimatedNode(tag, config) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.createAnimatedNode, tag, config);
  },
  updateAnimatedNodeConfig: function updateAnimatedNodeConfig(tag, config) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    if (nativeOps.updateAnimatedNodeConfig) {
      API.queueOperation(nativeOps.updateAnimatedNodeConfig, tag, config);
    }
  },
  startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.startListeningToAnimatedNodeValue, tag);
  },
  stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.stopListeningToAnimatedNodeValue, tag);
  },
  connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.connectAnimatedNodes, parentTag, childTag);
  },
  disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.disconnectAnimatedNodes, parentTag, childTag);
  },
  startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    if (useSingleOpBatching) {
      if (endCallback) {
        eventListenerAnimationFinishedCallbacks[animationId] = endCallback;
      }
      API.queueOperation(nativeOps.startAnimatingNode, animationId, nodeTag, config);
    } else {
      API.queueOperation(nativeOps.startAnimatingNode, animationId, nodeTag, config, endCallback);
    }
  },
  stopAnimation: function stopAnimation(animationId) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.stopAnimation, animationId);
  },
  setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.setAnimatedNodeValue, nodeTag, value);
  },
  setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.setAnimatedNodeOffset, nodeTag, offset);
  },
  flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.flattenAnimatedNodeOffset, nodeTag);
  },
  extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.extractAnimatedNodeOffset, nodeTag);
  },
  connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.connectAnimatedNodeToView, nodeTag, viewTag);
  },
  disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.disconnectAnimatedNodeFromView, nodeTag, viewTag);
  },
  restoreDefaultValues: function restoreDefaultValues(nodeTag) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    if (nativeOps.restoreDefaultValues != null) {
      API.queueOperation(nativeOps.restoreDefaultValues, nodeTag);
    }
  },
  dropAnimatedNode: function dropAnimatedNode(tag) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.dropAnimatedNode, tag);
  },
  addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.addAnimatedEventToView, viewTag, eventName, eventMapping);
  },
  removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
    (0, _invariant.default)(nativeOps, 'Native animated module is not available');
    API.queueOperation(nativeOps.removeAnimatedEventFromView, viewTag, eventName, animatedNodeTag);
  }
};
function setupGlobalEventEmitterListeners() {
  globalEventEmitterGetValueListener = _RCTDeviceEventEmitter.default.addListener('onNativeAnimatedModuleGetValue', function (params) {
    var tag = params.tag;
    var callback = eventListenerGetValueCallbacks[tag];
    if (!callback) {
      return;
    }
    callback(params.value);
    delete eventListenerGetValueCallbacks[tag];
  });
  globalEventEmitterAnimationFinishedListener = _RCTDeviceEventEmitter.default.addListener('onNativeAnimatedModuleAnimationFinished', function (params) {
    var animationId = params.animationId;
    var callback = eventListenerAnimationFinishedCallbacks[animationId];
    if (!callback) {
      return;
    }
    callback(params);
    delete eventListenerAnimationFinishedCallbacks[animationId];
  });
}
var SUPPORTED_COLOR_STYLES = {
  backgroundColor: true,
  borderBottomColor: true,
  borderColor: true,
  borderEndColor: true,
  borderLeftColor: true,
  borderRightColor: true,
  borderStartColor: true,
  borderTopColor: true,
  color: true,
  tintColor: true
};
var SUPPORTED_STYLES = Object.assign({}, SUPPORTED_COLOR_STYLES, {
  borderBottomEndRadius: true,
  borderBottomLeftRadius: true,
  borderBottomRightRadius: true,
  borderBottomStartRadius: true,
  borderRadius: true,
  borderTopEndRadius: true,
  borderTopLeftRadius: true,
  borderTopRightRadius: true,
  borderTopStartRadius: true,
  elevation: true,
  opacity: true,
  transform: true,
  zIndex: true,
  shadowOpacity: true,
  shadowRadius: true,
  scaleX: true,
  scaleY: true,
  translateX: true,
  translateY: true
});
var SUPPORTED_TRANSFORMS = {
  translateX: true,
  translateY: true,
  scale: true,
  scaleX: true,
  scaleY: true,
  rotate: true,
  rotateX: true,
  rotateY: true,
  rotateZ: true,
  perspective: true
};
var SUPPORTED_INTERPOLATION_PARAMS = {
  inputRange: true,
  outputRange: true,
  extrapolate: true,
  extrapolateRight: true,
  extrapolateLeft: true
};
function addWhitelistedStyleProp(prop) {
  SUPPORTED_STYLES[prop] = true;
}
function addWhitelistedTransformProp(prop) {
  SUPPORTED_TRANSFORMS[prop] = true;
}
function addWhitelistedInterpolationParam(param) {
  SUPPORTED_INTERPOLATION_PARAMS[param] = true;
}
function isSupportedColorStyleProp(prop) {
  return SUPPORTED_COLOR_STYLES.hasOwnProperty(prop);
}
function isSupportedStyleProp(prop) {
  return SUPPORTED_STYLES.hasOwnProperty(prop);
}
function isSupportedTransformProp(prop) {
  return SUPPORTED_TRANSFORMS.hasOwnProperty(prop);
}
function isSupportedInterpolationParam(param) {
  return SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(param);
}
function validateTransform(configs) {
  configs.forEach(function (config) {
    if (!isSupportedTransformProp(config.property)) {
      throw new Error("Property '" + config.property + "' is not supported by native animated module");
    }
  });
}
function validateStyles(styles) {
  for (var _key2 in styles) {
    if (!isSupportedStyleProp(_key2)) {
      throw new Error("Style property '" + _key2 + "' is not supported by native animated module");
    }
  }
}
function validateInterpolation(config) {
  for (var _key3 in config) {
    if (!isSupportedInterpolationParam(_key3)) {
      throw new Error("Interpolation property '" + _key3 + "' is not supported by native animated module");
    }
  }
}
function generateNewNodeTag() {
  return __nativeAnimatedNodeTagCount++;
}
function generateNewAnimationId() {
  return __nativeAnimationIdCount++;
}
function assertNativeAnimatedModule() {
  (0, _invariant.default)(NativeAnimatedModule, 'Native animated module is not available');
}
var _warnedMissingNativeAnimated = false;
function shouldUseNativeDriver(config) {
  if (config.useNativeDriver == null) {
    console.warn('Animated: `useNativeDriver` was not specified. This is a required ' + 'option and must be explicitly set to `true` or `false`');
  }
  if (config.useNativeDriver === true && !NativeAnimatedModule) {
    if (!_warnedMissingNativeAnimated) {
      console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'Make sure to run `bundle exec pod install` first. Read more about autolinking: https://github.com/react-native-community/cli/blob/master/docs/autolinking.md');
      _warnedMissingNativeAnimated = true;
    }
    return false;
  }
  return config.useNativeDriver || false;
}
function transformDataType(value) {
  if (typeof value !== 'string') {
    return value;
  }
  if (/deg$/.test(value)) {
    var degrees = parseFloat(value) || 0;
    var radians = degrees * Math.PI / 180.0;
    return radians;
  } else {
    return value;
  }
}
module.exports = {
  API: API,
  isSupportedColorStyleProp: isSupportedColorStyleProp,
  isSupportedStyleProp: isSupportedStyleProp,
  isSupportedTransformProp: isSupportedTransformProp,
  isSupportedInterpolationParam: isSupportedInterpolationParam,
  addWhitelistedStyleProp: addWhitelistedStyleProp,
  addWhitelistedTransformProp: addWhitelistedTransformProp,
  addWhitelistedInterpolationParam: addWhitelistedInterpolationParam,
  validateStyles: validateStyles,
  validateTransform: validateTransform,
  validateInterpolation: validateInterpolation,
  generateNewNodeTag: generateNewNodeTag,
  generateNewAnimationId: generateNewAnimationId,
  assertNativeAnimatedModule: assertNativeAnimatedModule,
  shouldUseNativeDriver: shouldUseNativeDriver,
  transformDataType: transformDataType,
  get nativeEventEmitter() {
    if (!nativeEventEmitter) {
      nativeEventEmitter = new _NativeEventEmitter.default(_Platform.default.OS !== 'ios' ? null : NativeAnimatedModule);
    }
    return nativeEventEmitter;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOYXRpdmVBbmltYXRlZE1vZHVsZSIsIlBsYXRmb3JtIiwiT1MiLCJnbG9iYWwiLCJSTiRCcmlkZ2VsZXNzIiwiTmF0aXZlQW5pbWF0ZWRUdXJib01vZHVsZSIsIk5hdGl2ZUFuaW1hdGVkTm9uVHVyYm9Nb2R1bGUiLCJfX25hdGl2ZUFuaW1hdGVkTm9kZVRhZ0NvdW50IiwiX19uYXRpdmVBbmltYXRpb25JZENvdW50IiwibmF0aXZlRXZlbnRFbWl0dGVyIiwid2FpdGluZ0ZvclF1ZXVlZE9wZXJhdGlvbnMiLCJTZXQiLCJxdWV1ZU9wZXJhdGlvbnMiLCJxdWV1ZSIsInNpbmdsZU9wUXVldWUiLCJ1c2VTaW5nbGVPcEJhdGNoaW5nIiwicXVldWVBbmRFeGVjdXRlQmF0Y2hlZE9wZXJhdGlvbnMiLCJSZWFjdE5hdGl2ZUZlYXR1cmVGbGFncyIsImFuaW1hdGVkU2hvdWxkVXNlU2luZ2xlT3AiLCJmbHVzaFF1ZXVlVGltZW91dCIsImV2ZW50TGlzdGVuZXJHZXRWYWx1ZUNhbGxiYWNrcyIsImV2ZW50TGlzdGVuZXJBbmltYXRpb25GaW5pc2hlZENhbGxiYWNrcyIsImdsb2JhbEV2ZW50RW1pdHRlckdldFZhbHVlTGlzdGVuZXIiLCJnbG9iYWxFdmVudEVtaXR0ZXJBbmltYXRpb25GaW5pc2hlZExpc3RlbmVyIiwibmF0aXZlT3BzIiwiYXBpcyIsInJlZHVjZSIsImFjYyIsImZ1bmN0aW9uTmFtZSIsImkiLCJBUEkiLCJnZXRWYWx1ZSIsInRhZyIsInNhdmVWYWx1ZUNhbGxiYWNrIiwiaW52YXJpYW50IiwicXVldWVPcGVyYXRpb24iLCJzZXRXYWl0aW5nRm9ySWRlbnRpZmllciIsImlkIiwiYWRkIiwiYW5pbWF0ZWRTaG91bGREZWJvdW5jZVF1ZXVlRmx1c2giLCJjbGVhclRpbWVvdXQiLCJ1bnNldFdhaXRpbmdGb3JJZGVudGlmaWVyIiwiZGVsZXRlIiwic2l6ZSIsImRpc2FibGVRdWV1ZSIsInByZXZUaW1lb3V0IiwiY2xlYXJJbW1lZGlhdGUiLCJzZXRJbW1lZGlhdGUiLCJmbHVzaFF1ZXVlIiwibGVuZ3RoIiwic2V0dXBHbG9iYWxFdmVudEVtaXR0ZXJMaXN0ZW5lcnMiLCJzdGFydE9wZXJhdGlvbkJhdGNoIiwicSIsImwiLCJmaW5pc2hPcGVyYXRpb25CYXRjaCIsImZuIiwiYXJncyIsInB1c2giLCJjcmVhdGVBbmltYXRlZE5vZGUiLCJjb25maWciLCJ1cGRhdGVBbmltYXRlZE5vZGVDb25maWciLCJzdGFydExpc3RlbmluZ1RvQW5pbWF0ZWROb2RlVmFsdWUiLCJzdG9wTGlzdGVuaW5nVG9BbmltYXRlZE5vZGVWYWx1ZSIsImNvbm5lY3RBbmltYXRlZE5vZGVzIiwicGFyZW50VGFnIiwiY2hpbGRUYWciLCJkaXNjb25uZWN0QW5pbWF0ZWROb2RlcyIsInN0YXJ0QW5pbWF0aW5nTm9kZSIsImFuaW1hdGlvbklkIiwibm9kZVRhZyIsImVuZENhbGxiYWNrIiwic3RvcEFuaW1hdGlvbiIsInNldEFuaW1hdGVkTm9kZVZhbHVlIiwidmFsdWUiLCJzZXRBbmltYXRlZE5vZGVPZmZzZXQiLCJvZmZzZXQiLCJmbGF0dGVuQW5pbWF0ZWROb2RlT2Zmc2V0IiwiZXh0cmFjdEFuaW1hdGVkTm9kZU9mZnNldCIsImNvbm5lY3RBbmltYXRlZE5vZGVUb1ZpZXciLCJ2aWV3VGFnIiwiZGlzY29ubmVjdEFuaW1hdGVkTm9kZUZyb21WaWV3IiwicmVzdG9yZURlZmF1bHRWYWx1ZXMiLCJkcm9wQW5pbWF0ZWROb2RlIiwiYWRkQW5pbWF0ZWRFdmVudFRvVmlldyIsImV2ZW50TmFtZSIsImV2ZW50TWFwcGluZyIsInJlbW92ZUFuaW1hdGVkRXZlbnRGcm9tVmlldyIsImFuaW1hdGVkTm9kZVRhZyIsIlJDVERldmljZUV2ZW50RW1pdHRlciIsImFkZExpc3RlbmVyIiwicGFyYW1zIiwiY2FsbGJhY2siLCJTVVBQT1JURURfQ09MT1JfU1RZTEVTIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJDb2xvciIsImJvcmRlckVuZENvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlclN0YXJ0Q29sb3IiLCJib3JkZXJUb3BDb2xvciIsImNvbG9yIiwidGludENvbG9yIiwiU1VQUE9SVEVEX1NUWUxFUyIsImJvcmRlckJvdHRvbUVuZFJhZGl1cyIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbVN0YXJ0UmFkaXVzIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyVG9wRW5kUmFkaXVzIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwiYm9yZGVyVG9wU3RhcnRSYWRpdXMiLCJlbGV2YXRpb24iLCJvcGFjaXR5IiwidHJhbnNmb3JtIiwiekluZGV4Iiwic2hhZG93T3BhY2l0eSIsInNoYWRvd1JhZGl1cyIsInNjYWxlWCIsInNjYWxlWSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwiU1VQUE9SVEVEX1RSQU5TRk9STVMiLCJzY2FsZSIsInJvdGF0ZSIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsInBlcnNwZWN0aXZlIiwiU1VQUE9SVEVEX0lOVEVSUE9MQVRJT05fUEFSQU1TIiwiaW5wdXRSYW5nZSIsIm91dHB1dFJhbmdlIiwiZXh0cmFwb2xhdGUiLCJleHRyYXBvbGF0ZVJpZ2h0IiwiZXh0cmFwb2xhdGVMZWZ0IiwiYWRkV2hpdGVsaXN0ZWRTdHlsZVByb3AiLCJwcm9wIiwiYWRkV2hpdGVsaXN0ZWRUcmFuc2Zvcm1Qcm9wIiwiYWRkV2hpdGVsaXN0ZWRJbnRlcnBvbGF0aW9uUGFyYW0iLCJwYXJhbSIsImlzU3VwcG9ydGVkQ29sb3JTdHlsZVByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImlzU3VwcG9ydGVkU3R5bGVQcm9wIiwiaXNTdXBwb3J0ZWRUcmFuc2Zvcm1Qcm9wIiwiaXNTdXBwb3J0ZWRJbnRlcnBvbGF0aW9uUGFyYW0iLCJ2YWxpZGF0ZVRyYW5zZm9ybSIsImNvbmZpZ3MiLCJmb3JFYWNoIiwicHJvcGVydHkiLCJFcnJvciIsInZhbGlkYXRlU3R5bGVzIiwic3R5bGVzIiwia2V5IiwidmFsaWRhdGVJbnRlcnBvbGF0aW9uIiwiZ2VuZXJhdGVOZXdOb2RlVGFnIiwiZ2VuZXJhdGVOZXdBbmltYXRpb25JZCIsImFzc2VydE5hdGl2ZUFuaW1hdGVkTW9kdWxlIiwiX3dhcm5lZE1pc3NpbmdOYXRpdmVBbmltYXRlZCIsInNob3VsZFVzZU5hdGl2ZURyaXZlciIsInVzZU5hdGl2ZURyaXZlciIsImNvbnNvbGUiLCJ3YXJuIiwidHJhbnNmb3JtRGF0YVR5cGUiLCJ0ZXN0IiwiZGVncmVlcyIsInBhcnNlRmxvYXQiLCJyYWRpYW5zIiwiTWF0aCIsIlBJIiwibW9kdWxlIiwiZXhwb3J0cyIsIk5hdGl2ZUV2ZW50RW1pdHRlciJdLCJzb3VyY2VzIjpbIk5hdGl2ZUFuaW1hdGVkSGVscGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgTmF0aXZlQW5pbWF0ZWROb25UdXJib01vZHVsZSBmcm9tICcuL05hdGl2ZUFuaW1hdGVkTW9kdWxlJztcbmltcG9ydCBOYXRpdmVBbmltYXRlZFR1cmJvTW9kdWxlIGZyb20gJy4vTmF0aXZlQW5pbWF0ZWRUdXJib01vZHVsZSc7XG5pbXBvcnQgTmF0aXZlRXZlbnRFbWl0dGVyIGZyb20gJy4uL0V2ZW50RW1pdHRlci9OYXRpdmVFdmVudEVtaXR0ZXInO1xuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5pbXBvcnQgdHlwZSB7RXZlbnRDb25maWd9IGZyb20gJy4vQW5pbWF0ZWRFdmVudCc7XG5pbXBvcnQgdHlwZSB7XG4gIEV2ZW50TWFwcGluZyxcbiAgQW5pbWF0ZWROb2RlQ29uZmlnLFxuICBBbmltYXRpbmdOb2RlQ29uZmlnLFxufSBmcm9tICcuL05hdGl2ZUFuaW1hdGVkTW9kdWxlJztcbmltcG9ydCB0eXBlIHtBbmltYXRpb25Db25maWcsIEVuZENhbGxiYWNrfSBmcm9tICcuL2FuaW1hdGlvbnMvQW5pbWF0aW9uJztcbmltcG9ydCB0eXBlIHtJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZX0gZnJvbSAnLi9ub2Rlcy9BbmltYXRlZEludGVycG9sYXRpb24nO1xuaW1wb3J0IFJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzIGZyb20gJy4uL1JlYWN0TmF0aXZlL1JlYWN0TmF0aXZlRmVhdHVyZUZsYWdzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSQ1REZXZpY2VFdmVudEVtaXR0ZXIgZnJvbSAnLi4vRXZlbnRFbWl0dGVyL1JDVERldmljZUV2ZW50RW1pdHRlcic7XG5pbXBvcnQgdHlwZSB7RXZlbnRTdWJzY3JpcHRpb259IGZyb20gJy4uL3ZlbmRvci9lbWl0dGVyL0V2ZW50RW1pdHRlcic7XG5cbi8vIFRPRE8gVDY5NDM3MTUyIEBwZXRldGhlaGVhdCAtIERlbGV0ZSB0aGlzIGZvcmsgd2hlbiBGYWJyaWMgc2hpcHMgdG8gMTAwJS5cbmNvbnN0IE5hdGl2ZUFuaW1hdGVkTW9kdWxlID1cbiAgUGxhdGZvcm0uT1MgPT09ICdpb3MnICYmIGdsb2JhbC5STiRCcmlkZ2VsZXNzID09PSB0cnVlXG4gICAgPyBOYXRpdmVBbmltYXRlZFR1cmJvTW9kdWxlXG4gICAgOiBOYXRpdmVBbmltYXRlZE5vblR1cmJvTW9kdWxlO1xuXG5sZXQgX19uYXRpdmVBbmltYXRlZE5vZGVUYWdDb3VudCA9IDE7IC8qIHVzZWQgZm9yIGFuaW1hdGVkIG5vZGVzICovXG5sZXQgX19uYXRpdmVBbmltYXRpb25JZENvdW50ID0gMTsgLyogdXNlZCBmb3Igc3RhcnRlZCBhbmltYXRpb25zICovXG5cbmxldCBuYXRpdmVFdmVudEVtaXR0ZXI7XG5cbmxldCB3YWl0aW5nRm9yUXVldWVkT3BlcmF0aW9ucyA9IG5ldyBTZXQoKTtcbmxldCBxdWV1ZU9wZXJhdGlvbnMgPSBmYWxzZTtcbmxldCBxdWV1ZTogQXJyYXk8KCkgPT4gdm9pZD4gPSBbXTtcbi8vICRGbG93Rml4TWVcbmxldCBzaW5nbGVPcFF1ZXVlOiBBcnJheTxhbnk+ID0gW107XG5cbmNvbnN0IHVzZVNpbmdsZU9wQmF0Y2hpbmcgPVxuICBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnICYmXG4gICEhTmF0aXZlQW5pbWF0ZWRNb2R1bGU/LnF1ZXVlQW5kRXhlY3V0ZUJhdGNoZWRPcGVyYXRpb25zICYmXG4gIFJlYWN0TmF0aXZlRmVhdHVyZUZsYWdzLmFuaW1hdGVkU2hvdWxkVXNlU2luZ2xlT3AoKTtcbmxldCBmbHVzaFF1ZXVlVGltZW91dCA9IG51bGw7XG5cbmNvbnN0IGV2ZW50TGlzdGVuZXJHZXRWYWx1ZUNhbGxiYWNrcyA9IHt9O1xuY29uc3QgZXZlbnRMaXN0ZW5lckFuaW1hdGlvbkZpbmlzaGVkQ2FsbGJhY2tzID0ge307XG5sZXQgZ2xvYmFsRXZlbnRFbWl0dGVyR2V0VmFsdWVMaXN0ZW5lcjogP0V2ZW50U3Vic2NyaXB0aW9uID0gbnVsbDtcbmxldCBnbG9iYWxFdmVudEVtaXR0ZXJBbmltYXRpb25GaW5pc2hlZExpc3RlbmVyOiA/RXZlbnRTdWJzY3JpcHRpb24gPSBudWxsO1xuXG5jb25zdCBuYXRpdmVPcHM6ID90eXBlb2YgTmF0aXZlQW5pbWF0ZWRNb2R1bGUgPSB1c2VTaW5nbGVPcEJhdGNoaW5nXG4gID8gKChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBhcGlzID0gW1xuICAgICAgICAnY3JlYXRlQW5pbWF0ZWROb2RlJywgLy8gMVxuICAgICAgICAndXBkYXRlQW5pbWF0ZWROb2RlQ29uZmlnJywgLy8gMlxuICAgICAgICAnZ2V0VmFsdWUnLCAvLyAzXG4gICAgICAgICdzdGFydExpc3RlbmluZ1RvQW5pbWF0ZWROb2RlVmFsdWUnLCAvLyA0XG4gICAgICAgICdzdG9wTGlzdGVuaW5nVG9BbmltYXRlZE5vZGVWYWx1ZScsIC8vIDVcbiAgICAgICAgJ2Nvbm5lY3RBbmltYXRlZE5vZGVzJywgLy8gNlxuICAgICAgICAnZGlzY29ubmVjdEFuaW1hdGVkTm9kZXMnLCAvLyA3XG4gICAgICAgICdzdGFydEFuaW1hdGluZ05vZGUnLCAvLyA4XG4gICAgICAgICdzdG9wQW5pbWF0aW9uJywgLy8gOVxuICAgICAgICAnc2V0QW5pbWF0ZWROb2RlVmFsdWUnLCAvLyAxMFxuICAgICAgICAnc2V0QW5pbWF0ZWROb2RlT2Zmc2V0JywgLy8gMTFcbiAgICAgICAgJ2ZsYXR0ZW5BbmltYXRlZE5vZGVPZmZzZXQnLCAvLyAxMlxuICAgICAgICAnZXh0cmFjdEFuaW1hdGVkTm9kZU9mZnNldCcsIC8vIDEzXG4gICAgICAgICdjb25uZWN0QW5pbWF0ZWROb2RlVG9WaWV3JywgLy8gMTRcbiAgICAgICAgJ2Rpc2Nvbm5lY3RBbmltYXRlZE5vZGVGcm9tVmlldycsIC8vIDE1XG4gICAgICAgICdyZXN0b3JlRGVmYXVsdFZhbHVlcycsIC8vIDE2XG4gICAgICAgICdkcm9wQW5pbWF0ZWROb2RlJywgLy8gMTdcbiAgICAgICAgJ2FkZEFuaW1hdGVkRXZlbnRUb1ZpZXcnLCAvLyAxOFxuICAgICAgICAncmVtb3ZlQW5pbWF0ZWRFdmVudEZyb21WaWV3JywgLy8gMTlcbiAgICAgICAgJ2FkZExpc3RlbmVyJywgLy8gMjBcbiAgICAgICAgJ3JlbW92ZUxpc3RlbmVyJywgLy8gMjFcbiAgICAgIF07XG4gICAgICByZXR1cm4gYXBpcy5yZWR1Y2UoKGFjYywgZnVuY3Rpb25OYW1lLCBpKSA9PiB7XG4gICAgICAgIC8vIFRoZXNlIGluZGljZXMgbmVlZCB0byBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgaW5kaWNlcyBpbiBuYXRpdmUgKHNlZSBOYXRpdmVBbmltYXRlZE1vZHVsZSBpbiBKYXZhLCBvciB0aGUgZXF1aXZhbGVudCBmb3IgYW55IG90aGVyIG5hdGl2ZSBwbGF0Zm9ybSkuXG4gICAgICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgICBhY2NbZnVuY3Rpb25OYW1lXSA9IGkgKyAxO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfSwge30pO1xuICAgIH0pKCk6ICRGbG93Rml4TWUpXG4gIDogTmF0aXZlQW5pbWF0ZWRNb2R1bGU7XG5cbi8qKlxuICogV3JhcHBlcnMgYXJvdW5kIE5hdGl2ZUFuaW1hdGVkTW9kdWxlIHRvIHByb3ZpZGUgZmxvdyBhbmQgYXV0b2NvbXBsZXRlIHN1cHBvcnQgZm9yXG4gKiB0aGUgbmF0aXZlIG1vZHVsZSBtZXRob2RzLCBhbmQgYXV0b21hdGljIHF1ZXVlIG1hbmFnZW1lbnQgb24gQW5kcm9pZFxuICovXG5jb25zdCBBUEkgPSB7XG4gIGdldFZhbHVlOiBmdW5jdGlvbiAoXG4gICAgdGFnOiBudW1iZXIsXG4gICAgc2F2ZVZhbHVlQ2FsbGJhY2s6ICh2YWx1ZTogbnVtYmVyKSA9PiB2b2lkLFxuICApOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQobmF0aXZlT3BzLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgaWYgKHVzZVNpbmdsZU9wQmF0Y2hpbmcpIHtcbiAgICAgIGlmIChzYXZlVmFsdWVDYWxsYmFjaykge1xuICAgICAgICBldmVudExpc3RlbmVyR2V0VmFsdWVDYWxsYmFja3NbdGFnXSA9IHNhdmVWYWx1ZUNhbGxiYWNrO1xuICAgICAgfVxuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgQVBJLnF1ZXVlT3BlcmF0aW9uKG5hdGl2ZU9wcy5nZXRWYWx1ZSwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgQVBJLnF1ZXVlT3BlcmF0aW9uKG5hdGl2ZU9wcy5nZXRWYWx1ZSwgdGFnLCBzYXZlVmFsdWVDYWxsYmFjayk7XG4gICAgfVxuICB9LFxuICBzZXRXYWl0aW5nRm9ySWRlbnRpZmllcjogZnVuY3Rpb24gKGlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB3YWl0aW5nRm9yUXVldWVkT3BlcmF0aW9ucy5hZGQoaWQpO1xuICAgIHF1ZXVlT3BlcmF0aW9ucyA9IHRydWU7XG4gICAgaWYgKFxuICAgICAgUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3MuYW5pbWF0ZWRTaG91bGREZWJvdW5jZVF1ZXVlRmx1c2goKSAmJlxuICAgICAgZmx1c2hRdWV1ZVRpbWVvdXRcbiAgICApIHtcbiAgICAgIGNsZWFyVGltZW91dChmbHVzaFF1ZXVlVGltZW91dCk7XG4gICAgfVxuICB9LFxuICB1bnNldFdhaXRpbmdGb3JJZGVudGlmaWVyOiBmdW5jdGlvbiAoaWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIHdhaXRpbmdGb3JRdWV1ZWRPcGVyYXRpb25zLmRlbGV0ZShpZCk7XG5cbiAgICBpZiAod2FpdGluZ0ZvclF1ZXVlZE9wZXJhdGlvbnMuc2l6ZSA9PT0gMCkge1xuICAgICAgcXVldWVPcGVyYXRpb25zID0gZmFsc2U7XG4gICAgICBBUEkuZGlzYWJsZVF1ZXVlKCk7XG4gICAgfVxuICB9LFxuICBkaXNhYmxlUXVldWU6IGZ1bmN0aW9uICgpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQobmF0aXZlT3BzLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG5cbiAgICBpZiAoUmVhY3ROYXRpdmVGZWF0dXJlRmxhZ3MuYW5pbWF0ZWRTaG91bGREZWJvdW5jZVF1ZXVlRmx1c2goKSkge1xuICAgICAgY29uc3QgcHJldlRpbWVvdXQgPSBmbHVzaFF1ZXVlVGltZW91dDtcbiAgICAgIGNsZWFySW1tZWRpYXRlKHByZXZUaW1lb3V0KTtcbiAgICAgIGZsdXNoUXVldWVUaW1lb3V0ID0gc2V0SW1tZWRpYXRlKEFQSS5mbHVzaFF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgQVBJLmZsdXNoUXVldWUoKTtcbiAgICB9XG4gIH0sXG4gIGZsdXNoUXVldWU6IGZ1bmN0aW9uICgpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQoTmF0aXZlQW5pbWF0ZWRNb2R1bGUsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBmbHVzaFF1ZXVlVGltZW91dCA9IG51bGw7XG5cbiAgICAvLyBFYXJseSByZXR1cm5zIGJlZm9yZSBjYWxsaW5nIGFueSBBUElzXG4gICAgaWYgKHVzZVNpbmdsZU9wQmF0Y2hpbmcgJiYgc2luZ2xlT3BRdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF1c2VTaW5nbGVPcEJhdGNoaW5nICYmIHF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh1c2VTaW5nbGVPcEJhdGNoaW5nKSB7XG4gICAgICAvLyBTZXQgdXAgZXZlbnQgbGlzdGVuZXIgZm9yIGNhbGxiYWNrcyBpZiBpdCdzIG5vdCBzZXQgdXBcbiAgICAgIGlmIChcbiAgICAgICAgIWdsb2JhbEV2ZW50RW1pdHRlckdldFZhbHVlTGlzdGVuZXIgfHxcbiAgICAgICAgIWdsb2JhbEV2ZW50RW1pdHRlckFuaW1hdGlvbkZpbmlzaGVkTGlzdGVuZXJcbiAgICAgICkge1xuICAgICAgICBzZXR1cEdsb2JhbEV2ZW50RW1pdHRlckxpc3RlbmVycygpO1xuICAgICAgfVxuICAgICAgLy8gU2luZ2xlIG9wIGJhdGNoaW5nIGRvZXNuJ3QgdXNlIGNhbGxiYWNrIGZ1bmN0aW9ucywgaW5zdGVhZCB3ZVxuICAgICAgLy8gdXNlIFJDVERldmljZUV2ZW50RW1pdHRlci4gVGhpcyByZWR1Y2VzIG92ZXJoZWFkIG9mIHNlbmRpbmcgbG90cyBvZlxuICAgICAgLy8gSlNJIGZ1bmN0aW9ucyBhY3Jvc3MgdG8gbmF0aXZlIGNvZGU7IGJ1dCBhbHNvLCBUTSBpbmZyYXN0cnVjdHVyZSBjdXJyZW50bHlcbiAgICAgIC8vIGRvZXMgbm90IHN1cHBvcnQgcGFja2luZyBhIGZ1bmN0aW9uIGludG8gbmF0aXZlIGFycmF5cy5cbiAgICAgIE5hdGl2ZUFuaW1hdGVkTW9kdWxlLnF1ZXVlQW5kRXhlY3V0ZUJhdGNoZWRPcGVyYXRpb25zPy4oc2luZ2xlT3BRdWV1ZSk7XG4gICAgICBzaW5nbGVPcFF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcgJiYgTmF0aXZlQW5pbWF0ZWRNb2R1bGUuc3RhcnRPcGVyYXRpb25CYXRjaD8uKCk7XG4gICAgICBmb3IgKGxldCBxID0gMCwgbCA9IHF1ZXVlLmxlbmd0aDsgcSA8IGw7IHErKykge1xuICAgICAgICBxdWV1ZVtxXSgpO1xuICAgICAgfVxuICAgICAgcXVldWUubGVuZ3RoID0gMDtcbiAgICAgIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcgJiZcbiAgICAgICAgTmF0aXZlQW5pbWF0ZWRNb2R1bGUuZmluaXNoT3BlcmF0aW9uQmF0Y2g/LigpO1xuICAgIH1cbiAgfSxcbiAgcXVldWVPcGVyYXRpb246IDxBcmdzOiAkUmVhZE9ubHlBcnJheTxtaXhlZD4sIEZuOiAoLi4uQXJncykgPT4gdm9pZD4oXG4gICAgZm46IEZuLFxuICAgIC4uLmFyZ3M6IEFyZ3NcbiAgKTogdm9pZCA9PiB7XG4gICAgaWYgKHVzZVNpbmdsZU9wQmF0Y2hpbmcpIHtcbiAgICAgIC8vIEdldCB0aGUgY29tbWFuZCBJRCBmcm9tIHRoZSBxdWV1ZWQgZnVuY3Rpb24sIGFuZCBwdXNoIHRoYXQgSUQgYW5kIGFueSBhcmd1bWVudHMgbmVlZGVkIHRvIGV4ZWN1dGUgdGhlIG9wZXJhdGlvblxuICAgICAgLy8gJEZsb3dGaXhNZTogc3VycHJpc2UsIGZuIGlzIGFjdHVhbGx5IGEgbnVtYmVyXG4gICAgICBzaW5nbGVPcFF1ZXVlLnB1c2goZm4sIC4uLmFyZ3MpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIHF1ZXVlaW5nIGlzIGV4cGxpY2l0bHkgb24sICpvciogdGhlIHF1ZXVlIGhhcyBub3QgeWV0XG4gICAgLy8gYmVlbiBmbHVzaGVkLCB1c2UgdGhlIHF1ZXVlLiBUaGlzIGlzIHRvIHByZXZlbnQgb3BlcmF0aW9uc1xuICAgIC8vIGZyb20gYmVpbmcgZXhlY3V0ZWQgb3V0IG9mIG9yZGVyLlxuICAgIGlmIChxdWV1ZU9wZXJhdGlvbnMgfHwgcXVldWUubGVuZ3RoICE9PSAwKSB7XG4gICAgICBxdWV1ZS5wdXNoKCgpID0+IGZuKC4uLmFyZ3MpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm4oLi4uYXJncyk7XG4gICAgfVxuICB9LFxuICBjcmVhdGVBbmltYXRlZE5vZGU6IGZ1bmN0aW9uICh0YWc6IG51bWJlciwgY29uZmlnOiBBbmltYXRlZE5vZGVDb25maWcpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQobmF0aXZlT3BzLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgQVBJLnF1ZXVlT3BlcmF0aW9uKG5hdGl2ZU9wcy5jcmVhdGVBbmltYXRlZE5vZGUsIHRhZywgY29uZmlnKTtcbiAgfSxcbiAgdXBkYXRlQW5pbWF0ZWROb2RlQ29uZmlnOiBmdW5jdGlvbiAoXG4gICAgdGFnOiBudW1iZXIsXG4gICAgY29uZmlnOiBBbmltYXRlZE5vZGVDb25maWcsXG4gICk6IHZvaWQge1xuICAgIGludmFyaWFudChuYXRpdmVPcHMsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBpZiAobmF0aXZlT3BzLnVwZGF0ZUFuaW1hdGVkTm9kZUNvbmZpZykge1xuICAgICAgQVBJLnF1ZXVlT3BlcmF0aW9uKG5hdGl2ZU9wcy51cGRhdGVBbmltYXRlZE5vZGVDb25maWcsIHRhZywgY29uZmlnKTtcbiAgICB9XG4gIH0sXG4gIHN0YXJ0TGlzdGVuaW5nVG9BbmltYXRlZE5vZGVWYWx1ZTogZnVuY3Rpb24gKHRhZzogbnVtYmVyKSB7XG4gICAgaW52YXJpYW50KG5hdGl2ZU9wcywgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIEFQSS5xdWV1ZU9wZXJhdGlvbihuYXRpdmVPcHMuc3RhcnRMaXN0ZW5pbmdUb0FuaW1hdGVkTm9kZVZhbHVlLCB0YWcpO1xuICB9LFxuICBzdG9wTGlzdGVuaW5nVG9BbmltYXRlZE5vZGVWYWx1ZTogZnVuY3Rpb24gKHRhZzogbnVtYmVyKSB7XG4gICAgaW52YXJpYW50KG5hdGl2ZU9wcywgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIEFQSS5xdWV1ZU9wZXJhdGlvbihuYXRpdmVPcHMuc3RvcExpc3RlbmluZ1RvQW5pbWF0ZWROb2RlVmFsdWUsIHRhZyk7XG4gIH0sXG4gIGNvbm5lY3RBbmltYXRlZE5vZGVzOiBmdW5jdGlvbiAocGFyZW50VGFnOiBudW1iZXIsIGNoaWxkVGFnOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQobmF0aXZlT3BzLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgQVBJLnF1ZXVlT3BlcmF0aW9uKG5hdGl2ZU9wcy5jb25uZWN0QW5pbWF0ZWROb2RlcywgcGFyZW50VGFnLCBjaGlsZFRhZyk7XG4gIH0sXG4gIGRpc2Nvbm5lY3RBbmltYXRlZE5vZGVzOiBmdW5jdGlvbiAoXG4gICAgcGFyZW50VGFnOiBudW1iZXIsXG4gICAgY2hpbGRUYWc6IG51bWJlcixcbiAgKTogdm9pZCB7XG4gICAgaW52YXJpYW50KG5hdGl2ZU9wcywgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIEFQSS5xdWV1ZU9wZXJhdGlvbihuYXRpdmVPcHMuZGlzY29ubmVjdEFuaW1hdGVkTm9kZXMsIHBhcmVudFRhZywgY2hpbGRUYWcpO1xuICB9LFxuICBzdGFydEFuaW1hdGluZ05vZGU6IGZ1bmN0aW9uIChcbiAgICBhbmltYXRpb25JZDogbnVtYmVyLFxuICAgIG5vZGVUYWc6IG51bWJlcixcbiAgICBjb25maWc6IEFuaW1hdGluZ05vZGVDb25maWcsXG4gICAgZW5kQ2FsbGJhY2s6IEVuZENhbGxiYWNrLFxuICApOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQobmF0aXZlT3BzLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgaWYgKHVzZVNpbmdsZU9wQmF0Y2hpbmcpIHtcbiAgICAgIGlmIChlbmRDYWxsYmFjaykge1xuICAgICAgICBldmVudExpc3RlbmVyQW5pbWF0aW9uRmluaXNoZWRDYWxsYmFja3NbYW5pbWF0aW9uSWRdID0gZW5kQ2FsbGJhY2s7XG4gICAgICB9XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBBUEkucXVldWVPcGVyYXRpb24oXG4gICAgICAgIG5hdGl2ZU9wcy5zdGFydEFuaW1hdGluZ05vZGUsXG4gICAgICAgIGFuaW1hdGlvbklkLFxuICAgICAgICBub2RlVGFnLFxuICAgICAgICBjb25maWcsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBBUEkucXVldWVPcGVyYXRpb24oXG4gICAgICAgIG5hdGl2ZU9wcy5zdGFydEFuaW1hdGluZ05vZGUsXG4gICAgICAgIGFuaW1hdGlvbklkLFxuICAgICAgICBub2RlVGFnLFxuICAgICAgICBjb25maWcsXG4gICAgICAgIGVuZENhbGxiYWNrLFxuICAgICAgKTtcbiAgICB9XG4gIH0sXG4gIHN0b3BBbmltYXRpb246IGZ1bmN0aW9uIChhbmltYXRpb25JZDogbnVtYmVyKSB7XG4gICAgaW52YXJpYW50KG5hdGl2ZU9wcywgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIEFQSS5xdWV1ZU9wZXJhdGlvbihuYXRpdmVPcHMuc3RvcEFuaW1hdGlvbiwgYW5pbWF0aW9uSWQpO1xuICB9LFxuICBzZXRBbmltYXRlZE5vZGVWYWx1ZTogZnVuY3Rpb24gKG5vZGVUYWc6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIGludmFyaWFudChuYXRpdmVPcHMsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBBUEkucXVldWVPcGVyYXRpb24obmF0aXZlT3BzLnNldEFuaW1hdGVkTm9kZVZhbHVlLCBub2RlVGFnLCB2YWx1ZSk7XG4gIH0sXG4gIHNldEFuaW1hdGVkTm9kZU9mZnNldDogZnVuY3Rpb24gKG5vZGVUYWc6IG51bWJlciwgb2Zmc2V0OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQobmF0aXZlT3BzLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgQVBJLnF1ZXVlT3BlcmF0aW9uKG5hdGl2ZU9wcy5zZXRBbmltYXRlZE5vZGVPZmZzZXQsIG5vZGVUYWcsIG9mZnNldCk7XG4gIH0sXG4gIGZsYXR0ZW5BbmltYXRlZE5vZGVPZmZzZXQ6IGZ1bmN0aW9uIChub2RlVGFnOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQobmF0aXZlT3BzLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgQVBJLnF1ZXVlT3BlcmF0aW9uKG5hdGl2ZU9wcy5mbGF0dGVuQW5pbWF0ZWROb2RlT2Zmc2V0LCBub2RlVGFnKTtcbiAgfSxcbiAgZXh0cmFjdEFuaW1hdGVkTm9kZU9mZnNldDogZnVuY3Rpb24gKG5vZGVUYWc6IG51bWJlcik6IHZvaWQge1xuICAgIGludmFyaWFudChuYXRpdmVPcHMsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICBBUEkucXVldWVPcGVyYXRpb24obmF0aXZlT3BzLmV4dHJhY3RBbmltYXRlZE5vZGVPZmZzZXQsIG5vZGVUYWcpO1xuICB9LFxuICBjb25uZWN0QW5pbWF0ZWROb2RlVG9WaWV3OiBmdW5jdGlvbiAobm9kZVRhZzogbnVtYmVyLCB2aWV3VGFnOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpbnZhcmlhbnQobmF0aXZlT3BzLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgQVBJLnF1ZXVlT3BlcmF0aW9uKG5hdGl2ZU9wcy5jb25uZWN0QW5pbWF0ZWROb2RlVG9WaWV3LCBub2RlVGFnLCB2aWV3VGFnKTtcbiAgfSxcbiAgZGlzY29ubmVjdEFuaW1hdGVkTm9kZUZyb21WaWV3OiBmdW5jdGlvbiAoXG4gICAgbm9kZVRhZzogbnVtYmVyLFxuICAgIHZpZXdUYWc6IG51bWJlcixcbiAgKTogdm9pZCB7XG4gICAgaW52YXJpYW50KG5hdGl2ZU9wcywgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIEFQSS5xdWV1ZU9wZXJhdGlvbihcbiAgICAgIG5hdGl2ZU9wcy5kaXNjb25uZWN0QW5pbWF0ZWROb2RlRnJvbVZpZXcsXG4gICAgICBub2RlVGFnLFxuICAgICAgdmlld1RhZyxcbiAgICApO1xuICB9LFxuICByZXN0b3JlRGVmYXVsdFZhbHVlczogZnVuY3Rpb24gKG5vZGVUYWc6IG51bWJlcik6IHZvaWQge1xuICAgIGludmFyaWFudChuYXRpdmVPcHMsICdOYXRpdmUgYW5pbWF0ZWQgbW9kdWxlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICAvLyBCYWNrd2FyZHMgY29tcGF0IHdpdGggb2xkZXIgbmF0aXZlIHJ1bnRpbWVzLCBjYW4gYmUgcmVtb3ZlZCBsYXRlci5cbiAgICBpZiAobmF0aXZlT3BzLnJlc3RvcmVEZWZhdWx0VmFsdWVzICE9IG51bGwpIHtcbiAgICAgIEFQSS5xdWV1ZU9wZXJhdGlvbihuYXRpdmVPcHMucmVzdG9yZURlZmF1bHRWYWx1ZXMsIG5vZGVUYWcpO1xuICAgIH1cbiAgfSxcbiAgZHJvcEFuaW1hdGVkTm9kZTogZnVuY3Rpb24gKHRhZzogbnVtYmVyKTogdm9pZCB7XG4gICAgaW52YXJpYW50KG5hdGl2ZU9wcywgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIEFQSS5xdWV1ZU9wZXJhdGlvbihuYXRpdmVPcHMuZHJvcEFuaW1hdGVkTm9kZSwgdGFnKTtcbiAgfSxcbiAgYWRkQW5pbWF0ZWRFdmVudFRvVmlldzogZnVuY3Rpb24gKFxuICAgIHZpZXdUYWc6IG51bWJlcixcbiAgICBldmVudE5hbWU6IHN0cmluZyxcbiAgICBldmVudE1hcHBpbmc6IEV2ZW50TWFwcGluZyxcbiAgKSB7XG4gICAgaW52YXJpYW50KG5hdGl2ZU9wcywgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgIEFQSS5xdWV1ZU9wZXJhdGlvbihcbiAgICAgIG5hdGl2ZU9wcy5hZGRBbmltYXRlZEV2ZW50VG9WaWV3LFxuICAgICAgdmlld1RhZyxcbiAgICAgIGV2ZW50TmFtZSxcbiAgICAgIGV2ZW50TWFwcGluZyxcbiAgICApO1xuICB9LFxuICByZW1vdmVBbmltYXRlZEV2ZW50RnJvbVZpZXcoXG4gICAgdmlld1RhZzogbnVtYmVyLFxuICAgIGV2ZW50TmFtZTogc3RyaW5nLFxuICAgIGFuaW1hdGVkTm9kZVRhZzogbnVtYmVyLFxuICApIHtcbiAgICBpbnZhcmlhbnQobmF0aXZlT3BzLCAnTmF0aXZlIGFuaW1hdGVkIG1vZHVsZSBpcyBub3QgYXZhaWxhYmxlJyk7XG4gICAgQVBJLnF1ZXVlT3BlcmF0aW9uKFxuICAgICAgbmF0aXZlT3BzLnJlbW92ZUFuaW1hdGVkRXZlbnRGcm9tVmlldyxcbiAgICAgIHZpZXdUYWcsXG4gICAgICBldmVudE5hbWUsXG4gICAgICBhbmltYXRlZE5vZGVUYWcsXG4gICAgKTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIHNldHVwR2xvYmFsRXZlbnRFbWl0dGVyTGlzdGVuZXJzKCkge1xuICBnbG9iYWxFdmVudEVtaXR0ZXJHZXRWYWx1ZUxpc3RlbmVyID0gUkNURGV2aWNlRXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKFxuICAgICdvbk5hdGl2ZUFuaW1hdGVkTW9kdWxlR2V0VmFsdWUnLFxuICAgIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgIGNvbnN0IHt0YWd9ID0gcGFyYW1zO1xuICAgICAgY29uc3QgY2FsbGJhY2sgPSBldmVudExpc3RlbmVyR2V0VmFsdWVDYWxsYmFja3NbdGFnXTtcbiAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2socGFyYW1zLnZhbHVlKTtcbiAgICAgIGRlbGV0ZSBldmVudExpc3RlbmVyR2V0VmFsdWVDYWxsYmFja3NbdGFnXTtcbiAgICB9LFxuICApO1xuICBnbG9iYWxFdmVudEVtaXR0ZXJBbmltYXRpb25GaW5pc2hlZExpc3RlbmVyID1cbiAgICBSQ1REZXZpY2VFdmVudEVtaXR0ZXIuYWRkTGlzdGVuZXIoXG4gICAgICAnb25OYXRpdmVBbmltYXRlZE1vZHVsZUFuaW1hdGlvbkZpbmlzaGVkJyxcbiAgICAgIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgY29uc3Qge2FuaW1hdGlvbklkfSA9IHBhcmFtcztcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBldmVudExpc3RlbmVyQW5pbWF0aW9uRmluaXNoZWRDYWxsYmFja3NbYW5pbWF0aW9uSWRdO1xuICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKHBhcmFtcyk7XG4gICAgICAgIGRlbGV0ZSBldmVudExpc3RlbmVyQW5pbWF0aW9uRmluaXNoZWRDYWxsYmFja3NbYW5pbWF0aW9uSWRdO1xuICAgICAgfSxcbiAgICApO1xufVxuXG4vKipcbiAqIFN0eWxlcyBhbGxvd2VkIGJ5IHRoZSBuYXRpdmUgYW5pbWF0ZWQgaW1wbGVtZW50YXRpb24uXG4gKlxuICogSW4gZ2VuZXJhbCBuYXRpdmUgYW5pbWF0ZWQgaW1wbGVtZW50YXRpb24gc2hvdWxkIHN1cHBvcnQgYW55IG51bWVyaWMgb3IgY29sb3IgcHJvcGVydHkgdGhhdFxuICogZG9lc24ndCBuZWVkIHRvIGJlIHVwZGF0ZWQgdGhyb3VnaCB0aGUgc2hhZG93IHZpZXcgaGllcmFyY2h5IChhbGwgbm9uLWxheW91dCBwcm9wZXJ0aWVzKS5cbiAqL1xuY29uc3QgU1VQUE9SVEVEX0NPTE9SX1NUWUxFUyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiB0cnVlLFxuICBib3JkZXJCb3R0b21Db2xvcjogdHJ1ZSxcbiAgYm9yZGVyQ29sb3I6IHRydWUsXG4gIGJvcmRlckVuZENvbG9yOiB0cnVlLFxuICBib3JkZXJMZWZ0Q29sb3I6IHRydWUsXG4gIGJvcmRlclJpZ2h0Q29sb3I6IHRydWUsXG4gIGJvcmRlclN0YXJ0Q29sb3I6IHRydWUsXG4gIGJvcmRlclRvcENvbG9yOiB0cnVlLFxuICBjb2xvcjogdHJ1ZSxcbiAgdGludENvbG9yOiB0cnVlLFxufTtcblxuY29uc3QgU1VQUE9SVEVEX1NUWUxFUyA9IHtcbiAgLi4uU1VQUE9SVEVEX0NPTE9SX1NUWUxFUyxcbiAgYm9yZGVyQm90dG9tRW5kUmFkaXVzOiB0cnVlLFxuICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiB0cnVlLFxuICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogdHJ1ZSxcbiAgYm9yZGVyQm90dG9tU3RhcnRSYWRpdXM6IHRydWUsXG4gIGJvcmRlclJhZGl1czogdHJ1ZSxcbiAgYm9yZGVyVG9wRW5kUmFkaXVzOiB0cnVlLFxuICBib3JkZXJUb3BMZWZ0UmFkaXVzOiB0cnVlLFxuICBib3JkZXJUb3BSaWdodFJhZGl1czogdHJ1ZSxcbiAgYm9yZGVyVG9wU3RhcnRSYWRpdXM6IHRydWUsXG4gIGVsZXZhdGlvbjogdHJ1ZSxcbiAgb3BhY2l0eTogdHJ1ZSxcbiAgdHJhbnNmb3JtOiB0cnVlLFxuICB6SW5kZXg6IHRydWUsXG4gIC8qIGlvcyBzdHlsZXMgKi9cbiAgc2hhZG93T3BhY2l0eTogdHJ1ZSxcbiAgc2hhZG93UmFkaXVzOiB0cnVlLFxuICAvKiBsZWdhY3kgYW5kcm9pZCB0cmFuc2Zvcm0gcHJvcGVydGllcyAqL1xuICBzY2FsZVg6IHRydWUsXG4gIHNjYWxlWTogdHJ1ZSxcbiAgdHJhbnNsYXRlWDogdHJ1ZSxcbiAgdHJhbnNsYXRlWTogdHJ1ZSxcbn07XG5cbmNvbnN0IFNVUFBPUlRFRF9UUkFOU0ZPUk1TID0ge1xuICB0cmFuc2xhdGVYOiB0cnVlLFxuICB0cmFuc2xhdGVZOiB0cnVlLFxuICBzY2FsZTogdHJ1ZSxcbiAgc2NhbGVYOiB0cnVlLFxuICBzY2FsZVk6IHRydWUsXG4gIHJvdGF0ZTogdHJ1ZSxcbiAgcm90YXRlWDogdHJ1ZSxcbiAgcm90YXRlWTogdHJ1ZSxcbiAgcm90YXRlWjogdHJ1ZSxcbiAgcGVyc3BlY3RpdmU6IHRydWUsXG59O1xuXG5jb25zdCBTVVBQT1JURURfSU5URVJQT0xBVElPTl9QQVJBTVMgPSB7XG4gIGlucHV0UmFuZ2U6IHRydWUsXG4gIG91dHB1dFJhbmdlOiB0cnVlLFxuICBleHRyYXBvbGF0ZTogdHJ1ZSxcbiAgZXh0cmFwb2xhdGVSaWdodDogdHJ1ZSxcbiAgZXh0cmFwb2xhdGVMZWZ0OiB0cnVlLFxufTtcblxuZnVuY3Rpb24gYWRkV2hpdGVsaXN0ZWRTdHlsZVByb3AocHJvcDogc3RyaW5nKTogdm9pZCB7XG4gIFNVUFBPUlRFRF9TVFlMRVNbcHJvcF0gPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBhZGRXaGl0ZWxpc3RlZFRyYW5zZm9ybVByb3AocHJvcDogc3RyaW5nKTogdm9pZCB7XG4gIFNVUFBPUlRFRF9UUkFOU0ZPUk1TW3Byb3BdID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gYWRkV2hpdGVsaXN0ZWRJbnRlcnBvbGF0aW9uUGFyYW0ocGFyYW06IHN0cmluZyk6IHZvaWQge1xuICBTVVBQT1JURURfSU5URVJQT0xBVElPTl9QQVJBTVNbcGFyYW1dID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNTdXBwb3J0ZWRDb2xvclN0eWxlUHJvcChwcm9wOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIFNVUFBPUlRFRF9DT0xPUl9TVFlMRVMuaGFzT3duUHJvcGVydHkocHJvcCk7XG59XG5cbmZ1bmN0aW9uIGlzU3VwcG9ydGVkU3R5bGVQcm9wKHByb3A6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gU1VQUE9SVEVEX1NUWUxFUy5oYXNPd25Qcm9wZXJ0eShwcm9wKTtcbn1cblxuZnVuY3Rpb24gaXNTdXBwb3J0ZWRUcmFuc2Zvcm1Qcm9wKHByb3A6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gU1VQUE9SVEVEX1RSQU5TRk9STVMuaGFzT3duUHJvcGVydHkocHJvcCk7XG59XG5cbmZ1bmN0aW9uIGlzU3VwcG9ydGVkSW50ZXJwb2xhdGlvblBhcmFtKHBhcmFtOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIFNVUFBPUlRFRF9JTlRFUlBPTEFUSU9OX1BBUkFNUy5oYXNPd25Qcm9wZXJ0eShwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVHJhbnNmb3JtKFxuICBjb25maWdzOiBBcnJheTxcbiAgICB8IHtcbiAgICAgICAgdHlwZTogJ2FuaW1hdGVkJyxcbiAgICAgICAgcHJvcGVydHk6IHN0cmluZyxcbiAgICAgICAgbm9kZVRhZzogP251bWJlcixcbiAgICAgICAgLi4uXG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgIHR5cGU6ICdzdGF0aWMnLFxuICAgICAgICBwcm9wZXJ0eTogc3RyaW5nLFxuICAgICAgICB2YWx1ZTogbnVtYmVyIHwgc3RyaW5nLFxuICAgICAgICAuLi5cbiAgICAgIH0sXG4gID4sXG4pOiB2b2lkIHtcbiAgY29uZmlncy5mb3JFYWNoKGNvbmZpZyA9PiB7XG4gICAgaWYgKCFpc1N1cHBvcnRlZFRyYW5zZm9ybVByb3AoY29uZmlnLnByb3BlcnR5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgUHJvcGVydHkgJyR7Y29uZmlnLnByb3BlcnR5fScgaXMgbm90IHN1cHBvcnRlZCBieSBuYXRpdmUgYW5pbWF0ZWQgbW9kdWxlYCxcbiAgICAgICk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVTdHlsZXMoc3R5bGVzOiB7W2tleTogc3RyaW5nXTogP251bWJlciwgLi4ufSk6IHZvaWQge1xuICBmb3IgKGNvbnN0IGtleSBpbiBzdHlsZXMpIHtcbiAgICBpZiAoIWlzU3VwcG9ydGVkU3R5bGVQcm9wKGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFN0eWxlIHByb3BlcnR5ICcke2tleX0nIGlzIG5vdCBzdXBwb3J0ZWQgYnkgbmF0aXZlIGFuaW1hdGVkIG1vZHVsZWAsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUludGVycG9sYXRpb248T3V0cHV0VDogbnVtYmVyIHwgc3RyaW5nPihcbiAgY29uZmlnOiBJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZTxPdXRwdXRUPixcbik6IHZvaWQge1xuICBmb3IgKGNvbnN0IGtleSBpbiBjb25maWcpIHtcbiAgICBpZiAoIWlzU3VwcG9ydGVkSW50ZXJwb2xhdGlvblBhcmFtKGtleSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludGVycG9sYXRpb24gcHJvcGVydHkgJyR7a2V5fScgaXMgbm90IHN1cHBvcnRlZCBieSBuYXRpdmUgYW5pbWF0ZWQgbW9kdWxlYCxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlTmV3Tm9kZVRhZygpOiBudW1iZXIge1xuICByZXR1cm4gX19uYXRpdmVBbmltYXRlZE5vZGVUYWdDb3VudCsrO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZU5ld0FuaW1hdGlvbklkKCk6IG51bWJlciB7XG4gIHJldHVybiBfX25hdGl2ZUFuaW1hdGlvbklkQ291bnQrKztcbn1cblxuZnVuY3Rpb24gYXNzZXJ0TmF0aXZlQW5pbWF0ZWRNb2R1bGUoKTogdm9pZCB7XG4gIGludmFyaWFudChOYXRpdmVBbmltYXRlZE1vZHVsZSwgJ05hdGl2ZSBhbmltYXRlZCBtb2R1bGUgaXMgbm90IGF2YWlsYWJsZScpO1xufVxuXG5sZXQgX3dhcm5lZE1pc3NpbmdOYXRpdmVBbmltYXRlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmVEcml2ZXIoXG4gIGNvbmZpZzogJFJlYWRPbmx5PHsuLi5BbmltYXRpb25Db25maWcsIC4uLn0+IHwgRXZlbnRDb25maWcsXG4pOiBib29sZWFuIHtcbiAgaWYgKGNvbmZpZy51c2VOYXRpdmVEcml2ZXIgPT0gbnVsbCkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgICdBbmltYXRlZDogYHVzZU5hdGl2ZURyaXZlcmAgd2FzIG5vdCBzcGVjaWZpZWQuIFRoaXMgaXMgYSByZXF1aXJlZCAnICtcbiAgICAgICAgJ29wdGlvbiBhbmQgbXVzdCBiZSBleHBsaWNpdGx5IHNldCB0byBgdHJ1ZWAgb3IgYGZhbHNlYCcsXG4gICAgKTtcbiAgfVxuXG4gIGlmIChjb25maWcudXNlTmF0aXZlRHJpdmVyID09PSB0cnVlICYmICFOYXRpdmVBbmltYXRlZE1vZHVsZSkge1xuICAgIGlmICghX3dhcm5lZE1pc3NpbmdOYXRpdmVBbmltYXRlZCkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnQW5pbWF0ZWQ6IGB1c2VOYXRpdmVEcml2ZXJgIGlzIG5vdCBzdXBwb3J0ZWQgYmVjYXVzZSB0aGUgbmF0aXZlICcgK1xuICAgICAgICAgICdhbmltYXRlZCBtb2R1bGUgaXMgbWlzc2luZy4gRmFsbGluZyBiYWNrIHRvIEpTLWJhc2VkIGFuaW1hdGlvbi4gVG8gJyArXG4gICAgICAgICAgJ3Jlc29sdmUgdGhpcywgYWRkIGBSQ1RBbmltYXRpb25gIG1vZHVsZSB0byB0aGlzIGFwcCwgb3IgcmVtb3ZlICcgK1xuICAgICAgICAgICdgdXNlTmF0aXZlRHJpdmVyYC4gJyArXG4gICAgICAgICAgJ01ha2Ugc3VyZSB0byBydW4gYGJ1bmRsZSBleGVjIHBvZCBpbnN0YWxsYCBmaXJzdC4gUmVhZCBtb3JlIGFib3V0IGF1dG9saW5raW5nOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLWNvbW11bml0eS9jbGkvYmxvYi9tYXN0ZXIvZG9jcy9hdXRvbGlua2luZy5tZCcsXG4gICAgICApO1xuICAgICAgX3dhcm5lZE1pc3NpbmdOYXRpdmVBbmltYXRlZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjb25maWcudXNlTmF0aXZlRHJpdmVyIHx8IGZhbHNlO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1EYXRhVHlwZSh2YWx1ZTogbnVtYmVyIHwgc3RyaW5nKTogbnVtYmVyIHwgc3RyaW5nIHtcbiAgLy8gQ2hhbmdlIHRoZSBzdHJpbmcgdHlwZSB0byBudW1iZXIgdHlwZSBzbyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgbG9naWMgaW5cbiAgLy8gaU9TIGFuZCBBbmRyb2lkIHBsYXRmb3JtXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICgvZGVnJC8udGVzdCh2YWx1ZSkpIHtcbiAgICBjb25zdCBkZWdyZWVzID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcbiAgICBjb25zdCByYWRpYW5zID0gKGRlZ3JlZXMgKiBNYXRoLlBJKSAvIDE4MC4wO1xuICAgIHJldHVybiByYWRpYW5zO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQVBJLFxuICBpc1N1cHBvcnRlZENvbG9yU3R5bGVQcm9wLFxuICBpc1N1cHBvcnRlZFN0eWxlUHJvcCxcbiAgaXNTdXBwb3J0ZWRUcmFuc2Zvcm1Qcm9wLFxuICBpc1N1cHBvcnRlZEludGVycG9sYXRpb25QYXJhbSxcbiAgYWRkV2hpdGVsaXN0ZWRTdHlsZVByb3AsXG4gIGFkZFdoaXRlbGlzdGVkVHJhbnNmb3JtUHJvcCxcbiAgYWRkV2hpdGVsaXN0ZWRJbnRlcnBvbGF0aW9uUGFyYW0sXG4gIHZhbGlkYXRlU3R5bGVzLFxuICB2YWxpZGF0ZVRyYW5zZm9ybSxcbiAgdmFsaWRhdGVJbnRlcnBvbGF0aW9uLFxuICBnZW5lcmF0ZU5ld05vZGVUYWcsXG4gIGdlbmVyYXRlTmV3QW5pbWF0aW9uSWQsXG4gIGFzc2VydE5hdGl2ZUFuaW1hdGVkTW9kdWxlLFxuICBzaG91bGRVc2VOYXRpdmVEcml2ZXIsXG4gIHRyYW5zZm9ybURhdGFUeXBlLFxuICAvLyAkRmxvd0V4cGVjdGVkRXJyb3JbdW5zYWZlLWdldHRlcnMtc2V0dGVyc10gLSB1bnNhZmUgZ2V0dGVyIGxpbnQgc3VwcHJlc2lvblxuICAvLyAkRmxvd0V4cGVjdGVkRXJyb3JbbWlzc2luZy10eXBlLWFyZ10gLSB1bnNhZmUgZ2V0dGVyIGxpbnQgc3VwcHJlc2lvblxuICBnZXQgbmF0aXZlRXZlbnRFbWl0dGVyKCk6IE5hdGl2ZUV2ZW50RW1pdHRlciB7XG4gICAgaWYgKCFuYXRpdmVFdmVudEVtaXR0ZXIpIHtcbiAgICAgIG5hdGl2ZUV2ZW50RW1pdHRlciA9IG5ldyBOYXRpdmVFdmVudEVtaXR0ZXIoXG4gICAgICAgIC8vIFQ4ODcxNTA2MzogTmF0aXZlRXZlbnRFbWl0dGVyIG9ubHkgdXNlZCB0aGlzIHBhcmFtZXRlciBvbiBpT1MuIE5vdyBpdCB1c2VzIGl0IG9uIGFsbCBwbGF0Zm9ybXMsIHNvIHRoaXMgY29kZSB3YXMgbW9kaWZpZWQgYXV0b21hdGljYWxseSB0byBwcmVzZXJ2ZSBpdHMgYmVoYXZpb3JcbiAgICAgICAgLy8gSWYgeW91IHdhbnQgdG8gdXNlIHRoZSBuYXRpdmUgbW9kdWxlIG9uIG90aGVyIHBsYXRmb3JtcywgcGxlYXNlIHJlbW92ZSB0aGlzIGNvbmRpdGlvbiBhbmQgdGVzdCBpdHMgYmVoYXZpb3JcbiAgICAgICAgUGxhdGZvcm0uT1MgIT09ICdpb3MnID8gbnVsbCA6IE5hdGl2ZUFuaW1hdGVkTW9kdWxlLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG5hdGl2ZUV2ZW50RW1pdHRlcjtcbiAgfSxcbn07XG4iXSwibWFwcGluZ3MiOiI7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQUlBLElBQU1BLG9CQUFvQixHQUN4QkMsaUJBQVEs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