f9604d4771d6a620ae70aa54a99bec8c
'use strict';

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return _extendStatics(d, b);
  };
  return function (d, b) {
    _extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign = this && this.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var nullthrows_1 = __importDefault(require("nullthrows"));
var react_1 = __importDefault(require("react"));
var react_native_1 = require("react-native");
var IOSCheckBoxNativeComponent_1 = __importDefault(require("./IOSCheckBoxNativeComponent"));
var setAndForwardRef_1 = __importDefault(require("react-native/Libraries/Utilities/setAndForwardRef"));
var CheckBox = function (_super) {
  __extends(CheckBox, _super);
  function CheckBox() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._nativeRef = null;
    _this._setNativeRef = setAndForwardRef_1.default({
      getForwardedRef: function getForwardedRef() {
        return _this.props.forwardedRef;
      },
      setLocalRef: function setLocalRef(ref) {
        _this._nativeRef = ref;
      }
    });
    _this._onChange = function (event) {
      var _a = _this.props,
        onValueChange = _a.onValueChange,
        onChange = _a.onChange;
      var value = event.nativeEvent.value;
      nullthrows_1.default(_this._nativeRef).setNativeProps({
        value: value
      });
      onChange && onChange(event);
      onValueChange && onValueChange(value);
    };
    return _this;
  }
  CheckBox.prototype.render = function () {
    var _a = this.props,
      accessible = _a.accessible,
      style = _a.style,
      onValueChange = _a.onValueChange,
      disabled = _a.disabled,
      value = _a.value,
      testID = _a.testID,
      props = __rest(_a, ["accessible", "style", "onValueChange", "disabled", "value", "testID"]);
    return react_1.default.createElement(react_native_1.View, {
      testID: testID,
      pointerEvents: disabled ? 'none' : 'auto',
      accessible: accessible != null ? accessible : true,
      accessibilityRole: "checkbox",
      accessibilityState: {
        checked: value || false,
        disabled: disabled || false
      },
      accessibilityValue: {
        text: value || false ? 'on' : 'off'
      }
    }, react_1.default.createElement(IOSCheckBoxNativeComponent_1.default, __assign({}, props, {
      value: value,
      style: [styles.rctCheckBox, style],
      ref: this._setNativeRef,
      onValueChange: this._onChange
    })));
  };
  return CheckBox;
}(react_1.default.Component);
var styles = react_native_1.StyleSheet.create({
  rctCheckBox: {
    height: 32,
    width: 32,
    backgroundColor: 'transparent'
  }
});
var CheckBoxWithRef = react_1.default.forwardRef(function CheckBoxWithRef(props, ref) {
  return react_1.default.createElement(CheckBox, __assign({}, props, {
    forwardedRef: ref
  }));
});
exports.default = CheckBoxWithRef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,