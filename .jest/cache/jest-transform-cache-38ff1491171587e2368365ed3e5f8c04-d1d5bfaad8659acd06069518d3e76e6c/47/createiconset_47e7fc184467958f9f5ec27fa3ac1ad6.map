{"version":3,"names":["NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","default","IconNamePropType","PropTypes","oneOf","Object","keys","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","children","glyph","String","fromCodePoint","styleDefaults","fontSize","styleOverrides","fontWeight","PureComponent","propTypes","allowFontScaling","bool","number","any","node","defaultProps","imageSourceCache","createIconSourceCache","resolveGlyph","getImageSourceSync","ensureNativeModuleAvailable","processedColor","processColor","cacheKey","has","get","imagePath","getImageForFontSync","value","uri","scale","PixelRatio","setValue","error","setError","getImageSource","getImageForFont","loadFont","file","OS","Error","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button","createIconButtonComponent"],"sources":["create-icon-set.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    root = null;\n\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text selectable={false} {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"],"mappings":"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"}