0023513ff77a898a144e1f5d068fc431
module.exports = {
  get BatchedBridge() {
    return require('../BatchedBridge/BatchedBridge');
  },
  get ExceptionsManager() {
    return require('../Core/ExceptionsManager');
  },
  get Platform() {
    return require('../Utilities/Platform');
  },
  get RCTEventEmitter() {
    return require('../EventEmitter/RCTEventEmitter');
  },
  get ReactNativeViewConfigRegistry() {
    return require('../Renderer/shims/ReactNativeViewConfigRegistry');
  },
  get TextInputState() {
    return require('../Components/TextInput/TextInputState');
  },
  get UIManager() {
    return require('../ReactNative/UIManager');
  },
  get deepDiffer() {
    return require('../Utilities/differ/deepDiffer');
  },
  get deepFreezeAndThrowOnMutationInDev() {
    return require('../Utilities/deepFreezeAndThrowOnMutationInDev');
  },
  get flattenStyle() {
    return require('../StyleSheet/flattenStyle');
  },
  get ReactFiberErrorDialog() {
    return require('../Core/ReactFiberErrorDialog').default;
  },
  get legacySendAccessibilityEvent() {
    return require('../Components/AccessibilityInfo/legacySendAccessibilityEvent');
  },
  get RawEventEmitter() {
    return require('../Core/RawEventEmitter').default;
  },
  get CustomEvent() {
    return require('../Events/CustomEvent').default;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQmF0Y2hlZEJyaWRnZSIsInJlcXVpcmUiLCJFeGNlcHRpb25zTWFuYWdlciIsIlBsYXRmb3JtIiwiUkNURXZlbnRFbWl0dGVyIiwiUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnkiLCJUZXh0SW5wdXRTdGF0ZSIsIlVJTWFuYWdlciIsImRlZXBEaWZmZXIiLCJkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYiLCJmbGF0dGVuU3R5bGUiLCJSZWFjdEZpYmVyRXJyb3JEaWFsb2ciLCJkZWZhdWx0IiwibGVnYWN5U2VuZEFjY2Vzc2liaWxpdHlFdmVudCIsIlJhd0V2ZW50RW1pdHRlciIsIkN1c3RvbUV2ZW50Il0sInNvdXJjZXMiOlsiUmVhY3ROYXRpdmVQcml2YXRlSW50ZXJmYWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG5pbXBvcnQgdHlwZW9mIEJhdGNoZWRCcmlkZ2UgZnJvbSAnLi4vQmF0Y2hlZEJyaWRnZS9CYXRjaGVkQnJpZGdlJztcbmltcG9ydCB0eXBlb2YgRXhjZXB0aW9uc01hbmFnZXIgZnJvbSAnLi4vQ29yZS9FeGNlcHRpb25zTWFuYWdlcic7XG5pbXBvcnQgdHlwZW9mIFBsYXRmb3JtIGZyb20gJy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5pbXBvcnQgdHlwZW9mIFJDVEV2ZW50RW1pdHRlciBmcm9tICcuLi9FdmVudEVtaXR0ZXIvUkNURXZlbnRFbWl0dGVyJztcbmltcG9ydCB0eXBlb2YgUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnkgZnJvbSAnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnknO1xuaW1wb3J0IHR5cGVvZiBUZXh0SW5wdXRTdGF0ZSBmcm9tICcuLi9Db21wb25lbnRzL1RleHRJbnB1dC9UZXh0SW5wdXRTdGF0ZSc7XG5pbXBvcnQgdHlwZW9mIFVJTWFuYWdlciBmcm9tICcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuaW1wb3J0IHR5cGVvZiBkZWVwRGlmZmVyIGZyb20gJy4uL1V0aWxpdGllcy9kaWZmZXIvZGVlcERpZmZlcic7XG5pbXBvcnQgdHlwZW9mIGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldiBmcm9tICcuLi9VdGlsaXRpZXMvZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2JztcbmltcG9ydCB0eXBlb2YgZmxhdHRlblN0eWxlIGZyb20gJy4uL1N0eWxlU2hlZXQvZmxhdHRlblN0eWxlJztcbmltcG9ydCB7dHlwZSBEYW5nZXJvdXNseUltcHJlY2lzZVN0eWxlUHJvcH0gZnJvbSAnLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCB0eXBlb2YgUmVhY3RGaWJlckVycm9yRGlhbG9nIGZyb20gJy4uL0NvcmUvUmVhY3RGaWJlckVycm9yRGlhbG9nJztcbmltcG9ydCB0eXBlb2YgbGVnYWN5U2VuZEFjY2Vzc2liaWxpdHlFdmVudCBmcm9tICcuLi9Db21wb25lbnRzL0FjY2Vzc2liaWxpdHlJbmZvL2xlZ2FjeVNlbmRBY2Nlc3NpYmlsaXR5RXZlbnQnO1xuaW1wb3J0IHR5cGVvZiBSYXdFdmVudEVtaXR0ZXIgZnJvbSAnLi4vQ29yZS9SYXdFdmVudEVtaXR0ZXInO1xuaW1wb3J0IHR5cGVvZiBDdXN0b21FdmVudCBmcm9tICcuLi9FdmVudHMvQ3VzdG9tRXZlbnQnO1xuXG4vLyBmbG93bGludCB1bnNhZmUtZ2V0dGVycy1zZXR0ZXJzOm9mZlxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldCBCYXRjaGVkQnJpZGdlKCk6IEJhdGNoZWRCcmlkZ2Uge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9CYXRjaGVkQnJpZGdlL0JhdGNoZWRCcmlkZ2UnKTtcbiAgfSxcbiAgZ2V0IEV4Y2VwdGlvbnNNYW5hZ2VyKCk6IEV4Y2VwdGlvbnNNYW5hZ2VyIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29yZS9FeGNlcHRpb25zTWFuYWdlcicpO1xuICB9LFxuICBnZXQgUGxhdGZvcm0oKTogUGxhdGZvcm0ge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9VdGlsaXRpZXMvUGxhdGZvcm0nKTtcbiAgfSxcbiAgZ2V0IFJDVEV2ZW50RW1pdHRlcigpOiBSQ1RFdmVudEVtaXR0ZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9FdmVudEVtaXR0ZXIvUkNURXZlbnRFbWl0dGVyJyk7XG4gIH0sXG4gIGdldCBSZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeSgpOiBSZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5Jyk7XG4gIH0sXG4gIGdldCBUZXh0SW5wdXRTdGF0ZSgpOiBUZXh0SW5wdXRTdGF0ZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvVGV4dElucHV0L1RleHRJbnB1dFN0YXRlJyk7XG4gIH0sXG4gIGdldCBVSU1hbmFnZXIoKTogVUlNYW5hZ2VyIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vUmVhY3ROYXRpdmUvVUlNYW5hZ2VyJyk7XG4gIH0sXG4gIGdldCBkZWVwRGlmZmVyKCk6IGRlZXBEaWZmZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9VdGlsaXRpZXMvZGlmZmVyL2RlZXBEaWZmZXInKTtcbiAgfSxcbiAgZ2V0IGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldigpOiBkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXY8XG4gICAgey4uLn0gfCBBcnJheTxtaXhlZD4sXG4gID4ge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9VdGlsaXRpZXMvZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2Jyk7XG4gIH0sXG4gIGdldCBmbGF0dGVuU3R5bGUoKTogZmxhdHRlblN0eWxlPERhbmdlcm91c2x5SW1wcmVjaXNlU3R5bGVQcm9wPiB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvZmxhdHRlblN0eWxlJyk7XG4gIH0sXG4gIGdldCBSZWFjdEZpYmVyRXJyb3JEaWFsb2coKTogUmVhY3RGaWJlckVycm9yRGlhbG9nIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29yZS9SZWFjdEZpYmVyRXJyb3JEaWFsb2cnKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgbGVnYWN5U2VuZEFjY2Vzc2liaWxpdHlFdmVudCgpOiBsZWdhY3lTZW5kQWNjZXNzaWJpbGl0eUV2ZW50IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9BY2Nlc3NpYmlsaXR5SW5mby9sZWdhY3lTZW5kQWNjZXNzaWJpbGl0eUV2ZW50Jyk7XG4gIH0sXG4gIGdldCBSYXdFdmVudEVtaXR0ZXIoKTogUmF3RXZlbnRFbWl0dGVyIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29yZS9SYXdFdmVudEVtaXR0ZXInKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgQ3VzdG9tRXZlbnQoKTogQ3VzdG9tRXZlbnQge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9FdmVudHMvQ3VzdG9tRXZlbnQnKS5kZWZhdWx0O1xuICB9LFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBMkJBQSxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmLElBQUlDLGFBQWEsR0FBa0I7SUFDakMsT0FBT0MsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO0VBQ2xELENBQUM7RUFDRCxJQUFJQyxpQkFBaUIsR0FBc0I7SUFDekMsT0FBT0QsT0FBTyxDQUFDLDJCQUEyQixDQUFDO0VBQzdDLENBQUM7RUFDRCxJQUFJRSxRQUFRLEdBQWE7SUFDdkIsT0FBT0YsT0FBTyxDQUFDLHVCQUF1QixDQUFDO0VBQ3pDLENBQUM7RUFDRCxJQUFJRyxlQUFlLEdBQW9CO0lBQ3JDLE9BQU9ILE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQztFQUNuRCxDQUFDO0VBQ0QsSUFBSUksNkJBQTZCLEdBQWtDO0lBQ2pFLE9BQU9KLE9BQU8sQ0FBQyxpREFBaUQsQ0FBQztFQUNuRSxDQUFDO0VBQ0QsSUFBSUssY0FBYyxHQUFtQjtJQUNuQyxPQUFPTCxPQUFPLENBQUMsd0NBQXdDLENBQUM7RUFDMUQsQ0FBQztFQUNELElBQUlNLFNBQVMsR0FBYztJQUN6QixPQUFPTixPQUFPLENBQUMsMEJBQTBCLENBQUM7RUFDNUMsQ0FBQztFQUNELElBQUlPLFVBQVUsR0FBZTtJQUMzQixPQUFPUCxPQUFPLENBQUMsZ0NBQWdDLENBQUM7RUFDbEQsQ0FBQztFQUNELElBQUlRLGlDQUFpQyxHQUVuQztJQUNBLE9BQU9SLE9BQU8sQ0FBQyxnREFBZ0QsQ0FBQztFQUNsRSxDQUFDO0VBQ0QsSUFBSVMsWUFBWSxHQUFnRDtJQUM5RCxPQUFPVCxPQUFPLENBQUMsNEJBQTRCLENBQUM7RUFDOUMsQ0FBQztFQUNELElBQUlVLHFCQUFxQixHQUEwQjtJQUNqRCxPQUFPVixPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQ1csT0FBTztFQUN6RCxDQUFDO0VBQ0QsSUFBSUMsNEJBQTRCLEdBQWlDO0lBQy9ELE9BQU9aLE9BQU8sQ0FBQyw4REFBOEQsQ0FBQztFQUNoRixDQUFDO0VBQ0QsSUFBSWEsZUFBZSxHQUFvQjtJQUNyQyxPQUFPYixPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQ1csT0FBTztFQUNuRCxDQUFDO0VBQ0QsSUFBSUcsV0FBVyxHQUFnQjtJQUM3QixPQUFPZCxPQUFPLENBQUMsdUJBQXVCLENBQUMsQ0FBQ1csT0FBTztFQUNqRDtBQUNGLENBQUMifQ==