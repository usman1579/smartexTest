d7eab7cc8eb1212d96289ba74985b609
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNative2 = require("@testing-library/react-native");
var _FloatingButton = _interopRequireDefault(require("../FloatingButton"));
var _enzyme = require("enzyme");
var _reducer = require("../../../redux/reducer");
var _jsxRuntime = require("react/jsx-runtime");
describe('Floating Button', function () {
  it('renders correctly on Main Screen', function () {
    var _render = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {})),
      getByTestId = _render.getByTestId;
    expect(getByTestId('add')).toBeTruthy();
  });
  it('calls navigation.navigate when pressed', function () {
    var data = {
      id: 1,
      name: 'Test',
      description: 'here is description',
      date: new Date()
    };
    var navigation = {
      navigate: jest.fn()
    };
    var _render2 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {
        navigation: navigation,
        onPress: function onPress() {
          return navigation.navigate('Detail', {
            item: data,
            screen: 'Add Item'
          });
        }
      })),
      getByTestId = _render2.getByTestId;
    var button = getByTestId('floating-button');
    _reactNative2.fireEvent.press(button);
    expect(navigation.navigate).toHaveBeenCalledWith('Detail', {
      item: data,
      screen: 'Add Item'
    });
  });
  it('renders correctly on Detail Screen with Tick Icon', function () {
    var _render3 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {
        type: 'done'
      })),
      getByTestId = _render3.getByTestId;
    expect(getByTestId('checkmark-outline')).toBeTruthy();
  });
  it('calls onPressAddData when pressed and dispatches addDataToList action', function () {
    var onPressAddData;
    var title = 'Test Title';
    var description = 'Test Description';
    var date = new Date();
    var item = {
      check: true,
      id: '1'
    };
    var navigation = {
      goBack: jest.fn()
    };
    var dispatch = jest.fn();
    beforeEach(function () {
      onPressAddData = jest.fn(function () {
        dispatch((0, _reducer.addDataToList)({
          title: title,
          description: description,
          date: date,
          check: item.chek || false,
          id: (item == null ? void 0 : item.id) || uuid.v4()
        }));
        navigation.goBack();
      });
    });
    var _render4 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {
        navigation: navigation,
        onPress: onPressAddData,
        type: "done",
        title: title,
        description: description,
        date: date,
        item: item,
        dispatch: dispatch
      })),
      getByTestId = _render4.getByTestId;
    var button = getByTestId('floating-button');
    _reactNative2.fireEvent.press(button);
    expect(onPressAddData).toHaveBeenCalled();
    expect(dispatch).toHaveBeenCalledWith((0, _reducer.addDataToList)({
      title: title,
      description: description,
      date: date,
      check: item.chek || false,
      id: (item == null ? void 0 : item.id) || uuid.v4()
    }));
    expect(navigation.goBack).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,