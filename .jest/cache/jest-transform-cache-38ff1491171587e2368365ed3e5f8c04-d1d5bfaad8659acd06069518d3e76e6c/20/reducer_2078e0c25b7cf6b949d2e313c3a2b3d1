27a6cadbc30d95f78e5830bb8ac26c6f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteItem = exports.default = exports.addDataToList = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _immutabilityHelper = _interopRequireDefault(require("immutability-helper"));
var addDataToList = function addDataToList(val) {
  return {
    type: 'DATA_LIST',
    payload: val
  };
};
exports.addDataToList = addDataToList;
var deleteItem = function deleteItem(val) {
  return {
    type: 'DELETE_ITEM',
    payload: val
  };
};
exports.deleteItem = deleteItem;
var InitialState = {
  dataList: []
};
var reducer = function reducer() {
  var _state$dataList, _state$dataList2;
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : InitialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;
  switch (action.type) {
    case 'DATA_LIST':
      var index = (_state$dataList = state.dataList) == null ? void 0 : _state$dataList.findIndex(function (p) {
        return p.id == action.payload.id;
      });
      if (index == -1) {
        return Object.assign({}, state, {
          dataList: [].concat((0, _toConsumableArray2.default)(state.dataList), [action.payload])
        });
      } else {
        return (0, _immutabilityHelper.default)(state, {
          dataList: (0, _defineProperty2.default)({}, index, {
            $set: action.payload
          })
        });
      }
    case 'DELETE_ITEM':
      var newList = (_state$dataList2 = state.dataList) == null ? void 0 : _state$dataList2.filter(function (p) {
        return p.id !== action.payload.id;
      });
      return Object.assign({}, state, {
        dataList: newList
      });
    default:
      return state;
  }
};
var _default = reducer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhZGREYXRhVG9MaXN0IiwidmFsIiwidHlwZSIsInBheWxvYWQiLCJkZWxldGVJdGVtIiwiSW5pdGlhbFN0YXRlIiwiZGF0YUxpc3QiLCJyZWR1Y2VyIiwic3RhdGUiLCJhY3Rpb24iLCJpbmRleCIsImZpbmRJbmRleCIsInAiLCJpZCIsInVwZGF0ZSIsIiRzZXQiLCJuZXdMaXN0IiwiZmlsdGVyIl0sInNvdXJjZXMiOlsicmVkdWNlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXBkYXRlIGZyb20gJ2ltbXV0YWJpbGl0eS1oZWxwZXInO1xuXG5leHBvcnQgY29uc3QgYWRkRGF0YVRvTGlzdCA9IHZhbCA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0RBVEFfTElTVCcsXG4gICAgcGF5bG9hZDp2YWwsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZGVsZXRlSXRlbSA9IHZhbCA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0RFTEVURV9JVEVNJyxcbiAgICBwYXlsb2FkOnZhbCxcbiAgfTtcbn07XG5cbmNvbnN0IEluaXRpYWxTdGF0ZSA9IHtcbiAgZGF0YUxpc3Q6IFtdLFxufTtcblxuY29uc3QgcmVkdWNlciA9IChzdGF0ZSA9IEluaXRpYWxTdGF0ZSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlICdEQVRBX0xJU1QnOlxuICAgICAgbGV0IGluZGV4ID0gc3RhdGUuZGF0YUxpc3Q/LmZpbmRJbmRleChwID0+IHAuaWQgPT0gYWN0aW9uLnBheWxvYWQuaWQpO1xuICAgICAgaWYgKGluZGV4ID09IC0xKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgZGF0YUxpc3Q6IFsuLi5zdGF0ZS5kYXRhTGlzdCwgYWN0aW9uLnBheWxvYWRdLFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZShzdGF0ZSwge1xuICAgICAgICAgIGRhdGFMaXN0OiB7XG4gICAgICAgICAgICBbaW5kZXhdOiB7JHNldDogYWN0aW9uLnBheWxvYWR9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgY2FzZSAnREVMRVRFX0lURU0nOlxuICAgICAgbGV0IG5ld0xpc3QgPSBzdGF0ZS5kYXRhTGlzdD8uZmlsdGVyKHAgPT4gcC5pZCAhPT0gYWN0aW9uLnBheWxvYWQuaWQpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGRhdGFMaXN0OiAgbmV3TGlzdFxuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHJlZHVjZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUVPLElBQU1BLGFBQWEsR0FBRyxTQUFoQkEsYUFBYSxDQUFHQyxHQUFHLEVBQUk7RUFDbEMsT0FBTztJQUNMQyxJQUFJLEVBQUUsV0FBVztJQUNqQkMsT0FBTyxFQUFDRjtFQUNWLENBQUM7QUFDSCxDQUFDO0FBQUM7QUFFSyxJQUFNRyxVQUFVLEdBQUcsU0FBYkEsVUFBVSxDQUFHSCxHQUFHLEVBQUk7RUFDL0IsT0FBTztJQUNMQyxJQUFJLEVBQUUsYUFBYTtJQUNuQkMsT0FBTyxFQUFDRjtFQUNWLENBQUM7QUFDSCxDQUFDO0FBQUM7QUFFRixJQUFNSSxZQUFZLEdBQUc7RUFDbkJDLFFBQVEsRUFBRTtBQUNaLENBQUM7QUFFRCxJQUFNQyxPQUFPLEdBQUcsU0FBVkEsT0FBTyxHQUFxQztFQUFBO0VBQUEsSUFBakNDLEtBQUssdUVBQUdILFlBQVk7RUFBQSxJQUFFSSxNQUFNO0VBQzNDLFFBQVFBLE1BQU0sQ0FBQ1AsSUFBSTtJQUNqQixLQUFLLFdBQVc7TUFDZCxJQUFJUSxLQUFLLHNCQUFHRixLQUFLLENBQUNGLFFBQVEscUJBQWQsZ0JBQWdCSyxTQUFTLENBQUMsVUFBQUMsQ0FBQztRQUFBLE9BQUlBLENBQUMsQ0FBQ0MsRUFBRSxJQUFJSixNQUFNLENBQUNOLE9BQU8sQ0FBQ1UsRUFBRTtNQUFBLEVBQUM7TUFDckUsSUFBSUgsS0FBSyxJQUFJLENBQUMsQ0FBQyxFQUFFO1FBQ2YseUJBQ0tGLEtBQUs7VUFDUkYsUUFBUSw2Q0FBTUUsS0FBSyxDQUFDRixRQUFRLElBQUVHLE1BQU0sQ0FBQ04sT0FBTztRQUFDO01BRWpELENBQUMsTUFBTTtRQUNMLE9BQU8sSUFBQVcsMkJBQU0sRUFBQ04sS0FBSyxFQUFFO1VBQ25CRixRQUFRLG9DQUNMSSxLQUFLLEVBQUc7WUFBQ0ssSUFBSSxFQUFFTixNQUFNLENBQUNOO1VBQU8sQ0FBQztRQUVuQyxDQUFDLENBQUM7TUFDSjtJQUVGLEtBQUssYUFBYTtNQUNoQixJQUFJYSxPQUFPLHVCQUFHUixLQUFLLENBQUNGLFFBQVEscUJBQWQsaUJBQWdCVyxNQUFNLENBQUMsVUFBQUwsQ0FBQztRQUFBLE9BQUlBLENBQUMsQ0FBQ0MsRUFBRSxLQUFLSixNQUFNLENBQUNOLE9BQU8sQ0FBQ1UsRUFBRTtNQUFBLEVBQUM7TUFDckUseUJBQ0tMLEtBQUs7UUFDUkYsUUFBUSxFQUFHVTtNQUFPO0lBR3RCO01BQ0UsT0FBT1IsS0FBSztFQUFDO0FBRW5CLENBQUM7QUFBQyxlQUVhRCxPQUFPO0FBQUEifQ==