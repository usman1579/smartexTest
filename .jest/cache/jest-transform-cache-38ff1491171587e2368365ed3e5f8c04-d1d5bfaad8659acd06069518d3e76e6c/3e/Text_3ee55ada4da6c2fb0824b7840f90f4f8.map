{"version":3,"names":["Text","React","forwardRef","props","forwardedRef","accessible","allowFontScaling","ellipsizeMode","onLongPress","onPress","onPressIn","onPressOut","onResponderGrant","onResponderMove","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onStartShouldSetResponder","pressRetentionOffset","suppressHighlighting","restProps","useState","isHighlighted","setHighlighted","_disabled","disabled","accessibilityState","_accessibilityState","isPressable","initialized","useLazyInitialization","config","useMemo","pressRectOffset","event","onResponderTerminationRequest_DEPRECATED","onStartShouldSetResponder_DEPRECATED","eventHandlers","usePressability","eventHandlersForText","onClick","selectionColor","processColor","style","__DEV__","PressabilityDebug","isEnabled","StyleSheet","compose","color","numberOfLines","console","error","hasTextAncestor","useContext","TextAncestor","_accessible","Platform","select","ios","default","displayName","newValue","oldValue","setValue","module","exports"],"sources":["Text.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {PressEvent} from '../Types/CoreEventTypes';\n\nimport Platform from '../Utilities/Platform';\nimport * as PressabilityDebug from '../Pressability/PressabilityDebug';\nimport usePressability from '../Pressability/usePressability';\nimport StyleSheet from '../StyleSheet/StyleSheet';\nimport processColor from '../StyleSheet/processColor';\nimport TextAncestor from './TextAncestor';\nimport {NativeText, NativeVirtualText} from './TextNativeComponent';\nimport {type TextProps} from './TextProps';\nimport * as React from 'react';\nimport {useContext, useMemo, useState} from 'react';\n\n/**\n * Text is the fundamental component for displaying text.\n *\n * @see https://reactnative.dev/docs/text\n */\nconst Text: React.AbstractComponent<\n  TextProps,\n  React.ElementRef<typeof NativeText | typeof NativeVirtualText>,\n> = React.forwardRef((props: TextProps, forwardedRef) => {\n  const {\n    accessible,\n    allowFontScaling,\n    ellipsizeMode,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onResponderGrant,\n    onResponderMove,\n    onResponderRelease,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onStartShouldSetResponder,\n    pressRetentionOffset,\n    suppressHighlighting,\n    ...restProps\n  } = props;\n\n  const [isHighlighted, setHighlighted] = useState(false);\n\n  const _disabled =\n    restProps.disabled != null\n      ? restProps.disabled\n      : props.accessibilityState?.disabled;\n  const _accessibilityState =\n    _disabled !== props.accessibilityState?.disabled\n      ? {...props.accessibilityState, disabled: _disabled}\n      : props.accessibilityState;\n\n  const isPressable =\n    (onPress != null ||\n      onLongPress != null ||\n      onStartShouldSetResponder != null) &&\n    _disabled !== true;\n\n  const initialized = useLazyInitialization(isPressable);\n  const config = useMemo(\n    () =>\n      initialized\n        ? {\n            disabled: !isPressable,\n            pressRectOffset: pressRetentionOffset,\n            onLongPress,\n            onPress,\n            onPressIn(event: PressEvent) {\n              setHighlighted(!suppressHighlighting);\n              onPressIn?.(event);\n            },\n            onPressOut(event: PressEvent) {\n              setHighlighted(false);\n              onPressOut?.(event);\n            },\n            onResponderTerminationRequest_DEPRECATED:\n              onResponderTerminationRequest,\n            onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder,\n          }\n        : null,\n    [\n      initialized,\n      isPressable,\n      pressRetentionOffset,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      onResponderTerminationRequest,\n      onStartShouldSetResponder,\n      suppressHighlighting,\n    ],\n  );\n\n  const eventHandlers = usePressability(config);\n  const eventHandlersForText = useMemo(\n    () =>\n      eventHandlers == null\n        ? null\n        : {\n            onResponderGrant(event: PressEvent) {\n              eventHandlers.onResponderGrant(event);\n              if (onResponderGrant != null) {\n                onResponderGrant(event);\n              }\n            },\n            onResponderMove(event: PressEvent) {\n              eventHandlers.onResponderMove(event);\n              if (onResponderMove != null) {\n                onResponderMove(event);\n              }\n            },\n            onResponderRelease(event: PressEvent) {\n              eventHandlers.onResponderRelease(event);\n              if (onResponderRelease != null) {\n                onResponderRelease(event);\n              }\n            },\n            onResponderTerminate(event: PressEvent) {\n              eventHandlers.onResponderTerminate(event);\n              if (onResponderTerminate != null) {\n                onResponderTerminate(event);\n              }\n            },\n            onClick: eventHandlers.onClick,\n            onResponderTerminationRequest:\n              eventHandlers.onResponderTerminationRequest,\n            onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder,\n          },\n    [\n      eventHandlers,\n      onResponderGrant,\n      onResponderMove,\n      onResponderRelease,\n      onResponderTerminate,\n    ],\n  );\n\n  // TODO: Move this processing to the view configuration.\n  const selectionColor =\n    restProps.selectionColor == null\n      ? null\n      : processColor(restProps.selectionColor);\n\n  let style = restProps.style;\n  if (__DEV__) {\n    if (PressabilityDebug.isEnabled() && onPress != null) {\n      style = StyleSheet.compose(restProps.style, {\n        color: 'magenta',\n      });\n    }\n  }\n\n  let numberOfLines = restProps.numberOfLines;\n  if (numberOfLines != null && !(numberOfLines >= 0)) {\n    console.error(\n      `'numberOfLines' in <Text> must be a non-negative number, received: ${numberOfLines}. The value will be set to 0.`,\n    );\n    numberOfLines = 0;\n  }\n\n  const hasTextAncestor = useContext(TextAncestor);\n\n  const _accessible = Platform.select({\n    ios: accessible !== false,\n    default: accessible,\n  });\n\n  return hasTextAncestor ? (\n    <NativeVirtualText\n      {...restProps}\n      {...eventHandlersForText}\n      isHighlighted={isHighlighted}\n      isPressable={isPressable}\n      numberOfLines={numberOfLines}\n      selectionColor={selectionColor}\n      style={style}\n      ref={forwardedRef}\n    />\n  ) : (\n    <TextAncestor.Provider value={true}>\n      <NativeText\n        {...restProps}\n        {...eventHandlersForText}\n        disabled={_disabled}\n        accessible={_accessible}\n        accessibilityState={_accessibilityState}\n        allowFontScaling={allowFontScaling !== false}\n        ellipsizeMode={ellipsizeMode ?? 'tail'}\n        isHighlighted={isHighlighted}\n        numberOfLines={numberOfLines}\n        selectionColor={selectionColor}\n        style={style}\n        ref={forwardedRef}\n      />\n    </TextAncestor.Provider>\n  );\n});\n\nText.displayName = 'Text';\n\n/**\n * Returns false until the first time `newValue` is true, after which this will\n * always return true. This is necessary to lazily initialize `Pressability` so\n * we do not eagerly create one for every pressable `Text` component.\n */\nfunction useLazyInitialization(newValue: boolean): boolean {\n  const [oldValue, setValue] = useState(newValue);\n  if (!oldValue && newValue) {\n    setValue(newValue);\n  }\n  return oldValue;\n}\n\nmodule.exports = Text;\n"],"mappings":";;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAA+B;AAAA;AAAA;AAAA;AAQ/B,IAAMA,IAGL,GAAGC,KAAK,CAACC,UAAU,CAAC,UAACC,KAAgB,EAAEC,YAAY,EAAK;EAAA;EACvD,IACEC,UAAU,GAgBRF,KAAK,CAhBPE,UAAU;IACVC,gBAAgB,GAedH,KAAK,CAfPG,gBAAgB;IAChBC,aAAa,GAcXJ,KAAK,CAdPI,aAAa;IACbC,WAAW,GAaTL,KAAK,CAbPK,WAAW;IACXC,OAAO,GAYLN,KAAK,CAZPM,OAAO;IACPC,UAAS,GAWPP,KAAK,CAXPO,SAAS;IACTC,WAAU,GAURR,KAAK,CAVPQ,UAAU;IACVC,iBAAgB,GASdT,KAAK,CATPS,gBAAgB;IAChBC,gBAAe,GAQbV,KAAK,CARPU,eAAe;IACfC,mBAAkB,GAOhBX,KAAK,CAPPW,kBAAkB;IAClBC,qBAAoB,GAMlBZ,KAAK,CANPY,oBAAoB;IACpBC,6BAA6B,GAK3Bb,KAAK,CALPa,6BAA6B;IAC7BC,yBAAyB,GAIvBd,KAAK,CAJPc,yBAAyB;IACzBC,oBAAoB,GAGlBf,KAAK,CAHPe,oBAAoB;IACpBC,oBAAoB,GAElBhB,KAAK,CAFPgB,oBAAoB;IACjBC,SAAS,0CACVjB,KAAK;EAET,gBAAwC,IAAAkB,cAAQ,EAAC,KAAK,CAAC;IAAA;IAAhDC,aAAa;IAAEC,cAAc;EAEpC,IAAMC,SAAS,GACbJ,SAAS,CAACK,QAAQ,IAAI,IAAI,GACtBL,SAAS,CAACK,QAAQ,4BAClBtB,KAAK,CAACuB,kBAAkB,qBAAxB,sBAA0BD,QAAQ;EACxC,IAAME,mBAAmB,GACvBH,SAAS,gCAAKrB,KAAK,CAACuB,kBAAkB,qBAAxB,uBAA0BD,QAAQ,sBACxCtB,KAAK,CAACuB,kBAAkB;IAAED,QAAQ,EAAED;EAAS,KACjDrB,KAAK,CAACuB,kBAAkB;EAE9B,IAAME,WAAW,GACf,CAACnB,OAAO,IAAI,IAAI,IACdD,WAAW,IAAI,IAAI,IACnBS,yBAAyB,IAAI,IAAI,KACnCO,SAAS,KAAK,IAAI;EAEpB,IAAMK,WAAW,GAAGC,qBAAqB,CAACF,WAAW,CAAC;EACtD,IAAMG,MAAM,GAAG,IAAAC,aAAO,EACpB;IAAA,OACEH,WAAW,GACP;MACEJ,QAAQ,EAAE,CAACG,WAAW;MACtBK,eAAe,EAAEf,oBAAoB;MACrCV,WAAW,EAAXA,WAAW;MACXC,OAAO,EAAPA,OAAO;MACPC,SAAS,qBAACwB,KAAiB,EAAE;QAC3BX,cAAc,CAAC,CAACJ,oBAAoB,CAAC;QACrCT,UAAS,oBAATA,UAAS,CAAGwB,KAAK,CAAC;MACpB,CAAC;MACDvB,UAAU,sBAACuB,KAAiB,EAAE;QAC5BX,cAAc,CAAC,KAAK,CAAC;QACrBZ,WAAU,oBAAVA,WAAU,CAAGuB,KAAK,CAAC;MACrB,CAAC;MACDC,wCAAwC,EACtCnB,6BAA6B;MAC/BoB,oCAAoC,EAAEnB;IACxC,CAAC,GACD,IAAI;EAAA,GACV,CACEY,WAAW,EACXD,WAAW,EACXV,oBAAoB,EACpBV,WAAW,EACXC,OAAO,EACPC,UAAS,EACTC,WAAU,EACVK,6BAA6B,EAC7BC,yBAAyB,EACzBE,oBAAoB,CACrB,CACF;EAED,IAAMkB,aAAa,GAAG,IAAAC,wBAAe,EAACP,MAAM,CAAC;EAC7C,IAAMQ,oBAAoB,GAAG,IAAAP,aAAO,EAClC;IAAA,OACEK,aAAa,IAAI,IAAI,GACjB,IAAI,GACJ;MACEzB,gBAAgB,4BAACsB,KAAiB,EAAE;QAClCG,aAAa,CAACzB,gBAAgB,CAACsB,KAAK,CAAC;QACrC,IAAItB,iBAAgB,IAAI,IAAI,EAAE;UAC5BA,iBAAgB,CAACsB,KAAK,CAAC;QACzB;MACF,CAAC;MACDrB,eAAe,2BAACqB,KAAiB,EAAE;QACjCG,aAAa,CAACxB,eAAe,CAACqB,KAAK,CAAC;QACpC,IAAIrB,gBAAe,IAAI,IAAI,EAAE;UAC3BA,gBAAe,CAACqB,KAAK,CAAC;QACxB;MACF,CAAC;MACDpB,kBAAkB,8BAACoB,KAAiB,EAAE;QACpCG,aAAa,CAACvB,kBAAkB,CAACoB,KAAK,CAAC;QACvC,IAAIpB,mBAAkB,IAAI,IAAI,EAAE;UAC9BA,mBAAkB,CAACoB,KAAK,CAAC;QAC3B;MACF,CAAC;MACDnB,oBAAoB,gCAACmB,KAAiB,EAAE;QACtCG,aAAa,CAACtB,oBAAoB,CAACmB,KAAK,CAAC;QACzC,IAAInB,qBAAoB,IAAI,IAAI,EAAE;UAChCA,qBAAoB,CAACmB,KAAK,CAAC;QAC7B;MACF,CAAC;MACDM,OAAO,EAAEH,aAAa,CAACG,OAAO;MAC9BxB,6BAA6B,EAC3BqB,aAAa,CAACrB,6BAA6B;MAC7CC,yBAAyB,EAAEoB,aAAa,CAACpB;IAC3C,CAAC;EAAA,GACP,CACEoB,aAAa,EACbzB,iBAAgB,EAChBC,gBAAe,EACfC,mBAAkB,EAClBC,qBAAoB,CACrB,CACF;EAGD,IAAM0B,cAAc,GAClBrB,SAAS,CAACqB,cAAc,IAAI,IAAI,GAC5B,IAAI,GACJ,IAAAC,qBAAY,EAACtB,SAAS,CAACqB,cAAc,CAAC;EAE5C,IAAIE,KAAK,GAAGvB,SAAS,CAACuB,KAAK;EAC3B,IAAIC,OAAO,EAAE;IACX,IAAIC,iBAAiB,CAACC,SAAS,EAAE,IAAIrC,OAAO,IAAI,IAAI,EAAE;MACpDkC,KAAK,GAAGI,mBAAU,CAACC,OAAO,CAAC5B,SAAS,CAACuB,KAAK,EAAE;QAC1CM,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;EACF;EAEA,IAAIC,aAAa,GAAG9B,SAAS,CAAC8B,aAAa;EAC3C,IAAIA,aAAa,IAAI,IAAI,IAAI,EAAEA,aAAa,IAAI,CAAC,CAAC,EAAE;IAClDC,OAAO,CAACC,KAAK,yEAC2DF,aAAa,mCACpF;IACDA,aAAa,GAAG,CAAC;EACnB;EAEA,IAAMG,eAAe,GAAG,IAAAC,gBAAU,EAACC,qBAAY,CAAC;EAEhD,IAAMC,WAAW,GAAGC,iBAAQ,CAACC,MAAM,CAAC;IAClCC,GAAG,EAAEtD,UAAU,KAAK,KAAK;IACzBuD,OAAO,EAAEvD;EACX,CAAC,CAAC;EAEF,OAAOgD,eAAe,GACpB,qBAAC,sCAAiB,oBACZjC,SAAS,EACTmB,oBAAoB;IACxB,aAAa,EAAEjB,aAAc;IAC7B,WAAW,EAAEM,WAAY;IACzB,aAAa,EAAEsB,aAAc;IAC7B,cAAc,EAAET,cAAe;IAC/B,KAAK,EAAEE,KAAM;IACb,GAAG,EAAEvC;EAAa,GAClB,GAEF,qBAAC,qBAAY,CAAC,QAAQ;IAAC,KAAK,EAAE,IAAK;IAAA,UACjC,qBAAC,+BAAU,oBACLgB,SAAS,EACTmB,oBAAoB;MACxB,QAAQ,EAAEf,SAAU;MACpB,UAAU,EAAEgC,WAAY;MACxB,kBAAkB,EAAE7B,mBAAoB;MACxC,gBAAgB,EAAErB,gBAAgB,KAAK,KAAM;MAC7C,aAAa,EAAEC,aAAa,WAAbA,aAAa,GAAI,MAAO;MACvC,aAAa,EAAEe,aAAc;MAC7B,aAAa,EAAE4B,aAAc;MAC7B,cAAc,EAAET,cAAe;MAC/B,KAAK,EAAEE,KAAM;MACb,GAAG,EAAEvC;IAAa;EAClB,EAEL;AACH,CAAC,CAAC;AAEFJ,IAAI,CAAC6D,WAAW,GAAG,MAAM;AAOzB,SAAS/B,qBAAqB,CAACgC,QAAiB,EAAW;EACzD,iBAA6B,IAAAzC,cAAQ,EAACyC,QAAQ,CAAC;IAAA;IAAxCC,QAAQ;IAAEC,QAAQ;EACzB,IAAI,CAACD,QAAQ,IAAID,QAAQ,EAAE;IACzBE,QAAQ,CAACF,QAAQ,CAAC;EACpB;EACA,OAAOC,QAAQ;AACjB;AAEAE,MAAM,CAACC,OAAO,GAAGlE,IAAI"}