5abce15c49816b0c1e80d4505e525abb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Item = void 0;
var _reactNative = require("react-native");
var _react = _interopRequireDefault(require("react"));
var _checkbox = _interopRequireDefault(require("@react-native-community/checkbox"));
var _jsxRuntime = require("react/jsx-runtime");
var Item = function Item(props) {
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.itemContainer,
    testID: "item",
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.checkBox,
      children: (0, _jsxRuntime.jsx)(_checkbox.default, {
        disabled: false,
        value: props.CheckBox,
        onValueChange: props.onValueChange
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      onPress: props.onPressItem,
      style: {
        flex: 5,
        justifyContent: 'center'
      },
      children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.textTitle,
        children: props.title
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.text1,
        children: props.description
      }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.text1,
        children: props.date
      })]
    })]
  });
};
exports.Item = Item;
var styles = _reactNative.StyleSheet.create({
  text1: {
    fontSize: 12,
    fontWeight: '500',
    color: 'grey'
  },
  textTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: 'black'
  },
  itemContainer: {
    height: 80,
    width: '100%',
    flexDirection: 'row',
    marginBottom: 5
  },
  checkBox: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJdGVtIiwicHJvcHMiLCJzdHlsZXMiLCJpdGVtQ29udGFpbmVyIiwiY2hlY2tCb3giLCJDaGVja0JveCIsIm9uVmFsdWVDaGFuZ2UiLCJvblByZXNzSXRlbSIsImZsZXgiLCJqdXN0aWZ5Q29udGVudCIsInRleHRUaXRsZSIsInRpdGxlIiwidGV4dDEiLCJkZXNjcmlwdGlvbiIsImRhdGUiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiY29sb3IiLCJoZWlnaHQiLCJ3aWR0aCIsImZsZXhEaXJlY3Rpb24iLCJtYXJnaW5Cb3R0b20iLCJhbGlnbkl0ZW1zIl0sInNvdXJjZXMiOlsiSXRlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0eWxlU2hlZXQsIFRleHQsIFZpZXcsIFRvdWNoYWJsZU9wYWNpdHl9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENoZWNrQm94IGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L2NoZWNrYm94JztcblxuZXhwb3J0IGNvbnN0IEl0ZW0gPSBwcm9wcyA9PiB7XG4gIHJldHVybiAoXG4gICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5pdGVtQ29udGFpbmVyfSAgdGVzdElEPSdpdGVtJz5cbiAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY2hlY2tCb3h9PlxuICAgICAgICA8Q2hlY2tCb3hcbiAgICAgICAgICBkaXNhYmxlZD17ZmFsc2V9XG4gICAgICAgICAgdmFsdWU9e3Byb3BzLkNoZWNrQm94fVxuICAgICAgICAgIG9uVmFsdWVDaGFuZ2U9e3Byb3BzLm9uVmFsdWVDaGFuZ2V9XG4gICAgICAgIC8+XG4gICAgICA8L1ZpZXc+XG5cbiAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgIG9uUHJlc3M9e3Byb3BzLm9uUHJlc3NJdGVtfVxuICAgICAgICBzdHlsZT17e2ZsZXg6IDUsIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJ319PlxuICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLnRleHRUaXRsZX0+e3Byb3BzLnRpdGxlfTwvVGV4dD5cbiAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy50ZXh0MX0+e3Byb3BzLmRlc2NyaXB0aW9ufTwvVGV4dD5cbiAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy50ZXh0MX0+e3Byb3BzLmRhdGV9PC9UZXh0PlxuICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgIDwvVmlldz5cbiAgKTtcbn07XG5cblxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIHRleHQxOiB7XG4gICAgZm9udFNpemU6IDEyLFxuICAgIGZvbnRXZWlnaHQ6ICc1MDAnLFxuICAgIGNvbG9yOiAnZ3JleScsXG4gIH0sXG4gIHRleHRUaXRsZToge1xuICAgIGZvbnRTaXplOiAxNixcbiAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgY29sb3I6ICdibGFjaycsXG4gIH0sXG4gIGl0ZW1Db250YWluZXI6IHtcbiAgICBoZWlnaHQ6IDgwLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgbWFyZ2luQm90dG9tOiA1LFxuICB9LFxuICBjaGVja0JveDoge1xuICAgIGZsZXg6IDEsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICB9LFxufSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQXdEO0FBRWpELElBQU1BLElBQUksR0FBRyxTQUFQQSxJQUFJLENBQUdDLEtBQUssRUFBSTtFQUMzQixPQUNFLHNCQUFDLGlCQUFJO0lBQUMsS0FBSyxFQUFFQyxNQUFNLENBQUNDLGFBQWM7SUFBRSxNQUFNLEVBQUMsTUFBTTtJQUFBLFdBQy9DLHFCQUFDLGlCQUFJO01BQUMsS0FBSyxFQUFFRCxNQUFNLENBQUNFLFFBQVM7TUFBQSxVQUMzQixxQkFBQyxpQkFBUTtRQUNQLFFBQVEsRUFBRSxLQUFNO1FBQ2hCLEtBQUssRUFBRUgsS0FBSyxDQUFDSSxRQUFTO1FBQ3RCLGFBQWEsRUFBRUosS0FBSyxDQUFDSztNQUFjO0lBQ25DLEVBQ0csRUFFUCxzQkFBQyw2QkFBZ0I7TUFDZixPQUFPLEVBQUVMLEtBQUssQ0FBQ00sV0FBWTtNQUMzQixLQUFLLEVBQUU7UUFBQ0MsSUFBSSxFQUFFLENBQUM7UUFBRUMsY0FBYyxFQUFFO01BQVEsQ0FBRTtNQUFBLFdBQzNDLHFCQUFDLGlCQUFJO1FBQUMsS0FBSyxFQUFFUCxNQUFNLENBQUNRLFNBQVU7UUFBQSxVQUFFVCxLQUFLLENBQUNVO01BQUssRUFBUSxFQUNuRCxxQkFBQyxpQkFBSTtRQUFDLEtBQUssRUFBRVQsTUFBTSxDQUFDVSxLQUFNO1FBQUEsVUFBRVgsS0FBSyxDQUFDWTtNQUFXLEVBQVEsRUFDckQscUJBQUMsaUJBQUk7UUFBQyxLQUFLLEVBQUVYLE1BQU0sQ0FBQ1UsS0FBTTtRQUFBLFVBQUVYLEtBQUssQ0FBQ2E7TUFBSSxFQUFRO0lBQUEsRUFDN0I7RUFBQSxFQUNkO0FBRVgsQ0FBQztBQUFDO0FBSUYsSUFBTVosTUFBTSxHQUFHYSx1QkFBVSxDQUFDQyxNQUFNLENBQUM7RUFDL0JKLEtBQUssRUFBRTtJQUNMSyxRQUFRLEVBQUUsRUFBRTtJQUNaQyxVQUFVLEVBQUUsS0FBSztJQUNqQkMsS0FBSyxFQUFFO0VBQ1QsQ0FBQztFQUNEVCxTQUFTLEVBQUU7SUFDVE8sUUFBUSxFQUFFLEVBQUU7SUFDWkMsVUFBVSxFQUFFLE1BQU07SUFDbEJDLEtBQUssRUFBRTtFQUNULENBQUM7RUFDRGhCLGFBQWEsRUFBRTtJQUNiaUIsTUFBTSxFQUFFLEVBQUU7SUFDVkMsS0FBSyxFQUFFLE1BQU07SUFDYkMsYUFBYSxFQUFFLEtBQUs7SUFDcEJDLFlBQVksRUFBRTtFQUNoQixDQUFDO0VBQ0RuQixRQUFRLEVBQUU7SUFDUkksSUFBSSxFQUFFLENBQUM7SUFDUEMsY0FBYyxFQUFFLFFBQVE7SUFDeEJlLFVBQVUsRUFBRTtFQUNkO0FBQ0YsQ0FBQyxDQUFDIn0=