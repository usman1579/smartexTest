8486c20a8598df8917866916684158c4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNative2 = require("@testing-library/react-native");
var _Header = _interopRequireDefault(require("../Header"));
var _enzyme = require("enzyme");
var _jsxRuntime = require("react/jsx-runtime");
describe('Header', function () {
  it('renders correctly on Menu Header', function () {
    var _render = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Lista de tarefas",
        detail: false
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    expect(getByText('Lista de tarefas')).toBeTruthy();
    expect(getByTestId('menu-icon')).toBeTruthy();
  });
  it('Header render Add Item', function () {
    var _render2 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Add Item",
        detail: true,
        id: null
      })),
      getByText = _render2.getByText,
      getByTestId = _render2.getByTestId;
    expect(getByText('Add Item')).toBeTruthy();
    expect(getByTestId('chevron-back-outline')).toBeTruthy();
  });
  it('Header render Edit Item', function () {
    var _render3 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Edit Item",
        detail: true,
        id: '123'
      })),
      getByText = _render3.getByText,
      getByTestId = _render3.getByTestId;
    expect(getByText('Edit Item')).toBeTruthy();
    expect(getByTestId('chevron-back-outline')).toBeTruthy();
    expect(getByTestId('trash-outline')).toBeTruthy();
  });
  it('calls onPress prop when menu icon is pressed', function () {
    var onPress = jest.fn();
    var _render4 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_Header.default, {
        title: "Test Title",
        onPress: onPress
      })),
      getByTestId = _render4.getByTestId;
    _reactNative2.fireEvent.press(getByTestId('menu-icon'));
    expect(onPress).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwicmVuZGVyIiwiZ2V0QnlUZXh0IiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5Iiwib25QcmVzcyIsImplc3QiLCJmbiIsImZpcmVFdmVudCIsInByZXNzIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbImhlYWRlci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3JlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi4vSGVhZGVyJztcbmltcG9ydCB7c2hhbGxvd30gZnJvbSAnZW56eW1lJztcblxuZGVzY3JpYmUoJ0hlYWRlcicsICgpID0+IHtcblxuICAgIGl0KCdyZW5kZXJzIGNvcnJlY3RseSBvbiBNZW51IEhlYWRlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IHtnZXRCeVRleHQsIGdldEJ5VGVzdElkfSA9IHJlbmRlcig8SGVhZGVyIHRpdGxlPVwiTGlzdGEgZGUgdGFyZWZhc1wiICBkZXRhaWw9e2ZhbHNlfSAvPik7XG4gICAgICBleHBlY3QoZ2V0QnlUZXh0KCdMaXN0YSBkZSB0YXJlZmFzJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnbWVudS1pY29uJykpLnRvQmVUcnV0aHkoKTtcbiAgICB9KTtcblxuICAgIGl0KCAnSGVhZGVyIHJlbmRlciBBZGQgSXRlbScgLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHtnZXRCeVRleHQsIGdldEJ5VGVzdElkfSA9IHJlbmRlcig8SGVhZGVyIHRpdGxlPVwiQWRkIEl0ZW1cIiAgZGV0YWlsPXt0cnVlfSBpZD17bnVsbH0gLz4pO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdBZGQgSXRlbScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnY2hldnJvbi1iYWNrLW91dGxpbmUnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pXG5cbiAgICBpdCggJ0hlYWRlciByZW5kZXIgRWRpdCBJdGVtJyAsICgpID0+IHtcbiAgICAgICAgY29uc3Qge2dldEJ5VGV4dCwgZ2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxIZWFkZXIgdGl0bGU9XCJFZGl0IEl0ZW1cIiAgZGV0YWlsPXt0cnVlfSBpZD17JzEyMyd9IC8+KTtcbiAgICAgIFxuICAgICAgICBleHBlY3QoZ2V0QnlUZXh0KCdFZGl0IEl0ZW0nKSkudG9CZVRydXRoeSgpO1xuICAgICAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2NoZXZyb24tYmFjay1vdXRsaW5lJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCd0cmFzaC1vdXRsaW5lJykpLnRvQmVUcnV0aHkoKTtcblxuICAgIH0pXG5cbiAgICBpdCgnY2FsbHMgb25QcmVzcyBwcm9wIHdoZW4gbWVudSBpY29uIGlzIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBvblByZXNzID0gamVzdC5mbigpO1xuICAgICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8SGVhZGVyIHRpdGxlPVwiVGVzdCBUaXRsZVwiIG9uUHJlc3M9e29uUHJlc3N9IC8+KTtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnbWVudS1pY29uJykpO1xuICAgICAgZXhwZWN0KG9uUHJlc3MpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAvLyAgIGl0KCdjYWxscyBvblByZXNzRGVsZXRlIHByb3Agd2hlbiBkZWxldGUgaWNvbiBpcyBwcmVzc2VkJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3Qgb25QcmVzc0RlbGV0ZSA9IGplc3QuZm4oKTtcbiAgLy8gICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoXG4gIC8vICAgICAgIDxIZWFkZXIgdGl0bGU9XCJUZXN0IFRpdGxlXCIgaWQ9ezF9IG9uUHJlc3NEZWxldGU9e29uUHJlc3NEZWxldGV9IC8+LFxuICAvLyAgICAgKTtcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGVsZXRlLWljb24nKSk7XG4gIC8vICAgICBleHBlY3Qob25QcmVzc0RlbGV0ZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAvLyAgIH0pO1xuXG4gIC8vICAgaXQoJ3JlbmRlcnMgdGhlIGNvcnJlY3QgaWNvbiB3aGVuIGRldGFpbCBwcm9wIGlzIHRydWUnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKFxuICAvLyAgICAgICA8SGVhZGVyIHRpdGxlPVwiVGVzdCBUaXRsZVwiIGRldGFpbD17dHJ1ZX0gLz4sXG4gIC8vICAgICApO1xuICAvLyAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdtZW51LWljb24nKS5wcm9wcy5uYW1lKS50b0JlKCdjaGV2cm9uLWJhY2stb3V0bGluZScpO1xuICAvLyAgIH0pO1xufSk7XG5cbi8vIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vLyBpbXBvcnQgeyBzaGFsbG93IH0gZnJvbSAnZW56eW1lJztcbi8vIGltcG9ydCBIZWFkZXIgZnJvbSAnLi9IZWFkZXInO1xuXG4vLyBkZXNjcmliZSgnSGVhZGVyIGNvbXBvbmVudCcsICgpID0+IHtcbi8vICAgbGV0IHdyYXBwZXI7XG4vLyAgIGxldCBvblByZXNzTW9jayA9IGplc3QuZm4oKTtcbi8vICAgbGV0IG9uUHJlc3NEZWxldGVNb2NrID0gamVzdC5mbigpO1xuXG4vLyAgIGJlZm9yZUVhY2goKCkgPT4ge1xuLy8gICAgIHdyYXBwZXIgPSBzaGFsbG93KFxuLy8gICAgICAgPEhlYWRlclxuLy8gICAgICAgICB0aXRsZT1cIlRlc3QgVGl0bGVcIlxuLy8gICAgICAgICBvblByZXNzPXtvblByZXNzTW9ja31cbi8vICAgICAgICAgb25QcmVzc0RlbGV0ZT17b25QcmVzc0RlbGV0ZU1vY2t9XG4vLyAgICAgICAvPlxuLy8gICAgICk7XG4vLyAgIH0pO1xuXG4vLyAgIGl0KCdyZW5kZXJzIHRoZSBtZW51IGljb24gY29ycmVjdGx5JywgKCkgPT4ge1xuLy8gICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ1t0ZXN0SUQ9XCJtZW51LWljb25cIl0nKS5leGlzdHMoKSkudG9CZSh0cnVlKTtcbi8vICAgfSk7XG5cbi8vICAgaXQoJ3RyaWdnZXJzIHRoZSBvblByZXNzIGZ1bmN0aW9uIHdoZW4gbWVudSBpY29uIGlzIHByZXNzZWQnLCAoKSA9PiB7XG4vLyAgICAgd3JhcHBlci5maW5kKCdbdGVzdElEPVwibWVudS1pY29uXCJdJykuc2ltdWxhdGUoJ3ByZXNzJyk7XG4vLyAgICAgZXhwZWN0KG9uUHJlc3NNb2NrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4vLyAgIH0pO1xuXG4vLyAgIGl0KCdyZW5kZXJzIHRoZSBiYWNrIGFycm93IGljb24gY29ycmVjdGx5IHdoZW4gZGV0YWlsIHByb3AgaXMgdHJ1ZScsICgpID0+IHtcbi8vICAgICB3cmFwcGVyLnNldFByb3BzKHsgZGV0YWlsOiB0cnVlIH0pO1xuLy8gICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ1tuYW1lPVwiY2hldnJvbi1iYWNrLW91dGxpbmVcIl0nKS5leGlzdHMoKSkudG9CZSh0cnVlKTtcbi8vICAgfSk7XG5cbi8vICAgaXQoJ3JlbmRlcnMgdGhlIHRyYXNoIGNhbiBpY29uIGNvcnJlY3RseSB3aGVuIGlkIHByb3AgaXMgbm90IG51bGwnLCAoKSA9PiB7XG4vLyAgICAgd3JhcHBlci5zZXRQcm9wcyh7IGlkOiAnMTIzJyB9KTtcbi8vICAgICBleHBlY3Qod3JhcHBlci5maW5kKCdbbmFtZT1cInRyYXNoLW91dGxpbmVcIl0nKS5leGlzdHMoKSkudG9CZSh0cnVlKTtcbi8vICAgfSk7XG5cbi8vICAgaXQoJ3RyaWdnZXJzIHRoZSBvblByZXNzRGVsZXRlIGZ1bmN0aW9uIHdoZW4gdHJhc2ggY2FuIGljb24gaXMgcHJlc3NlZCcsICgpID0+IHtcbi8vICAgICB3cmFwcGVyLnNldFByb3BzKHsgaWQ6ICcxMjMnIH0pO1xuLy8gICAgIHdyYXBwZXIuZmluZCgnW25hbWU9XCJ0cmFzaC1vdXRsaW5lXCJdJykuc2ltdWxhdGUoJ3ByZXNzJyk7XG4vLyAgICAgZXhwZWN0KG9uUHJlc3NEZWxldGVNb2NrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4vLyAgIH0pO1xuXG4vLyAgIGl0KCdyZW5kZXJzIHRoZSB0aXRsZSBjb3JyZWN0bHknLCAoKSA9PiB7XG4vLyAgICAgZXhwZWN0KHdyYXBwZXIuZmluZCgnVGV4dCcpLnByb3BzKCkuY2hpbGRyZW4pLnRvRXF1YWwoJ1Rlc3QgVGl0bGUnKTtcbi8vICAgfSk7XG5cbi8vICAgaXQoJ2FwcGxpZXMgY29ycmVjdCBzdHlsZXMgdG8gdGhlIGhlYWRlciBjb250YWluZXInLCAoKSA9PiB7XG4vLyAgICAgZXhwZWN0KHdyYXBwZXIuZmluZCgnU2FmZUFyZWFWaWV3JykucHJvcHMoKS5zdHlsZSkudG9FcXVhbChzdHlsZXMuZmxvYXRDb250YWluZXIpO1xuLy8gICB9KTtcbi8vIH0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUErQjtBQUUvQkEsUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0VBRXJCQyxFQUFFLENBQUMsa0NBQWtDLEVBQUUsWUFBTTtJQUMzQyxjQUFpQyxJQUFBQyxvQkFBTSxFQUFDLHFCQUFDLGVBQU07UUFBQyxLQUFLLEVBQUMsa0JBQWtCO1FBQUUsTUFBTSxFQUFFO01BQU0sRUFBRyxDQUFDO01BQXJGQyxTQUFTLFdBQVRBLFNBQVM7TUFBRUMsV0FBVyxXQUFYQSxXQUFXO0lBQzdCQyxNQUFNLENBQUNGLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUNHLFVBQVUsRUFBRTtJQUNsREQsTUFBTSxDQUFDRCxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxFQUFFO0VBQy9DLENBQUMsQ0FBQztFQUVGTCxFQUFFLENBQUUsd0JBQXdCLEVBQUcsWUFBTTtJQUNqQyxlQUFpQyxJQUFBQyxvQkFBTSxFQUFDLHFCQUFDLGVBQU07UUFBQyxLQUFLLEVBQUMsVUFBVTtRQUFFLE1BQU0sRUFBRSxJQUFLO1FBQUMsRUFBRSxFQUFFO01BQUssRUFBRyxDQUFDO01BQXRGQyxTQUFTLFlBQVRBLFNBQVM7TUFBRUMsV0FBVyxZQUFYQSxXQUFXO0lBQzdCQyxNQUFNLENBQUNGLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDRyxVQUFVLEVBQUU7SUFDMUNELE1BQU0sQ0FBQ0QsV0FBVyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQ0UsVUFBVSxFQUFFO0VBQzVELENBQUMsQ0FBQztFQUVGTCxFQUFFLENBQUUseUJBQXlCLEVBQUcsWUFBTTtJQUNsQyxlQUFpQyxJQUFBQyxvQkFBTSxFQUFDLHFCQUFDLGVBQU07UUFBQyxLQUFLLEVBQUMsV0FBVztRQUFFLE1BQU0sRUFBRSxJQUFLO1FBQUMsRUFBRSxFQUFFO01BQU0sRUFBRyxDQUFDO01BQXhGQyxTQUFTLFlBQVRBLFNBQVM7TUFBRUMsV0FBVyxZQUFYQSxXQUFXO0lBRTdCQyxNQUFNLENBQUNGLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDRyxVQUFVLEVBQUU7SUFDM0NELE1BQU0sQ0FBQ0QsV0FBVyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQ0UsVUFBVSxFQUFFO0lBQ3hERCxNQUFNLENBQUNELFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDRSxVQUFVLEVBQUU7RUFFckQsQ0FBQyxDQUFDO0VBRUZMLEVBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxZQUFNO0lBQ3ZELElBQU1NLE9BQU8sR0FBR0MsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDekIsZUFBc0IsSUFBQVAsb0JBQU0sRUFBQyxxQkFBQyxlQUFNO1FBQUMsS0FBSyxFQUFDLFlBQVk7UUFBQyxPQUFPLEVBQUVLO01BQVEsRUFBRyxDQUFDO01BQXRFSCxXQUFXLFlBQVhBLFdBQVc7SUFDbEJNLHVCQUFTLENBQUNDLEtBQUssQ0FBQ1AsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pDQyxNQUFNLENBQUNFLE9BQU8sQ0FBQyxDQUFDSyxnQkFBZ0IsRUFBRTtFQUNwQyxDQUFDLENBQUM7QUFpQk4sQ0FBQyxDQUFDIn0=