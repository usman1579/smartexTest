79bdaa4921ad076b4949bc60fcfa74cd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("react-native");
var _react = _interopRequireDefault(require("react"));
var _reactNative2 = require("@testing-library/react-native");
var _FloatingButton = _interopRequireDefault(require("../FloatingButton"));
var _enzyme = require("enzyme");
var _reducer = require("../../../redux/reducer");
var _jsxRuntime = require("react/jsx-runtime");
describe('Floating Button', function () {
  var onPressAddData;
  var title = 'Test Title';
  var description = 'Test Description';
  var date = new Date();
  var item = {
    check: true,
    id: '1'
  };
  var navigation = {
    goBack: jest.fn()
  };
  var dispatch = jest.fn();
  beforeEach(function () {
    onPressAddData = jest.fn(function () {
      dispatch((0, _reducer.addDataToList)({
        title: title,
        description: description,
        date: date,
        check: item.chek || false,
        id: (item == null ? void 0 : item.id) || uuid.v4()
      }));
      navigation.goBack();
    });
  });
  it('renders correctly on Main Screen', function () {
    var _render = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {})),
      getByTestId = _render.getByTestId;
    expect(getByTestId('add')).toBeTruthy();
  });
  it('calls navigation.navigate when pressed', function () {
    var data = {
      id: 1,
      name: 'Test',
      description: 'here is description',
      date: new Date()
    };
    var navigation = {
      navigate: jest.fn()
    };
    var _render2 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {
        navigation: navigation,
        onPress: function onPress() {
          return navigation.navigate('Detail', {
            item: data,
            screen: 'Add Item'
          });
        }
      })),
      getByTestId = _render2.getByTestId;
    var button = getByTestId('floating-button');
    _reactNative2.fireEvent.press(button);
    expect(navigation.navigate).toHaveBeenCalledWith('Detail', {
      item: data,
      screen: 'Add Item'
    });
  });
  it('renders correctly on Detail Screen with Tick Icon', function () {
    var _render3 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {
        type: 'done'
      })),
      getByTestId = _render3.getByTestId;
    expect(getByTestId('checkmark-outline')).toBeTruthy();
  });
  it('calls onPressAddData when pressed and dispatches addDataToList action', function () {
    var _render4 = (0, _reactNative2.render)((0, _jsxRuntime.jsx)(_FloatingButton.default, {
        navigation: navigation,
        onPress: onPressAddData,
        type: "done",
        title: title,
        description: description,
        date: date,
        item: item,
        dispatch: dispatch
      })),
      getByTestId = _render4.getByTestId;
    var button = getByTestId('floating-button');
    _reactNative2.fireEvent.press(button);
    expect(onPressAddData).toHaveBeenCalled();
    expect(dispatch).toHaveBeenCalledWith((0, _reducer.addDataToList)({
      title: title,
      description: description,
      date: date,
      check: item.chek || false,
      id: (item == null ? void 0 : item.id) || uuid.v4()
    }));
    expect(navigation.goBack).toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsIm9uUHJlc3NBZGREYXRhIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImRhdGUiLCJEYXRlIiwiaXRlbSIsImNoZWNrIiwiaWQiLCJuYXZpZ2F0aW9uIiwiZ29CYWNrIiwiamVzdCIsImZuIiwiZGlzcGF0Y2giLCJiZWZvcmVFYWNoIiwiYWRkRGF0YVRvTGlzdCIsImNoZWsiLCJ1dWlkIiwidjQiLCJpdCIsInJlbmRlciIsImdldEJ5VGVzdElkIiwiZXhwZWN0IiwidG9CZVRydXRoeSIsImRhdGEiLCJuYW1lIiwibmF2aWdhdGUiLCJzY3JlZW4iLCJidXR0b24iLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwidG9IYXZlQmVlbkNhbGxlZCJdLCJzb3VyY2VzIjpbImZsb2F0aW5nQnV0dG9uLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7cmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IEZsb2F0aW5nQnV0dG9uIGZyb20gJy4uL0Zsb2F0aW5nQnV0dG9uJztcbmltcG9ydCB7c2hhbGxvd30gZnJvbSAnZW56eW1lJztcbmltcG9ydCB7YWRkRGF0YVRvTGlzdH0gZnJvbSAnLi4vLi4vLi4vcmVkdXgvcmVkdWNlcic7XG5kZXNjcmliZSgnRmxvYXRpbmcgQnV0dG9uJywgKCkgPT4ge1xuXG4gIGxldCBvblByZXNzQWRkRGF0YVxuICBjb25zdCB0aXRsZSA9ICdUZXN0IFRpdGxlJ1xuICBjb25zdCBkZXNjcmlwdGlvbiA9ICdUZXN0IERlc2NyaXB0aW9uJ1xuICBjb25zdCBkYXRlID0gbmV3IERhdGUoKVxuICBjb25zdCBpdGVtID0ge2NoZWNrOiB0cnVlLCBpZDogJzEnfVxuICBjb25zdCBuYXZpZ2F0aW9uID0geyBnb0JhY2s6IGplc3QuZm4oKSB9XG4gIGNvbnN0IGRpc3BhdGNoID0gamVzdC5mbigpXG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgb25QcmVzc0FkZERhdGEgPSBqZXN0LmZuKCgpID0+IHtcbiAgICAgIGRpc3BhdGNoKGFkZERhdGFUb0xpc3Qoe1xuICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgY2hlY2s6IGl0ZW0uY2hlayB8fCBmYWxzZSxcbiAgICAgICAgaWQ6IGl0ZW0/LmlkIHx8IHV1aWQudjQoKSxcbiAgICAgIH0pKTtcbiAgICAgIG5hdmlnYXRpb24uZ29CYWNrKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSBvbiBNYWluIFNjcmVlbicsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxGbG9hdGluZ0J1dHRvbiAvPik7XG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdhZGQnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnY2FsbHMgbmF2aWdhdGlvbi5uYXZpZ2F0ZSB3aGVuIHByZXNzZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGlkOiAxLFxuICAgICAgbmFtZTogJ1Rlc3QnLFxuICAgICAgZGVzY3JpcHRpb246ICdoZXJlIGlzIGRlc2NyaXB0aW9uJyxcbiAgICAgIGRhdGU6IG5ldyBEYXRlKCksXG4gICAgfTtcbiAgICBjb25zdCBuYXZpZ2F0aW9uID0ge25hdmlnYXRlOiBqZXN0LmZuKCl9O1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoXG4gICAgICA8RmxvYXRpbmdCdXR0b25cbiAgICAgICAgbmF2aWdhdGlvbj17bmF2aWdhdGlvbn1cbiAgICAgICAgb25QcmVzcz17KCkgPT5cbiAgICAgICAgICBuYXZpZ2F0aW9uLm5hdmlnYXRlKCdEZXRhaWwnLCB7aXRlbTogZGF0YSwgc2NyZWVuOiAnQWRkIEl0ZW0nfSlcbiAgICAgICAgfVxuICAgICAgLz4sXG4gICAgKTtcbiAgICBjb25zdCBidXR0b24gPSBnZXRCeVRlc3RJZCgnZmxvYXRpbmctYnV0dG9uJyk7XG4gICAgZmlyZUV2ZW50LnByZXNzKGJ1dHRvbik7XG4gICAgZXhwZWN0KG5hdmlnYXRpb24ubmF2aWdhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdEZXRhaWwnLCB7XG4gICAgICBpdGVtOiBkYXRhLFxuICAgICAgc2NyZWVuOiAnQWRkIEl0ZW0nLFxuICAgIH0pO1xuICB9KTtcblxuICBpdCgncmVuZGVycyBjb3JyZWN0bHkgb24gRGV0YWlsIFNjcmVlbiB3aXRoIFRpY2sgSWNvbicsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxGbG9hdGluZ0J1dHRvbiB0eXBlPXsnZG9uZSd9IC8+KTtcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2NoZWNrbWFyay1vdXRsaW5lJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG4gXG4gIGl0KCdjYWxscyBvblByZXNzQWRkRGF0YSB3aGVuIHByZXNzZWQgYW5kIGRpc3BhdGNoZXMgYWRkRGF0YVRvTGlzdCBhY3Rpb24nLCAoKSA9PiB7XG4gICAgY29uc3QgeyBnZXRCeVRlc3RJZCB9ID0gcmVuZGVyKFxuICAgICAgPEZsb2F0aW5nQnV0dG9uXG4gICAgICAgIG5hdmlnYXRpb249e25hdmlnYXRpb259XG4gICAgICAgIG9uUHJlc3M9e29uUHJlc3NBZGREYXRhfVxuICAgICAgICB0eXBlPSdkb25lJ1xuICAgICAgICB0aXRsZT17dGl0bGV9XG4gICAgICAgIGRlc2NyaXB0aW9uPXtkZXNjcmlwdGlvbn1cbiAgICAgICAgZGF0ZT17ZGF0ZX1cbiAgICAgICAgaXRlbT17aXRlbX1cbiAgICAgICAgZGlzcGF0Y2g9e2Rpc3BhdGNofVxuICAgICAgLz5cbiAgICApO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGdldEJ5VGVzdElkKCdmbG9hdGluZy1idXR0b24nKTtcbiAgICBmaXJlRXZlbnQucHJlc3MoYnV0dG9uKVxuICAgIGV4cGVjdChvblByZXNzQWRkRGF0YSkudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgZXhwZWN0KGRpc3BhdGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChhZGREYXRhVG9MaXN0KHtcbiAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIGRhdGU6IGRhdGUsXG4gICAgICBjaGVjazogaXRlbS5jaGVrIHx8IGZhbHNlLFxuICAgICAgaWQ6IGl0ZW0/LmlkIHx8IHV1aWQudjQoKSxcbiAgICB9KSk7XG4gICAgZXhwZWN0KG5hdmlnYXRpb24uZ29CYWNrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuIFxufSk7XG5cbiJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFxRDtBQUNyREEsUUFBUSxDQUFDLGlCQUFpQixFQUFFLFlBQU07RUFFaEMsSUFBSUMsY0FBYztFQUNsQixJQUFNQyxLQUFLLEdBQUcsWUFBWTtFQUMxQixJQUFNQyxXQUFXLEdBQUcsa0JBQWtCO0VBQ3RDLElBQU1DLElBQUksR0FBRyxJQUFJQyxJQUFJLEVBQUU7RUFDdkIsSUFBTUMsSUFBSSxHQUFHO0lBQUNDLEtBQUssRUFBRSxJQUFJO0lBQUVDLEVBQUUsRUFBRTtFQUFHLENBQUM7RUFDbkMsSUFBTUMsVUFBVSxHQUFHO0lBQUVDLE1BQU0sRUFBRUMsSUFBSSxDQUFDQyxFQUFFO0VBQUcsQ0FBQztFQUN4QyxJQUFNQyxRQUFRLEdBQUdGLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0VBRTFCRSxVQUFVLENBQUMsWUFBTTtJQUNmYixjQUFjLEdBQUdVLElBQUksQ0FBQ0MsRUFBRSxDQUFDLFlBQU07TUFDN0JDLFFBQVEsQ0FBQyxJQUFBRSxzQkFBYSxFQUFDO1FBQ3JCYixLQUFLLEVBQUVBLEtBQUs7UUFDWkMsV0FBVyxFQUFFQSxXQUFXO1FBQ3hCQyxJQUFJ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