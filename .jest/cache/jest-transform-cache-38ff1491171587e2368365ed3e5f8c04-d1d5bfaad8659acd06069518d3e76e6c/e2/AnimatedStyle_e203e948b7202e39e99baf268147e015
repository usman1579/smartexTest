f3c2ae65cc0df37f20fd8606154f3331
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var flattenStyle = require('../../StyleSheet/flattenStyle');
var NativeAnimatedHelper = require('../NativeAnimatedHelper');
var AnimatedNode = require('./AnimatedNode');
var AnimatedTransform = require('./AnimatedTransform');
var AnimatedWithChildren = require('./AnimatedWithChildren');
var AnimatedStyle = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedStyle, _AnimatedWithChildren);
  var _super = _createSuper(AnimatedStyle);
  function AnimatedStyle(style) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedStyle);
    _this = _super.call(this);
    style = flattenStyle(style) || {};
    if (style.transform) {
      style = Object.assign({}, style, {
        transform: new AnimatedTransform(style.transform)
      });
    }
    _this._style = style;
    return _this;
  }
  (0, _createClass2.default)(AnimatedStyle, [{
    key: "_walkStyleAndGetValues",
    value: function _walkStyleAndGetValues(style, initialStyle) {
      var updatedStyle = {};
      for (var key in style) {
        var value = style[key];
        if (value instanceof AnimatedNode) {
          if (!initialStyle || !value.__isNative) {
            updatedStyle[key] = value.__getValue();
          } else if (initialStyle.hasOwnProperty(key)) {
            updatedStyle[key] = initialStyle[key];
          }
        } else if (value && !Array.isArray(value) && typeof value === 'object') {
          updatedStyle[key] = this._walkStyleAndGetValues(value, initialStyle);
        } else {
          updatedStyle[key] = value;
        }
      }
      return updatedStyle;
    }
  }, {
    key: "__getValue",
    value: function __getValue(initialStyle) {
      return this._walkStyleAndGetValues(this._style, initialStyle);
    }
  }, {
    key: "_walkStyleAndGetAnimatedValues",
    value: function _walkStyleAndGetAnimatedValues(style) {
      var updatedStyle = {};
      for (var key in style) {
        var value = style[key];
        if (value instanceof AnimatedNode) {
          updatedStyle[key] = value.__getAnimatedValue();
        } else if (value && !Array.isArray(value) && typeof value === 'object') {
          updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
        }
      }
      return updatedStyle;
    }
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      return this._walkStyleAndGetAnimatedValues(this._style);
    }
  }, {
    key: "__attach",
    value: function __attach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof AnimatedNode) {
          value.__addChild(this);
        }
      }
    }
  }, {
    key: "__detach",
    value: function __detach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof AnimatedNode) {
          value.__removeChild(this);
        }
      }
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedStyle.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof AnimatedNode) {
          value.__makeNative(platformConfig);
        }
      }
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedStyle.prototype), "__makeNative", this).call(this, platformConfig);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      var styleConfig = {};
      for (var styleKey in this._style) {
        if (this._style[styleKey] instanceof AnimatedNode) {
          var style = this._style[styleKey];
          style.__makeNative(this.__getPlatformConfig());
          styleConfig[styleKey] = style.__getNativeTag();
        }
      }
      NativeAnimatedHelper.validateStyles(styleConfig);
      return {
        type: 'style',
        style: styleConfig
      };
    }
  }]);
  return AnimatedStyle;
}(AnimatedWithChildren);
module.exports = AnimatedStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,